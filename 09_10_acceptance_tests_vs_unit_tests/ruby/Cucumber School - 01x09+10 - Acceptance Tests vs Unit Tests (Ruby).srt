1
00:00:14,600 --> 00:00:16,640
Last time on Cucumber School

2
00:00:16,640 --> 00:00:19,260
we showed you how to use
example mapping

3
00:00:19,260 --> 00:00:22,500
to facilitate conversations between stakeholders

4
00:00:22,500 --> 00:00:25,260
before starting work on a new user story

5
00:00:25,880 --> 00:00:28,740
We finished the lesson on a technical note
showing you how to extract

6
00:00:28,740 --> 00:00:31,860
a layer of support code from your
step definitions

7
00:00:31,860 --> 00:00:36,360
to keep your Cucumber code easy -
and cost-effective - to maintain

8
00:00:37,700 --> 00:00:40,200
We’re going to keep things technical
in this lesson

9
00:00:40,200 --> 00:00:43,920
Remember that bug we spotted right back at
the beginning of lesson seven

10
00:00:43,920 --> 00:00:47,000
where our user was over-charged
if they mentioned “buy”

11
00:00:47,000 --> 00:00:49,420
several times in the same message?

12
00:00:49,420 --> 00:00:52,400
It's time to finally knuckle down and fix it

13
00:00:53,380 --> 00:00:55,840
As we do so, you’re going to get
some more experience

14
00:00:55,840 --> 00:01:00,520
of the inner and outer TDD loops that
we first introduced you to in lesson five

15
00:01:01,220 --> 00:01:04,420
We’ll learn about mock objects
and explore the difference between

16
00:01:04,420 --> 00:01:07,020
unit tests and acceptance tests

17
00:01:07,020 --> 00:01:08,700
and learn the value of each

18
00:01:09,640 --> 00:01:14,000
If you’re someone who doesn’t normally
dive deep into code, try not to worry

19
00:01:14,500 --> 00:01:19,020
We’ll keep the example from moving too fast
and we hope you’ll find it educational

20
00:01:19,020 --> 00:01:22,580
to see how different kinds of tests
complement each other

21
00:01:22,580 --> 00:01:25,260
in helping you build a quality product

22
00:01:26,520 --> 00:01:31,380
Let’s work outside-in and start by
tidying up the Gherkin specification

23
00:01:32,140 --> 00:01:37,500
Right now, the scenario is still in the raw form
it was in when the bug was first reported

24
00:01:37,500 --> 00:01:40,860
with a name that references an ID
in our bug tracking system

25
00:01:41,888 --> 00:01:45,984
This doesn’t make for very good documentation
about the intended behaviour

26
00:01:47,260 --> 00:01:52,540
Using our Friends episode naming convention
that we introduced in lesson 7

27
00:01:52,540 --> 00:01:55,700
we can come up with a more expressive name
for this scenario

28
00:01:56,480 --> 00:01:57,960
How about:

29
00:01:57,960 --> 00:02:02,880
the one where Sean mentions “buy”
several times in the same shout?

30
00:02:04,940 --> 00:02:07,140
You might be worried about losing this bug ID

31
00:02:07,940 --> 00:02:09,480
We could keep it

32
00:02:09,480 --> 00:02:15,680
in a comment, a tag, or in the description
of the Scenario if we wanted to

33
00:02:16,600 --> 00:02:20,280
If your team likes to keep track of such things
feel free to do that

34
00:02:21,320 --> 00:02:24,060
We’d prefer to consign the bug to history -

35
00:02:24,060 --> 00:02:27,680
what matters to us
is how the software behaves today

36
00:02:27,680 --> 00:02:29,360
not how it got to be that way

37
00:02:31,560 --> 00:02:35,660
We think the values in the example could be
changed to make it a little more expressive

38
00:02:36,160 --> 00:02:41,080
If we start Sean off with 100 credits
and end him with 95

39
00:02:41,080 --> 00:02:46,240
it more clearly illustrates the rule that
only five credits should be deducted

40
00:02:48,700 --> 00:02:49,940
Talking of which

41
00:02:49,940 --> 00:02:55,620
let’s also update the rule to make it explicit
that you lose 5 credits per shout

42
00:02:57,620 --> 00:02:58,360
Good

43
00:02:59,260 --> 00:03:03,180
Now let’s run our improved scenario
using the @todo tag

44
00:03:03,180 --> 00:03:04,840
and go hunting for that bug

45
00:03:06,880 --> 00:03:10,460
OK, well we can see our scenario is failing

46
00:03:10,460 --> 00:03:12,500
but where do we need to go to fix it?

47
00:03:14,200 --> 00:03:18,020
Luckily, our system is pretty small
and we remember that all the

48
00:03:18,020 --> 00:03:23,260
premium account behaviour is implemented in
the Network class, so let’s go and look there

49
00:03:25,660 --> 00:03:31,840
Well, that broadcast method is pretty complex
but I suppose the bug must be in there somewhere

50
00:03:32,800 --> 00:03:34,660
Let’s try to pin it down with a unit test

51
00:03:36,580 --> 00:03:38,880
Oh dear, oh dear:

52
00:03:39,400 --> 00:03:44,540
This file does not contain any tests for
the premium account behaviour!

53
00:03:45,360 --> 00:03:51,320
It looks like when that so-called
hot-shot ninja rockstar subcontractor, Stevie

54
00:03:51,320 --> 00:03:55,440
hacked in the first version of premium accounts
he drove everything from that

55
00:03:55,440 --> 00:04:00,900
one great big Cucumber scenario
and never wrote any unit tests

56
00:04:01,800 --> 00:04:03,160
Why is this a problem?

57
00:04:04,740 --> 00:04:09,600
Well, think about each automated test you write
as warning light that you’re fitting to your system

58
00:04:10,360 --> 00:04:14,600
Acceptance tests are warning lights
that make sense to business people:

59
00:04:14,600 --> 00:04:15,840
when they fail

60
00:04:15,840 --> 00:04:20,600
they tell you what functionality a user
will not be able to enjoy because of the bug

61
00:04:22,140 --> 00:04:27,600
What a unit test does is give the programmers
an indication about why the bug has occurred

62
00:04:28,660 --> 00:04:33,340
Ideally, whenever you see an acceptance test’s
warning light flash

63
00:04:33,340 --> 00:04:36,960
there should be at least one corresponding
unit test flashing too

64
00:04:36,960 --> 00:04:39,680
pointing the developers to
the source of the problem

65
00:04:41,080 --> 00:04:46,220
If you don’t have any unit tests
you’re left guessing where the problem lies

66
00:04:46,719 --> 00:04:50,815
In a big system
this can be a serious waste of time

67
00:04:51,840 --> 00:04:57,220
So the responsible thing to do at this point is to
retrofit some unit tests for the Network class

68
00:04:58,160 --> 00:05:00,380
We’ll start with its existing behaviour

69
00:05:00,380 --> 00:05:03,620
then go on to test-drive the behaviour
we need to fix our bug

70
00:05:04,840 --> 00:05:10,780
Let’s write a test case for deducting five credits
when the word “buy” is mentioned once

71
00:05:12,840 --> 00:05:16,340
All our existing tests use a
test double or mock object

72
00:05:16,340 --> 00:05:20,000
to represent the instance of Person
that the Network collaborates with

73
00:05:20,760 --> 00:05:23,060
So let’s go with that and try to do the same here

74
00:05:24,540 --> 00:05:27,540
First we need a mock object to represent Sean

75
00:05:29,880 --> 00:05:33,060
And we’ll need to broadcast a
message containing the word “buy”

76
00:05:35,180 --> 00:05:36,040
What next?

77
00:05:37,920 --> 00:05:42,020
Well we need to assert that Sean is told
to reduce his credits

78
00:05:43,720 --> 00:05:48,000
In the deduct_credits method here
we’re calling the credits setter

79
00:05:48,000 --> 00:05:50,520
setting it to five less than the current value

80
00:05:50,520 --> 00:05:55,060
So we need to stub the attribute getter with
say 100 credits, and then check

81
00:05:55,060 --> 00:05:57,380
that the setter is called with 95

82
00:05:58,180 --> 00:05:59,420
Here's how we do that

83
00:06:02,760 --> 00:06:06,720
This test is a real pain to write
and we’re still not done!

84
00:06:06,720 --> 00:06:08,200
Now it’s failing with this error

85
00:06:12,360 --> 00:06:14,540
Following the stack trace
it looks like the problem is

86
00:06:14,540 --> 00:06:17,380
that our list of listeners
hasn’t been initialised

87
00:06:18,160 --> 00:06:20,975
The Network class has been built with the
assumption that there’s always going to be

88
00:06:20,975 --> 00:06:22,975
at least one listener subscribed

89
00:06:23,740 --> 00:06:26,560
So even though it’s not relevant to our test

90
00:06:26,560 --> 00:06:29,880
we’ll need to create a Lucy
and subscribe her to the Network

91
00:06:30,660 --> 00:06:36,040
She’ll also need to be ready to receive a call
to hear when the message is broadcast

92
00:06:37,480 --> 00:06:40,020
Phew. Our test is passing at last

93
00:06:40,640 --> 00:06:45,000
That was hard work
and what we’ve produced is just awful

94
00:06:45,760 --> 00:06:51,440
This ugly test is typical of what happens
when you use mock objects or test doubles

95
00:06:51,440 --> 00:06:54,540
to retro-fit tests to existing code

96
00:06:55,740 --> 00:06:57,220
So why use mocks?

97
00:06:58,600 --> 00:07:01,120
Mock objects are a design tool

98
00:07:01,820 --> 00:07:05,620
They’re intended to be used when
constructing new code

99
00:07:05,620 --> 00:07:09,840
to throw together a lightweight sketch
of a collaborating object

100
00:07:10,740 --> 00:07:13,240
When you’re focused on building a Network

101
00:07:13,240 --> 00:07:16,520
and you think it needs to
collaborate with a Person

102
00:07:16,520 --> 00:07:20,580
it would slow you down to have to
go off to build the actual Person class

103
00:07:21,360 --> 00:07:23,460
It’s often quicker to use a mock object

104
00:07:23,460 --> 00:07:27,060
to hash out your idea of roughly
what Person might look like

105
00:07:27,060 --> 00:07:30,300
leaving you to stay focused on the task at hand

106
00:07:31,260 --> 00:07:35,980
As you do this
you’ll find yourself - as we just did

107
00:07:35,980 --> 00:07:40,540
having to specify how you want
the two objects to interact

108
00:07:41,320 --> 00:07:47,480
If you think about it, this interaction -
the way they talk to each other at runtime -

109
00:07:47,480 --> 00:07:50,580
is the true behaviour of these objects

110
00:07:52,060 --> 00:07:57,260
Remember back in lesson 5, Loops
where we explained that acceptance tests

111
00:07:57,260 --> 00:08:04,340
help you build the right thing
and unit tests help you build the thing right?

112
00:08:05,120 --> 00:08:10,080
In other words, acceptance tests help us to
explore the problem domain

113
00:08:10,080 --> 00:08:13,320
while unit tests help us explore the solution

114
00:08:14,800 --> 00:08:17,100
When you drive your development from tests

115
00:08:17,100 --> 00:08:20,480
the unit tests can give you feedback
about the design of your solution

116
00:08:20,991 --> 00:08:25,135
If it’s easy to take an individual object and
plug it into your tests

117
00:08:25,140 --> 00:08:27,800
your design is likely to be nicely modular

118
00:08:27,800 --> 00:08:30,480
which means it will be easier
to change in the future

119
00:08:30,980 --> 00:08:36,120
If it’s awkward, that’s a signal
there’s a problem with your design

120
00:08:36,860 --> 00:08:40,960
We call this listening to the tests

121
00:08:43,180 --> 00:08:47,900
One alternative to using mocks would be to
use a real instance of Person

122
00:08:47,900 --> 00:08:49,400
instead of the mock object

123
00:08:51,220 --> 00:08:53,800
This has a couple of apparent advantages

124
00:08:53,800 --> 00:08:58,660
First, Person automatically subscribes
to the Network as it is constructed

125
00:08:58,660 --> 00:09:00,920
so we wouldn’t need this clutter about Lucy

126
00:09:02,200 --> 00:09:07,120
Also, because we’re testing Person and Network
as one integrated lump

127
00:09:07,120 --> 00:09:11,820
we don’t have to fuss about exactly
how they communicate about Sean’s credits

128
00:09:11,820 --> 00:09:15,780
All we have to do is check how many credits
he has left over at the end

129
00:09:17,567 --> 00:09:21,663
But this seductive solution papers over
the cracks in our design

130
00:09:22,440 --> 00:09:27,900
When you use mocks, you put the microscope on the
interaction between an object and its collaborators

131
00:09:27,900 --> 00:09:31,700
This gives you feedback about
how coupled those objects are

132
00:09:31,920 --> 00:09:37,480
A lot of chatter going back and forth like this
suggests they’re getting tangled up together

133
00:09:38,780 --> 00:09:42,620
So the fact that it’s awkward to use mocks here
is not because mocks are bad

134
00:09:42,620 --> 00:09:45,720
or because we’re bad at using mocks:

135
00:09:45,720 --> 00:09:48,280
it’s feedback from the code

136
00:09:49,540 --> 00:09:55,200
Let’s listen to the tests and try to respond
to this pain instead of ignoring it

137
00:09:56,480 --> 00:09:59,640
We’ll start with something easy
and deal with the situation where

138
00:09:59,640 --> 00:10:02,940
the Network is asked to broadcast
when it has no listeners

139
00:10:03,660 --> 00:10:05,800
This is an annoying detail about

140
00:10:05,800 --> 00:10:09,540
how this object behaves that didn’t
show itself in our acceptance tests

141
00:10:10,040 --> 00:10:11,840
Let’s test-drive a fix

142
00:10:18,100 --> 00:10:20,600
To fix it, all we need to do

143
00:10:20,600 --> 00:10:23,640
is initialise the collection of listeners
in the constructor

144
00:10:23,640 --> 00:10:25,400
which makes more sense anyway

145
00:10:28,620 --> 00:10:29,440
Easy!

146
00:10:30,020 --> 00:10:33,600
And with that fixed
we can simplify the test we just wrote

147
00:10:37,440 --> 00:10:39,580
Let’s take stock a little bit

148
00:10:39,580 --> 00:10:43,840
We’re trying to fix that bug about
multiple mentions of the word “buy”

149
00:10:43,840 --> 00:10:49,500
but first we’re retrofitting unit tests for the
premium account behaviour in the Network class

150
00:10:50,640 --> 00:10:55,340
It will be easier to see what tests are missing
if we reorganize the unit tests

151
00:10:55,340 --> 00:10:58,080
by Network’s responsibilities

152
00:10:59,460 --> 00:11:01,760
They basically fall into two categories

153
00:11:03,660 --> 00:11:08,640
These ones here are to do with
the responsibility of broadcasting to listeners

154
00:11:08,640 --> 00:11:12,520
so let’s group them up using
RSpec’s describe method

155
00:11:22,760 --> 00:11:26,860
Now we have our new test
which is about charging for shouts

156
00:11:30,540 --> 00:11:32,580
This last one here is a bit weird

157
00:11:33,160 --> 00:11:36,060
It’s sort of about broadcasting to listeners

158
00:11:36,060 --> 00:11:39,380
but it has this odd hack in it
which needs further investigation

159
00:11:40,620 --> 00:11:43,380
This test is quite obscure
and seems to be attempting to cover

160
00:11:43,380 --> 00:11:46,560
several aspects of
Network’s behaviour all at once

161
00:11:48,040 --> 00:11:51,440
Let’s document those individual behaviours
as new tests

162
00:11:51,440 --> 00:11:53,720
and we can come back
to deal with this one later

163
00:11:56,040 --> 00:12:00,720
We can see we’ll need something under the
responsibility of broadcasting to listeners

164
00:12:00,720 --> 00:12:05,160
to ensure long messages aren’t broadcast
for people with no credits

165
00:12:05,160 --> 00:12:08,320
so we can express that using
a pending RSpec example

166
00:12:09,560 --> 00:12:11,360
We can fill this out later

167
00:12:13,140 --> 00:12:17,780
It’s clear we’ll also need to test that
we charge two credits for an over-long message

168
00:12:18,740 --> 00:12:20,860
Let’s add another pending example for that

169
00:12:22,880 --> 00:12:27,060
Once those two tests are implemented
we won’t need this obscure one any more

170
00:12:27,780 --> 00:12:32,480
We’re not confident enough to just remove it
until we’ve seen those tests fleshed out

171
00:12:32,480 --> 00:12:35,960
so we can mark it as pending for now

172
00:12:37,000 --> 00:12:40,320
That will remind us we need to
come back and clean this up soon

173
00:12:42,111 --> 00:12:47,743
At this point it is becoming clear that
Network has too many responsibilities

174
00:12:48,767 --> 00:12:51,839
We have two different sources of feedback
telling us this

175
00:12:53,380 --> 00:12:58,420
With the unit tests laid out by responsibility
we can see more clearly

176
00:12:58,420 --> 00:13:03,080
that while broadcasting to listeners
is a responsibility that fits

177
00:13:03,080 --> 00:13:08,260
there’s no real reason why the Network
needs be responsible for charging for shouts

178
00:13:10,520 --> 00:13:15,320
Secondly, the communication protocol
between Network and Person

179
00:13:15,320 --> 00:13:18,580
exposed by the mocks, is very noisy:

180
00:13:19,360 --> 00:13:23,860
we’re making lots of method calls to Person
in order to determine whether they can

181
00:13:23,860 --> 00:13:26,340
afford the shout and to deduct payment

182
00:13:27,840 --> 00:13:31,620
First Sean calls Network#broadcast

183
00:13:31,620 --> 00:13:35,960
then Network asks Sean how many credits he has

184
00:13:35,960 --> 00:13:37,860
then Network tells Sean

185
00:13:37,860 --> 00:13:43,260
the new value of his credits
with the fee for the message deducted

186
00:13:43,260 --> 00:13:46,951
then Network asks Sean
how many credits he has again

187
00:13:46,980 --> 00:13:49,980
in order to check whether he can afford
to send the message!

188
00:13:52,220 --> 00:13:54,680
We could get all sad and angry that if only

189
00:13:54,680 --> 00:13:56,800
we’d test-driven this code in the first place

190
00:13:56,800 --> 00:14:00,740
we might have got this feedback sooner
but that would be futile:

191
00:14:00,740 --> 00:14:03,000
it's not too late to clean this code up!

192
00:14:03,780 --> 00:14:09,160
How about we make Sean responsible for
organising his own payment?

193
00:14:10,400 --> 00:14:14,500
Instead of rewriting this code
let’s see if we can refactor it

194
00:14:15,300 --> 00:14:20,240
When refactoring, it’s crucial not to
break existing functionality

195
00:14:20,240 --> 00:14:24,260
so we’ll rely on our tests to warn us
if we make a mistake

196
00:14:26,303 --> 00:14:28,095
We’ll work in small steps

197
00:14:28,600 --> 00:14:33,620
We may temporarily break some unit tests
as the implementation shifts

198
00:14:33,620 --> 00:14:37,340
but the acceptance tests should be
passing all the way through

199
00:14:37,340 --> 00:14:39,360
if everything goes according to plan

200
00:14:40,900 --> 00:14:41,920
Ready?

201
00:14:43,620 --> 00:14:47,800
We’ll start by moving the
deduct_credits method onto Person

202
00:14:48,840 --> 00:14:53,400
As a baby-step, we’ll make it public
so we can just continue to call it

203
00:14:53,400 --> 00:14:55,480
from Network’s broadcast method for now

204
00:14:56,380 --> 00:14:58,680
That should keep the acceptance tests passing

205
00:14:59,740 --> 00:15:00,460
Good

206
00:15:01,640 --> 00:15:07,020
Now let’s make Sean responsible for
deducting his own credits, as he shouts

207
00:15:13,140 --> 00:15:17,060
We can move over this whole responsibility
of charging for shouts

208
00:15:17,060 --> 00:15:20,060
from the network specs
to the person specs

209
00:15:20,831 --> 00:15:23,135
We’ll need to adjust the test like this...

210
00:15:32,863 --> 00:15:34,399
and we’re back to green!

211
00:15:36,191 --> 00:15:37,727
Let’s refactor some more

212
00:15:38,240 --> 00:15:41,300
Because all this code is running
within the shouter object now

213
00:15:41,300 --> 00:15:44,180
we don’t need to pass around this
instance of Person anymore

214
00:15:44,180 --> 00:15:47,720
and we can access the
credits instance variable here, directly

215
00:15:49,240 --> 00:15:51,800
We can make deduct credits private now

216
00:15:53,600 --> 00:15:56,420
We don’t need to pass short enough
around as a variable...

217
00:15:58,920 --> 00:16:01,240
we can just do the logic inline here

218
00:16:04,600 --> 00:16:08,700
Great, now the code in Network#broadcast
is much cleaner

219
00:16:09,400 --> 00:16:12,540
We still have these pending unit tests
we need to sort out

220
00:16:13,060 --> 00:16:18,440
Let’s start in Person, by fleshing out
this test about charging for long messages

221
00:16:27,500 --> 00:16:28,780
That's better

222
00:16:29,440 --> 00:16:33,020
Let’s just make it fail quickly
to check that we can trust it

223
00:16:37,887 --> 00:16:38,911
Okay

224
00:16:40,191 --> 00:16:43,775
now we can tackle these two
ignored unit tests in Network

225
00:16:44,287 --> 00:16:48,383
Let’s step back for a second
and consider the rule we’re implementing here

226
00:16:49,407 --> 00:16:55,039
This original unit test was simply there
to ensure that long messages were not broadcast:

227
00:16:55,807 --> 00:16:59,135
remember we originally started out
without premium accounts

228
00:17:00,159 --> 00:17:03,999
With the addition of premium accounts
the rule has changed:

229
00:17:04,520 --> 00:17:08,760
We will broadcast long messages
but only if the person shouting

230
00:17:08,760 --> 00:17:10,660
has sufficient credits

231
00:17:11,940 --> 00:17:16,060
To implement it, we’ve ended up with
this mind-bending boolean logic

232
00:17:16,060 --> 00:17:17,560
in the broadcast method

233
00:17:18,960 --> 00:17:20,640
It doesn’t have to be like this

234
00:17:21,160 --> 00:17:25,000
This complexity is a sign that
we haven’t modelled the problem well enough yet

235
00:17:26,280 --> 00:17:30,440
Recall that right at the end of lesson 7
we discovered a

236
00:17:30,440 --> 00:17:35,780
known unknown in our problem domain
and documented it with this question:

237
00:17:35,780 --> 00:17:38,560
what happens when you run out of credits?

238
00:17:40,020 --> 00:17:43,140
We know you can’t send a long message when
you run out of credits

239
00:17:43,140 --> 00:17:45,720
but what about a message
containing the word ‘buy’?

240
00:17:46,760 --> 00:17:52,140
Perhaps having a complete answer to this question
will help us to resolve this complexity

241
00:17:53,360 --> 00:17:55,000
Let’s check with our product owner

242
00:17:57,000 --> 00:18:01,100
We use a scenario to frame the discussion
with Paula, our product owner

243
00:18:02,620 --> 00:18:05,700
Given Lucy and Sean are
within range of each other -

244
00:18:05,700 --> 00:18:08,600
that’s what these background steps do -

245
00:18:08,600 --> 00:18:10,660
and Sean has bought 4 credits...

246
00:18:11,840 --> 00:18:16,120
when Sean shouts a message
containing the word “buy” then…

247
00:18:16,920 --> 00:18:17,980
then what?

248
00:18:19,180 --> 00:18:23,620
Sean doesn’t have enough credits
so presumably Lucy does not hear his message

249
00:18:23,620 --> 00:18:24,900
is that right?

250
00:18:26,175 --> 00:18:27,967
Right, says Paula

251
00:18:29,247 --> 00:18:34,111
And so in that case, Sean should
still have his four credits, correct?

252
00:18:34,879 --> 00:18:36,671
Right again, says Paula

253
00:18:38,460 --> 00:18:40,240
OK, thanks Paula

254
00:18:40,240 --> 00:18:43,860
So the rule is that we’ll only
send shouts that you can afford

255
00:18:43,860 --> 00:18:44,900
Is that right?

256
00:18:46,940 --> 00:18:48,740
Correct! says Paula.

257
00:18:48,740 --> 00:18:52,800
A person can’t send a premium shout
unless they have enough credits to pay for it

258
00:18:54,840 --> 00:18:58,280
Now we understand the business rule
let’s automate this scenario

259
00:18:58,280 --> 00:18:59,960
and drive out the behaviour

260
00:19:01,600 --> 00:19:07,640
First we need to match this new step
where we check Lucy does not hear Sean’s message

261
00:19:08,420 --> 00:19:11,240
We have a very similar one here for Larry

262
00:19:11,920 --> 00:19:15,580
We can use a capture group to make it more generic

263
00:19:16,360 --> 00:19:18,500
Instead of a wildcard though

264
00:19:18,500 --> 00:19:23,220
we can use pipes to specify
the alternative values we expect here

265
00:19:25,060 --> 00:19:27,160
We capture the listener name

266
00:19:27,160 --> 00:19:30,940
then use that here
when fetching the instance of Person

267
00:19:32,740 --> 00:19:39,000
Right, now we have a failing acceptance test
which should be passing once we’ve resolved this

268
00:19:39,000 --> 00:19:41,960
Let’s have a think about where
this behaviour should go

269
00:19:43,480 --> 00:19:48,360
If we give the responsibility for checking
affordability to the Person doing the shouting

270
00:19:48,360 --> 00:19:51,500
then Network doesn’t need to
care about credits at all

271
00:19:51,500 --> 00:19:53,460
which will simplify things nicely

272
00:19:55,740 --> 00:19:58,340
Let’s start with a new unit test for Person then

273
00:20:01,980 --> 00:20:04,580
We’ll set up Sean with only one credit

274
00:20:04,580 --> 00:20:07,500
not enough to afford to send a long message -

275
00:20:07,500 --> 00:20:11,140
and assert that the broadcast method
is not called on Network

276
00:20:11,903 --> 00:20:14,463
Then we try to shout the long message

277
00:20:17,800 --> 00:20:22,020
This fails of course, because at the moment
Person doesn’t make this check

278
00:20:22,020 --> 00:20:24,700
so the broadcast method is called every time

279
00:20:25,740 --> 00:20:28,100
We’re at Red in the TDD cycle

280
00:20:28,600 --> 00:20:30,580
Next stop: green!

281
00:20:31,840 --> 00:20:36,020
To make this pass we need to know
how much the shout is going to cost

282
00:20:36,020 --> 00:20:37,760
before we send it

283
00:20:38,580 --> 00:20:42,300
That knowledge is currently
in the deduct_credits method

284
00:20:42,300 --> 00:20:45,540
which actually does
two tasks at the same time:

285
00:20:45,540 --> 00:20:51,080
it works out the cost of the message, and
it deducts that cost from the person’s balance

286
00:20:53,100 --> 00:20:58,160
Let’s tease those two tasks apart
first calculating the cost of the shout

287
00:20:58,160 --> 00:21:01,320
then deducting that cost from the credits

288
00:21:03,240 --> 00:21:07,200
Now we can extract a method that calculates
the cost of the message

289
00:21:08,660 --> 00:21:13,600
Then finally we can use that method
to check whether the message is affordable

290
00:21:21,536 --> 00:21:23,840
and our unit test is passing

291
00:21:24,600 --> 00:21:25,620
Great!

292
00:21:27,620 --> 00:21:32,540
And I suppose our acceptance test for
the affordability rule should be passing now too

293
00:21:33,500 --> 00:21:34,800
It is!

294
00:21:34,800 --> 00:21:38,140
We’re green, so it’s refactoring time again!

295
00:21:38,680 --> 00:21:45,120
Now we can give that messy old test in
Network’s unit tests the treatment it deserves

296
00:21:45,120 --> 00:21:47,540
because this behaviour is now on Person

297
00:21:48,160 --> 00:21:51,260
We won’t be needing this pending test

298
00:21:51,260 --> 00:21:53,800
and we don’t need to stub credits here anymore

299
00:21:56,160 --> 00:21:59,680
Deleting code is my favourite
kind of refactoring!

300
00:22:00,380 --> 00:22:05,820
Let’s keep going and strip back all that
crazy boolean logic in Network#broadcast

301
00:22:06,592 --> 00:22:10,736
I think we can just remove this whole clause
about the message being too short

302
00:22:10,736 --> 00:22:12,736
or having enough credits or whatever

303
00:22:13,000 --> 00:22:15,560
Let’s try it and see what the tests tell us

304
00:22:17,220 --> 00:22:19,620
Excellent, much better!

305
00:22:20,380 --> 00:22:23,240
Now, can we do any refactoring in Network?

306
00:22:24,260 --> 00:22:27,880
Well this method would read a lot better if
we extract a method that returns only

307
00:22:27,880 --> 00:22:29,900
the listeners within range of the shouter

308
00:22:30,500 --> 00:22:31,260
Let’s do that

309
00:22:41,720 --> 00:22:45,180
We don’t need to use this shouter_location
temporary variable either

310
00:22:45,180 --> 00:22:46,660
Let’s just inline it

311
00:22:47,680 --> 00:22:52,400
OK. The code is nice and clean
and all our tests are passing...

312
00:22:53,140 --> 00:22:54,860
except for one:

313
00:22:54,860 --> 00:22:56,000
that bug!

314
00:22:56,512 --> 00:23:00,864
It can’t escape us any longer.
Let's trap it with a unit test

315
00:23:01,640 --> 00:23:06,320
We know the responsibility for charging
for shouts lies in Person

316
00:23:06,780 --> 00:23:08,940
so that’s where to add the unit test

317
00:23:22,920 --> 00:23:25,440
Have you already spotted
where we need to make the change?

318
00:23:26,460 --> 00:23:29,560
Here, in the cost_of method

319
00:23:29,560 --> 00:23:34,660
the code will add five credits to the cost
each time it finds the word “buy” in the message

320
00:23:35,240 --> 00:23:39,520
If we change the code like this
it should be working as expected

321
00:23:47,320 --> 00:23:48,660
It is!

322
00:23:48,660 --> 00:23:49,760
Great stuff

323
00:23:50,420 --> 00:23:53,840
Although we’ve called this
video series Cucumber School

324
00:23:53,840 --> 00:23:55,980
you’ve probably noticed by now
that we’re teaching you

325
00:23:55,980 --> 00:24:02,040
a whole range of skills and ideas that
we on the Cucumber team use to develop software

326
00:24:03,080 --> 00:24:06,560
Not just skills with Cucumber
but skills with the whole of

327
00:24:06,560 --> 00:24:08,440
Behaviour-Driven Development

328
00:24:09,900 --> 00:24:14,580
BDD blurs the lines between traditional roles
like tester and developer

329
00:24:15,160 --> 00:24:19,620
In our ideal world
everyone on the team - not just testers -

330
00:24:19,620 --> 00:24:24,840
is responsible for quality, and we all
try to test it as much as possible

331
00:24:26,100 --> 00:24:29,560
Having good automated tests
frees up testers to do more

332
00:24:29,560 --> 00:24:33,020
interesting, interactive, exploratory testing

333
00:24:35,060 --> 00:24:39,500
We use our tests as a guide to help us
design a solution that models the problem well

334
00:24:40,260 --> 00:24:45,940
A better model in your solution can
make a whole category of bugs go away forever

335
00:24:47,000 --> 00:24:48,760
We saw that in this lesson

336
00:24:48,760 --> 00:24:53,240
when we moved the responsibility
for charging for shouts from Network to Person

337
00:24:53,240 --> 00:24:59,380
and the issues around what happened when you run
out of credit suddenly became easy to resolve

338
00:25:00,920 --> 00:25:02,680
Getting the right balance between

339
00:25:02,680 --> 00:25:07,460
fine-grained unit tests and
broader full-stack tests

340
00:25:07,460 --> 00:25:12,240
is critically important to having fast
useful feedback from your test suite

341
00:25:12,980 --> 00:25:15,520
We’ll explore this more in the next lesson

342
00:25:17,060 --> 00:25:20,140
See you next time, on Cucumber School

343
00:25:20,880 --> 00:25:22,480
Captions created by Jayson Smith for Cucumber Ltd.
