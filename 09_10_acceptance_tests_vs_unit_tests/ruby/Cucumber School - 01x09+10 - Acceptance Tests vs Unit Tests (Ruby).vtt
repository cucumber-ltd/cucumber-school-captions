WEBVTT

1
00:00:14.592 --> 00:00:20.736
Last time on Cucumber School

we showed you how to use
example mapping to facilitate conversations

2
00:00:20.992 --> 00:00:25.344
between stakeholders before starting workon a new user story

3
00:00:25.600 --> 00:00:31.744
We finished the lesson on a technical note,
showing you how to extract

a layer of support code from your
step definitions

4
00:00:32.000 --> 00:00:36.352
to keep your Cucumber code easy -
and cost-effective - to maintain

5
00:00:37.376 --> 00:00:43.520
We’re going to keep things technical
in this lesson.

Remember that bug we spotted right back at
the beginning of lesson seven

6
00:00:43.776 --> 00:00:48.896
where the user was over-charged
if they mentioned “buy”

several times in the same message?

7
00:00:49.152 --> 00:00:52.480
It's time to finally knuckle down and fix it

8
00:00:53.248 --> 00:00:59.392
As we do so, you’re going to get
some more experience

9
00:00:59.648 --> 00:01:00.672
of the inner and outer TDD loops that
we first introduced you to in lesson five

10
00:01:00.928 --> 00:01:06.816
We’ll learn about mock objects,
and explore the difference between

unit tests and acceptance tests

11
00:01:07.072 --> 00:01:08.864
and learn the value of each

12
00:01:09.632 --> 00:01:13.984
If you’re someone who doesn’t normally
dive deep into code, try not to worry

13
00:01:14.496 --> 00:01:20.640
We’ll keep the example from moving too fast,
and we hope you’ll find it educational to see

how different kinds of tests
complement each other in helping you

14
00:01:20.896 --> 00:01:25.248
to build a quality product

15
00:01:26.528 --> 00:01:31.392
Let’s work outside-in and start by
tidying up the Gherkin specification

16
00:01:31.904 --> 00:01:37.024
Right now, the scenario is still in the raw form
it was in when the bug was first reported

17
00:01:37.536 --> 00:01:40.864
with a name that references an ID
in our bug tracking system

18
00:01:41.888 --> 00:01:45.984
This doesn’t make for very good documentation
about the intended behaviour

19
00:01:47.264 --> 00:01:51.872
Using our Friends Episode naming convention
that we introduced in lesson 7

20
00:01:52.384 --> 00:01:55.712
we can come up with a more expressive name
for this scenario

21
00:01:56.480 --> 00:01:57.504
How about:

22
00:01:58.016 --> 00:02:02.880
the one where Sean mentions “buy”
several times in the same shout?

23
00:02:04.672 --> 00:02:07.232
You might be worried about losing this bug ID

24
00:02:07.744 --> 00:02:09.024
We could keep it in

25
00:02:09.536 --> 00:02:15.680
a comment, a tag, or in the description
of the Scenario if we wanted to

28
00:02:16.448 --> 00:02:20.288
If your team likes to keep track of such things,
feel free to do that

29
00:02:21.312 --> 00:02:23.616
We’d prefer to consign the bug to history -

30
00:02:23.872 --> 00:02:27.200
what matters to us
is how the software behaves today, 

31
00:02:27.456 --> 00:02:29.504
not how it got to be that way

32
00:02:31.552 --> 00:02:35.648
We think the values in the example could be
changed to make it a little more expressive

33
00:02:36.160 --> 00:02:42.304
If we start Sean off with 100 credits,
and end him with 95

34
00:02:42.560 --> 00:02:46.400
it more clearly illustrates the rule that
only five credits should be deducted

35
00:02:48.704 --> 00:02:54.848
Talking of which

36
00:02:55.104 --> 00:02:55.616
let’s also update the rule to make it explicit
that you lose 5 credits per shout

37
00:02:57.408 --> 00:02:58.432
Good

38
00:02:59.200 --> 00:03:04.832
Now let’s run our improved scenario,
using the @todo tag, and go hunting for that bug

39
00:03:06.880 --> 00:03:09.952
OK, well we can see our scenario failing

40
00:03:10.464 --> 00:03:12.512
but where do we need to go to fix it?

41
00:03:14.048 --> 00:03:20.192
Luckily, our system is pretty small,
and we remember that all the

42
00:03:20.448 --> 00:03:23.264
premium account behaviour is implemented in
the Network class, so let’s go and look there

43
00:03:24.800 --> 00:03:32.224
Well, that broadcast method is pretty complex,
but I suppose the bug must be in there somewhere

45
00:03:32.480 --> 00:03:34.784
Let’s try to pin it down with a unit test

46
00:03:36.576 --> 00:03:38.880
Oh dear, oh dear:

47
00:03:39.392 --> 00:03:44.768
This file does not contain any tests for
the premium account behaviour!

48
00:03:45.024 --> 00:03:51.168
It looks like when that so-called
hot-shot ninja rockstar subcontractor, Stevie

49
00:03:51.424 --> 00:03:57.568
hacked in the first version of premium accounts,
he drove everything from that

50
00:03:58.592 --> 00:04:00.896
one great big Cucumber scenario,
and never wrote any unit tests

51
00:04:01.664 --> 00:04:03.200
Why is this a problem?

52
00:04:04.480 --> 00:04:09.600
Well, think about each automated test you write
as warning light that you’re fitting to your system

53
00:04:10.112 --> 00:04:13.952
Acceptance tests are warning lights
that make sense to business people:

54
00:04:14.464 --> 00:04:16.000
when they fail,

54
00:04:16.000 --> 00:04:20.607
they tell you what functionality a user
will not be able to enjoy because of the bug

55
00:04:21.887 --> 00:04:27.775
What a unit test does is give the programmers
an indication about why the bug has occurred

56
00:04:28.543 --> 00:04:32.895
Ideally, whenever you see an acceptance test’s
warning light flash

57
00:04:33.151 --> 00:04:39.295
there should be at least one corresponding
unit test flashing too,

pointing the developers to
the source of the problem

58
00:04:40.831 --> 00:04:46.207
If you don’t have any unit tests,
you’re left guessing where the problem lies

59
00:04:46.719 --> 00:04:50.815
In a big system,
this can be a serious waste of time

61
00:04:51.839 --> 00:04:57.215
So the responsible thing to do at this point is to
retrofit some unit tests for the Network class

62
00:04:57.983 --> 00:05:03.615
We’ll start with its existing behaviour,
then go on to test-drive the

behaviour we need to fix our bug

63
00:05:04.639 --> 00:05:10.783
Let’s write a test case for deducting five credits
when the word “buy” is mentioned once

64
00:05:12.831 --> 00:05:18.975
All our existing tests use a
test double or mock object

65
00:05:19.231 --> 00:05:19.999
to represent the instance of Person
that the Network collaborates with

66
00:05:20.767 --> 00:05:23.071
So let’s go with that and try to do the same here

67
00:05:24.351 --> 00:05:27.679
First we need a mock object to represent Sean

68
00:05:29.727 --> 00:05:33.055
And we’ll need to broadcast a
message containing the word “buy”

69
00:05:35.103 --> 00:05:36.127
What next?

70
00:05:37.919 --> 00:05:42.015
Well we need to assert that Sean is told
to reduce his credits

71
00:05:43.551 --> 00:05:49.695
In the deductCredits method here,
we’re calling the credits setter

setting it to five less than the current value

72
00:05:49.951 --> 00:05:56.095
So we need to stub the attribute getter with
say 100 credits, and then check

73
00:05:56.351 --> 00:05:57.375
that the setter is called with 95

74
00:05:57.887 --> 00:05:59.423
Here's how we do that

75
00:06:02.751 --> 00:06:08.383
This test is a real pain to write,
and we’re still not done! 

Now it’s failing with this error

76
00:06:12.223 --> 00:06:17.343
Following the stack trace
it looks like the problem

is that our list of listeners
hasn’t been initialised

77
00:06:17.855 --> 00:06:22.975
The Network class has been built with the
assumption that there’s always going to be

at least one listener subscribed

78
00:06:23.743 --> 00:06:29.887
So even though it’s not relevant to our test

we’ll need to create a Lucy
and subscribe her to the Network

79
00:06:30.655 --> 00:06:36.031
She’ll also need to be ready to receive a call
to hear when the message is broadcast

80
00:06:37.311 --> 00:06:40.127
Phew. Our test is passing at last

81
00:06:40.639 --> 00:06:44.991
That was hard work, and what we’ve produced
is just awful

82
00:06:45.759 --> 00:06:51.903
This ugly test is typical of what happens
when you use mock objects or test doubles

83
00:06:52.159 --> 00:06:54.719
to retro-fit tests to existing code

84
00:06:55.743 --> 00:07:01.119
So why use mocks?

Mock objects are a design tool

85
00:07:01.631 --> 00:07:04.959
They’re intended to be used when
constructing new code

86
00:07:05.471 --> 00:07:09.823
to throw together a lightweight sketch
of a collaborating object

87
00:07:10.591 --> 00:07:12.895
When you’re focused on building a Network

88
00:07:13.151 --> 00:07:15.967
and you think it needs to
collaborate with a Person

89
00:07:16.479 --> 00:07:20.575
it would slow you down to have to stop
and go off to build the actual Person class

90
00:07:21.087 --> 00:07:26.719
It’s often quicker to use a mock object to
hash out your idea of roughly

what Person might look like

91
00:07:26.975 --> 00:07:30.303
leaving you to stay focussed on the task at hand

92
00:07:31.071 --> 00:07:35.679
As you do this, you’ll find yourself -
as we just did

94
00:07:35.935 --> 00:07:40.543
having to specify how you want
the two objects to interact

95
00:07:41.311 --> 00:07:47.455
If you think about it, this interaction -
the way they talk to each other at runtime -

96
00:07:47.711 --> 00:07:50.783
is the true behaviour of these objects

97
00:07:51.807 --> 00:07:57.951
Remember back in lesson 5, Loops,
where we explained that acceptance tests

98
00:07:58.207 --> 00:08:04.351
help you build the right thing,
and unit tests help you build the thing right?

100
00:08:05.119 --> 00:08:11.263
In other words, acceptance tests help us to
explore the problem domain,

101
00:08:11.519 --> 00:08:13.311
and unit tests help us to explore the solution

102
00:08:14.591 --> 00:08:20.479
When you drive your development from tests,
the unit tests can give you feedback

about the design of your solution

103
00:08:20.991 --> 00:08:27.135
If it’s easy to take an individual object and
plug it into your tests

your design is likely to be nicely modular

104
00:08:27.391 --> 00:08:30.463
which means it will be easier
to change in the future

105
00:08:30.975 --> 00:08:36.351
If it's awkward that's a signal there's a problem with your design

106
00:08:36.863 --> 00:08:40.959
We call this listening to the test

107
00:08:43.263 --> 00:08:49.407
What alternative to using marks will be to use a real instance of person instead of the Macaw check

108
00:08:50.943 --> 00:08:53.503
This has a couple of apparent advantages

109
00:08:53.759 --> 00:08:59.903
First person automatically subscribe to the network as it is constructed so we wouldn't need this clutter

110
00:09:00.159 --> 00:09:00.927
About Lucy

111
00:09:02.207 --> 00:09:06.815
Also because we're testing person the network is one integrated lump

112
00:09:07.071 --> 00:09:11.423
We don't have to fuss about exactly how they communicate about showings credits

113
00:09:11.679 --> 00:09:15.775
All we have to do is check how many credits he has left over at the end

114
00:09:17.567 --> 00:09:21.663
This seductive solution papers over the cracks in our design

115
00:09:22.431 --> 00:09:28.575
When you use mocs you put the microscope on the interaction between an object and his collaborators this gives you

116
00:09:28.831 --> 00:09:31.647
Feedback about how couple these objects are

117
00:09:32.415 --> 00:09:37.791
A lot of chatter going back and forth like this suggest that getting tangled up together

118
00:09:38.559 --> 00:09:44.703
So the fact that it's okay to use Mach series not because Mark so bad because we about it using marks

119
00:09:45.727 --> 00:09:48.287
It's feedback from the code

120
00:09:49.311 --> 00:09:53.151
Let's listen to the test I tried to respond to this pain

121
00:09:53.407 --> 00:09:55.199
Instead of ignoring it

122
00:09:56.479 --> 00:10:02.623
We'll start with something easy until with the situation weather network is after broadcast but it has no listening

123
00:10:03.391 --> 00:10:09.535
This is an annoying detail about how this object behaves I didn't show itself in our acceptance test

124
00:10:10.047 --> 00:10:11.839
Best driver fix

125
00:10:17.983 --> 00:10:19.007
To fix it

126
00:10:19.263 --> 00:10:25.407
All we need to do is initialize a collection of lessons in the Constructor which makes more sense anyway

127
00:10:28.479 --> 00:10:29.503
Easy

128
00:10:30.015 --> 00:10:33.599
I'm at that fixed we can simplify the test we just wrote

129
00:10:37.439 --> 00:10:39.231
Let's text talk a little bit

130
00:10:39.487 --> 00:10:45.631
We're trying to fix that bug about multiple mentions of the word by the first wear retro

131
00:10:45.887 --> 00:10:49.727
15 unit test for the premium account behavior in the network class

132
00:10:50.495 --> 00:10:56.639
It will be easier to see what Tessa missing if we reorganize the unit test find that works respond

133
00:10:56.895 --> 00:10:58.175
Sensibilities

134
00:10:59.455 --> 00:11:01.759
It basically fall into two categories

135
00:11:03.039 --> 00:11:08.159
These ones here to do with the responsibility of broadcasting to listeners

136
00:11:08.415 --> 00:11:12.511
So that screwed them up using auspex describe method

137
00:11:22.751 --> 00:11:26.847
Now we have a new test which is about charging for shouts

138
00:11:30.431 --> 00:11:32.479
This last one here is a bit weird

139
00:11:32.991 --> 00:11:35.807
It's sort of about broadcasting to listeners

140
00:11:36.063 --> 00:11:39.391
Potassium salt hacking it which needs further investigation

141
00:11:40.415 --> 00:11:46.559
This test is quite school and seems to be attempting to cover several aspects of networks behavior all at once

142
00:11:47.839 --> 00:11:53.727
Best of human those individual behaviors is new test when we can come back to deal with this one later

143
00:11:56.031 --> 00:12:02.175
We can see we'll need something under the responsibility of broadcasting to listeners to ensure a long messages

144
00:12:02.431 --> 00:12:04.479
Contour Chesapeake with no credits

145
00:12:04.991 --> 00:12:08.319
Chicken Express. Using a pending R-Spec example

146
00:12:09.343 --> 00:12:11.135
We can fill this out later

147
00:12:12.927 --> 00:12:17.791
It's Clay will also need to test that we charge 2 credits for Nova long message

148
00:12:18.559 --> 00:12:20.863
Let's have another pending example for that

149
00:12:22.655 --> 00:12:27.007
Once those two tests implemented we won't need to subscribe on anymore

150
00:12:27.519 --> 00:12:33.663
Not confident enough to just remove it until we've seen those test flushed out so we can mark it as

151
00:12:33.919 --> 00:12:34.687
Pending

152
00:12:34.943 --> 00:12:35.967
Now

153
00:12:36.735 --> 00:12:40.319
That will remind us we need to come back and clean this up soon

154
00:12:42.111 --> 00:12:47.743
At this point it is becoming clear that network has too many responsibilities

155
00:12:48.767 --> 00:12:51.839
We have two different sources of feedback telling us this

156
00:12:53.375 --> 00:12:56.191
With a unit test laid out by responsibility

157
00:12:56.447 --> 00:13:02.591
We can see more clearly that while broadcasting to listeners as a responsibility to fit

158
00:13:03.103 --> 00:13:08.223
There's no real reason why the network needs to be responsible for charging for shouts

159
00:13:10.527 --> 00:13:11.551
Secondly

160
00:13:11.807 --> 00:13:17.951
The communication protocol between networking person exposed by the Mox

161
00:13:18.207 --> 00:13:18.719
Noisy

162
00:13:19.231 --> 00:13:25.375
But making lots of method calls to person in order to determine whether they can afford the shoutin to the doctor

163
00:13:25.631 --> 00:13:31.775
Payment first Sean Combs network broadcast

164
00:13:32.031 --> 00:13:38.175
Ask Sean how many credits he has 10 Network tell Sean the new

165
00:13:38.431 --> 00:13:44.575
Value of his credits with a fee for the message deducted then Network

166
00:13:44.831 --> 00:13:49.951
Sean how many credits he has again to send a message

167
00:13:51.231 --> 00:13:57.375
We could get all sad and angry that if only we test-drove in this code in the first place

168
00:13:57.631 --> 00:13:58.655
Asuna

169
00:13:58.911 --> 00:14:00.447
But that would be futile

170
00:14:00.703 --> 00:14:03.007
It's not too late to clean his coat up

171
00:14:03.775 --> 00:14:09.151
How about we make sure responsible for organizing his own payment

172
00:14:10.431 --> 00:14:14.527
Instead of rewriting this code let's see if we can refactor it

173
00:14:15.295 --> 00:14:19.903
When refactoring it's crucial Not To Break existing functionality

174
00:14:20.159 --> 00:14:24.255
So rely on our tests to walnuts if we make a mistake

175
00:14:26.303 --> 00:14:28.095
The wiccan small steps

176
00:14:28.607 --> 00:14:34.751
We may temporarily break some unit tests at the implementation shift but the acceptance test

177
00:14:35.007 --> 00:14:37.055
Should be passing all the way through

178
00:14:37.311 --> 00:14:39.359
If everything goes according to plan

179
00:14:40.895 --> 00:14:41.919
Ready

180
00:14:43.455 --> 00:14:47.807
Will stop by moving the deduct credits method on two person

181
00:14:48.575 --> 00:14:54.719
As a baby step will make it public so we can just continue to call it from networks broadcast message

182
00:14:54.975 --> 00:14:55.487
For now

183
00:14:56.255 --> 00:14:58.559
That should keep the acceptance Test passing

184
00:14:59.583 --> 00:15:00.351
Good

185
00:15:01.631 --> 00:15:07.007
Now let's make sure I'm responsible for deducting his own credit as he shouts

186
00:15:12.895 --> 00:15:19.039
We can move over this whole responsibility of charging for shouts from the network specs to the puss

187
00:15:19.295 --> 00:15:20.063
Specs

188
00:15:20.831 --> 00:15:23.135
Will need to adjust a test like this

189
00:15:32.863 --> 00:15:34.399
I'm with dr. Greene

190
00:15:36.191 --> 00:15:37.727
Let's be Factor symbol

191
00:15:38.239 --> 00:15:44.383
Because all this code is running within the shelter object now we don't need to pass around this instance of person anymore

192
00:15:44.639 --> 00:15:47.711
Can access the credits instance variable hit directly

193
00:15:49.247 --> 00:15:51.807
We can make deduct credits private now

194
00:15:53.599 --> 00:15:56.415
We don't need to pass short enough around is a variable

195
00:15:58.719 --> 00:16:01.023
We can just do the logic in line here

196
00:16:04.607 --> 00:16:05.375
Great

197
00:16:05.631 --> 00:16:08.703
Now the coding network broadcasts much cleaner

198
00:16:09.215 --> 00:16:12.543
We still have these pending unit test we need to sort out

199
00:16:13.055 --> 00:16:18.431
Let's talk in person by flushing out this test about charging for long messages

200
00:16:27.391 --> 00:16:28.671
That's better

201
00:16:29.439 --> 00:16:33.023
Let's just make it fail quickly to check that we can trust it

202
00:16:37.887 --> 00:16:38.911
Okay

203
00:16:40.191 --> 00:16:43.775
Now we can tackle these two pending unit testing Network

204
00:16:44.287 --> 00:16:48.383
Let's step back for a 2nd considered the rule when implementing he

205
00:16:49.407 --> 00:16:55.039
This original test was simply there to ensure that long messages were not broadcast

206
00:16:55.807 --> 00:16:59.135
Remember we originally started out without Premium Accounts

207
00:17:00.159 --> 00:17:03.999
With the addition of Premium Accounts the rule has changed

208
00:17:04.511 --> 00:17:10.655
We will broadcast long messages but only if the person shouting has sufficient credits

209
00:17:11.935 --> 00:17:17.567
To implemented We've Ended up with this mind-bending Boolean logic and the broadcast method

210
00:17:18.847 --> 00:17:20.639
It doesn't have to be like this

211
00:17:21.151 --> 00:17:24.991
This complexity is a sign that we haven't model the problem well enough yet

212
00:17:26.271 --> 00:17:32.415
The cool that right at the end of lesson 7 we discovered a Known Unknown in a problem

213
00:17:32.671 --> 00:17:35.231
Domaine and documented it with this question

214
00:17:35.743 --> 00:17:38.559
What happens when you run out of credits

215
00:17:39.839 --> 00:17:45.727
We know you can't send a long message when you run out of credits but what about a message containing the word by

216
00:17:46.751 --> 00:17:52.127
Perhaps having a complete answer to this question will help us to resolve this complexity

217
00:17:53.151 --> 00:17:55.199
Let's check without product owner

218
00:17:56.991 --> 00:18:01.087
We use a scenario to frame the discussion with polar or product owner

219
00:18:02.623 --> 00:18:05.439
Given Lucy and Sean are within range of each other

220
00:18:05.695 --> 00:18:07.999
That's what these background steps do

221
00:18:08.511 --> 00:18:10.815
Insurance boat for credits

222
00:18:11.839 --> 00:18:14.911
When Sean shouts message containing bye

223
00:18:15.167 --> 00:18:16.191
224

225
00:18:16.959 --> 00:18:17.983
Then what

226
00:18:19.007 --> 00:18:23.359
Sean doesn't have enough credit so presumably Lucy does not hear his message

227
00:18:23.615 --> 00:18:24.895
Is that right

228
00:18:26.175 --> 00:18:27.967
Right cesspool

229
00:18:29.247 --> 00:18:34.111
So in that case showing should still have his full credits correct

230
00:18:34.879 --> 00:18:36.671
Right against is puller

231
00:18:38.463 --> 00:18:44.607
Okay thanks Paula so the rule is that will only send shouts that you can afford is that right

232
00:18:46.655 --> 00:18:52.799
Correct cipolla a person cops and the premium shout unless they have enough credits to pay for it

233
00:18:54.847 --> 00:18:59.967
Now we understand the business rule that Sotomayor this scenario and drive out the behavior

234
00:19:01.503 --> 00:19:07.647
First we need to match this nustep why we checked Lucy does not hear Shawn's message

235
00:19:08.415 --> 00:19:11.231
We have a very similar 1/2 a Larry

236
00:19:11.743 --> 00:19:15.583
We can use a capture group to make it more generic

237
00:19:16.351 --> 00:19:22.495
Instead of a wild-card though we can use pipes to specify the alternative values we

238
00:19:25.055 --> 00:19:26.847
We capture the listener name

239
00:19:27.103 --> 00:19:30.943
Then use that here when fetching the instance of person

240
00:19:32.735 --> 00:19:33.503
Right

241
00:19:33.759 --> 00:19:38.623
Now we have a failing acceptance test what should be passing once we resolve this

242
00:19:38.879 --> 00:19:41.951
Let's have a think about where this Behavior should go

243
00:19:43.487 --> 00:19:48.095
If we give responsibility for checking affordability to the person doing the shouting

244
00:19:48.351 --> 00:19:51.167
The network doesn't need to care about credits at all

245
00:19:51.423 --> 00:19:53.471
Which will simplify things nicely

246
00:19:55.519 --> 00:19:58.335
That start with a new unit test the person then

247
00:20:01.407 --> 00:20:04.223
We'll set up showing with only one credit

248
00:20:04.479 --> 00:20:07.039
Not enough to afford to send a long message

249
00:20:07.295 --> 00:20:11.135
Assert that the broadcast method is not called on network

250
00:20:11.903 --> 00:20:14.463
Then we try to shout along message

251
00:20:17.791 --> 00:20:23.935
This fails of course because of the moment person doesn't make this check so the broadcast method is cold every time

252
00:20:24.191 --> 00:20:24.703
Time

253
00:20:25.471 --> 00:20:28.287
We are red in the tdd cycle

254
00:20:28.543 --> 00:20:29.567
Next stop

255
00:20:29.823 --> 00:20:30.591
Green

256
00:20:31.615 --> 00:20:37.759
To make this past we need to know how much the shout is going to cost before we send it

257
00:20:38.527 --> 00:20:42.111
That knowledge is currently in the deduct credits method

258
00:20:42.367 --> 00:20:45.183
Which actually does to Tosca the same time

259
00:20:45.439 --> 00:20:51.071
It works out the cost of the message and it deducts that cost when the person's balance

260
00:20:52.863 --> 00:20:59.007
Let's tease those two tests apart first calculating the cost of the shout then

261
00:20:59.263 --> 00:21:01.311
Not cost from the credits

262
00:21:03.103 --> 00:21:07.199
No we can extract a method that calculates the cost of the message

263
00:21:08.479 --> 00:21:13.599
Then finally we can use that method to check whether the message is Affordable

264
00:21:21.536 --> 00:21:23.840
And I unit tests passing

265
00:21:24.608 --> 00:21:25.632
Great

266
00:21:27.424 --> 00:21:32.544
And I suppose our acceptance test for the affordability rule should be passing now too

267
00:21:33.312 --> 00:21:38.176
It is a green so it's refactoring time again

268
00:21:38.688 --> 00:21:44.576
Now we can give some SEL test and networks unit test the treatment it deserves

269
00:21:45.088 --> 00:21:47.648
Because this behavior is now in person

270
00:21:48.160 --> 00:21:50.464
We won't be needing this pending test

271
00:21:51.232 --> 00:21:53.792
And we don't need to still credits here anymore

272
00:21:55.840 --> 00:21:59.680
Deleting code is my favorite kind of refactoring

273
00:22:00.192 --> 00:22:05.824
Let's keep going on strip Buckle like crazy Boolean logic and network broadcast

274
00:22:06.592 --> 00:22:12.736
I think we can just remove this whole clothes about the message being too short while having enough credits or whatever

275
00:22:12.992 --> 00:22:15.552
Let's try it and see what the test tell us

276
00:22:17.088 --> 00:22:19.648
Excellent much better

277
00:22:20.416 --> 00:22:23.232
Now can we do any refactoring in network

278
00:22:24.256 --> 00:22:30.400
This method would read a lot better if extractor method that returns only the listings within the range of the shelter

279
00:22:30.656 --> 00:22:31.424
Let's do that

280
00:22:41.408 --> 00:22:46.784
We don't need to use the shuttle location Tempe variable either that's just in line it

281
00:22:47.552 --> 00:22:52.672
Okay the code is nice and clean and all I test the passing

282
00:22:52.928 --> 00:22:54.464
Except the one

283
00:22:54.720 --> 00:22:56.000
Thug

284
00:22:56.512 --> 00:23:00.864
I can't escape this any longer that's traffic with a unit test

285
00:23:01.632 --> 00:23:05.984
We know the responsibility for charging for shouts lies in person

286
00:23:06.240 --> 00:23:08.544
So that's where to add the unit test

287
00:23:22.368 --> 00:23:25.440
Have you already spotted why we need to make the change

288
00:23:26.208 --> 00:23:29.280
Here and the cost of method

289
00:23:29.536 --> 00:23:34.656
The code will at 5 credits the cost each time it finds the Woodbine the message

290
00:23:35.168 --> 00:23:37.216
If we change the code like this

291
00:23:37.728 --> 00:23:39.520
I should be working as expected

292
00:23:47.200 --> 00:23:49.760
It is great stuff

293
00:23:50.272 --> 00:23:53.600
Although we call this video series cucumber School

294
00:23:53.856 --> 00:24:00.000
You probably noticed by now that would teaching you a whole range of skills and ideas that we own the Cucumber

295
00:24:00.256 --> 00:24:02.048
The team use to develop software

296
00:24:03.072 --> 00:24:04.864
Not just skills with cucumber

297
00:24:05.120 --> 00:24:08.704
Best kills with a whole of behavior driven development

298
00:24:09.728 --> 00:24:14.592
BTD blurs the lines between traditional roles like tester and developer

299
00:24:14.848 --> 00:24:20.992
And all right deal well everyone on the team not just tested is responsible for quality

300
00:24:21.248 --> 00:24:24.832
How many oil try to test it as much as possible

301
00:24:25.856 --> 00:24:32.000
Having good automated-tests freeze-up test is to be more interesting interactive Explorer

302
00:24:32.256 --> 00:24:33.024
Battery testing

303
00:24:34.816 --> 00:24:39.680
We use a test as a guide to help us design a solution that models the problem well

304
00:24:40.192 --> 00:24:46.080
A better model in your solution can make a whole category of bugs go away forever

305
00:24:46.848 --> 00:24:52.992
We saw that in this lesson for me move the responsibility for charging for shouts from Network to person

306
00:24:53.248 --> 00:24:59.392
On the issues around what happened when you run out of credits suddenly became easy to resolve

307
00:25:00.928 --> 00:25:07.072
Getting the right balance between fine-grained unit tests i'm broader. Tests

308
00:25:07.328 --> 00:25:12.192
Is critically important to having fast useful feedback from your test Suite

309
00:25:12.704 --> 00:25:15.520
Will explode is more in the next lesson

310
00:25:17.056 --> 00:25:18.336
See you next time

311
00:25:18.848 --> 00:25:20.128
Oncue. School
