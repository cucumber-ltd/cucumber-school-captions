1
00:00:15,620 --> 00:00:18,700
Welcome back to the 3rd lesson of Cucumber School

2
00:00:19,460 --> 00:00:21,080
I hope you're having fun!

3
00:00:22,280 --> 00:00:27,320
Last time we showed you the
fundamental components

4
00:00:27,320 --> 00:00:30,460
and how we use them to drive out a solution

5
00:00:30,460 --> 00:00:31,740
test first

6
00:00:33,180 --> 00:00:41,720
First we specified the behaviour we wanted
using a Gherkin scenario in a feature file

7
00:00:42,760 --> 00:00:48,680
Then we wrote step definitions to translate
the plain English from our scenario

8
00:00:48,680 --> 00:00:50,940
into concrete actions in code

9
00:00:52,480 --> 00:00:58,520
The step definitions then exercised our
very basic domain model

10
00:00:58,520 --> 00:01:00,160
for the Shouty application

11
00:01:01,860 --> 00:01:05,740
We tend to think of the code that
actually pokes around with the system

12
00:01:05,740 --> 00:01:09,340
as distinct from the step definitions

13
00:01:09,340 --> 00:01:12,960
so we’ve drawn an extra box labelled
“automation code”

14
00:01:16,040 --> 00:01:20,280
Automation code can do
almost anything to your application:

15
00:01:20,280 --> 00:01:26,340
it can drive a web browser around your site
make HTTP requests to a REST API

16
00:01:26,340 --> 00:01:31,120
or -- as you’ve already seen --
drive a domain model directly

17
00:01:32,160 --> 00:01:35,744
Automation code is a big topic
that we’ll come back to

18
00:01:36,512 --> 00:01:40,096
First we want to concentrate on step definitions

19
00:01:40,860 --> 00:01:46,740
Good step definitions are important because
they enable the readability of your scenarios

20
00:01:47,640 --> 00:01:51,980
The better you are at matching
plain language phrases from Gherkin

21
00:01:51,980 --> 00:01:56,240
the more expressive you can be
when writing scenarios

22
00:01:56,740 --> 00:02:02,220
Teams who do this well refer to their
features as living documentation -

23
00:02:02,220 --> 00:02:05,960
a specification document that
never goes out of date

24
00:02:06,460 --> 00:02:12,720
In Cucumber we use regular expressions to match
plain language phrases from Gherkin steps

25
00:02:14,400 --> 00:02:18,900
Regular expressions have quite an
intimidating reputation

26
00:02:18,900 --> 00:02:22,780
In fact, there are only
a handful of patterns you need

27
00:02:22,780 --> 00:02:25,680
to be able to do almost anything
with regular expressions

28
00:02:25,680 --> 00:02:28,200
No need to be scared

29
00:02:28,200 --> 00:02:31,120
We’ll cover all of those patterns
in this lesson

30
00:02:31,120 --> 00:02:34,120
Let’s look at the Shouty scenario
from the last lesson

31
00:02:35,140 --> 00:02:38,160
As Cucumber starts to execute this feature,

32
00:02:38,160 --> 00:02:44,760
it will come to the first step of the scenario
'Given Lucy is 15 metres from Sean'

33
00:02:44,760 --> 00:02:50,780
and say to itself 'now - do I have any
step definitions that match the phrase:

34
00:02:50,780 --> 00:02:53,580
Lucy is 15 metres from Sean?'

35
00:02:55,616 --> 00:03:00,736
The most simple regular expression that
would match that step is this one

36
00:03:02,520 --> 00:03:04,140
That’s pretty simple isn’t it?

37
00:03:05,080 --> 00:03:07,880
Regular expressions are just patterns

38
00:03:07,880 --> 00:03:12,000
and the most simple pattern
you can use is a perfect match

39
00:03:14,048 --> 00:03:19,168
In Ruby, we can use this pattern
to make a step definition like this

40
00:03:21,480 --> 00:03:25,320
We use forward-slashes to denote
the regular expression

41
00:03:26,540 --> 00:03:27,820
Notice that

42
00:03:27,820 --> 00:03:32,400
unlike the snippet generated by Cucumber 
that we used in the previous lesson

43
00:03:32,400 --> 00:03:35,300
this step definition doesn’t take an argument

44
00:03:36,740 --> 00:03:39,700
To capture interesting values
from our step definitions

45
00:03:39,700 --> 00:03:42,460
we can use what’s called a capture group

46
00:03:43,488 --> 00:03:48,352
You just surround the interesting part
of the pattern with parentheses, like this

47
00:03:49,888 --> 00:03:52,704
Now we’re capturing that value as an argument

48
00:03:53,728 --> 00:03:58,080
The value 15 will be passed
to our code automatically by Cucumber

49
00:04:00,640 --> 00:04:03,440
That’s not much better yet though -

50
00:04:03,440 --> 00:04:08,580
this step definition will only match
if the step specifies a distance of 15 metres

51
00:04:09,340 --> 00:04:12,640
If we want to set Lucy and Sean
a different distance apart

52
00:04:12,640 --> 00:04:14,200
this pattern won’t match

53
00:04:14,980 --> 00:04:16,580
Let's try it and see

54
00:04:18,560 --> 00:04:22,220
Yep, it’s showing this step as undefined.

55
00:04:23,480 --> 00:04:24,780
So that’s not much use

56
00:04:25,560 --> 00:04:29,660
We need to make our regular expression
a little bit more flexible

57
00:04:30,340 --> 00:04:33,420
We can do this using a wildcard

58
00:04:35,455 --> 00:04:40,063
There are a few different ways to specify
a wildcard in a regular expression

59
00:04:41,080 --> 00:04:43,960
One of the simplest is alternation

60
00:04:43,960 --> 00:04:49,300
where we express different options
separated by a pipe character (|), like this

61
00:04:51,920 --> 00:04:54,760
Now we could use either of those
values in the step

62
00:04:54,760 --> 00:04:59,260
and this definition will still match
and pass the value into our code

63
00:05:00,280 --> 00:05:04,560
Alternation is useful when
you have a fixed set of values

64
00:05:04,560 --> 00:05:07,700
but normally you’ll want something a bit looser

65
00:05:10,020 --> 00:05:13,420
The dot (.) is a metacharacter

66
00:05:13,420 --> 00:05:16,660
which means it has magical powers
in a regular expression

67
00:05:17,440 --> 00:05:22,680
It means match any single character

68
00:05:22,680 --> 00:05:25,640
so we could change our step definition
to this instead

69
00:05:27,679 --> 00:05:31,519
Now we’ll match a step with
any two-digit distance

70
00:05:32,280 --> 00:05:35,220
That’s an improvement
but we can still do better

71
00:05:36,160 --> 00:05:40,640
Remember the dot will match
any character at all

72
00:05:40,640 --> 00:05:43,300
so it would also match letters
as well as numbers

73
00:05:44,060 --> 00:05:46,360
We’ll come back to this problem in a minute

74
00:05:46,360 --> 00:05:50,520
More pressing is that we are limited
to using two-digit distances

75
00:05:51,240 --> 00:05:55,840
What if we wanted to place them
2 metres apart, or 100?

76
00:05:57,375 --> 00:06:01,983
To fix that, we need to use a modifier

77
00:06:06,080 --> 00:06:11,920
In regular expressions, a repetition modifier
comes after a character

78
00:06:11,920 --> 00:06:14,780
and tells us how many times
that character can appear

79
00:06:15,640 --> 00:06:18,200
The most flexible modifier is the star (*)

80
00:06:19,140 --> 00:06:20,680
We could use it like this

81
00:06:22,460 --> 00:06:26,620
The star means any number of times

82
00:06:26,620 --> 00:06:32,200
so dot-star (.*) means any character
any number of times

83
00:06:32,959 --> 00:06:34,751
That’s pretty flexible!

84
00:06:35,520 --> 00:06:39,320
Actually, maybe a bit too flexible

85
00:06:39,880 --> 00:06:44,520
Remember the dot will match any character
including letters

86
00:06:44,520 --> 00:06:48,840
Combined with the star
we could end up matching a step like this:

87
00:06:51,135 --> 00:06:58,303
Our capture would gobble up everything
up until the words metres from Sean

88
00:06:59,840 --> 00:07:02,660
Look what our distance argument ends up as!

89
00:07:04,360 --> 00:07:06,240
We need to be more specific

90
00:07:07,007 --> 00:07:11,359
Luckily, the dot isn’t the only
special character we can use

91
00:07:14,175 --> 00:07:18,527
Regular expressions allow you
to define character classes

92
00:07:19,300 --> 00:07:22,400
A character class is
a range of characters

93
00:07:22,400 --> 00:07:26,100
one of which must match at
that point in the pattern

94
00:07:27,420 --> 00:07:31,600
You just place all of the acceptable characters
together inside square brackets

95
00:07:32,360 --> 00:07:36,800
So we can replace our dot with
a character class that accepts

96
00:07:36,800 --> 00:07:41,000
any single digit from 0 to 9, like this

97
00:07:48,740 --> 00:07:54,060
Now we’re accepting any digit from 0-9
any number of times

98
00:07:54,060 --> 00:07:55,660
But we can do better than that

99
00:07:56,680 --> 00:08:01,580
With a continuous range of characters
we don’t need to specify each one

100
00:08:02,660 --> 00:08:06,500
That works just the same, and reads a bit better

101
00:08:07,680 --> 00:08:10,380
For common character classes like digits

102
00:08:10,380 --> 00:08:14,600
there are a few shorthand character classes
that you can use

103
00:08:15,359 --> 00:08:18,687
For digits, you can use a backslash-d (\d)

104
00:08:21,247 --> 00:08:25,087
Maybe you find that’s just made your
regular expression more cryptic

105
00:08:25,600 --> 00:08:27,880
It’s something of a matter of taste

106
00:08:27,880 --> 00:08:30,720
but there are only a few of these
to learn if you’re interested

107
00:08:31,480 --> 00:08:33,520
Here are the most useful ones:

108
00:08:35,460 --> 00:08:37,380
\d is for digit

109
00:08:38,655 --> 00:08:42,239
\w is for word character

110
00:08:43,775 --> 00:08:47,600
\s is for whitespace:

111
00:08:47,600 --> 00:08:51,199
a space, a tab, or a line break

112
00:08:54,271 --> 00:08:57,855
The star modifier has a subtle flaw:

113
00:08:59,140 --> 00:09:05,020
any number of times includes zero times

114
00:09:06,040 --> 00:09:09,880
We don’t want to match distances with
zero digits in them

115
00:09:11,679 --> 00:09:15,775
To fix this, we can use the plus (+) modifier

116
00:09:16,540 --> 00:09:22,420
That means at least once
which is more suitable in this situation

117
00:09:26,020 --> 00:09:29,080
Now that is pretty watertight

118
00:09:30,280 --> 00:09:32,980
We took quite a long time to get here

119
00:09:32,980 --> 00:09:37,540
but on the journey we passed through almost
every feature of regular expressions

120
00:09:37,540 --> 00:09:40,600
you’ll ever need to work with Cucumber

121
00:09:41,860 --> 00:09:44,580
There are just a couple more
we want to tell you about

122
00:09:45,720 --> 00:09:50,320
Don’t go thinking you’re limited to
capturing just one argument from a step

123
00:09:51,360 --> 00:09:57,240
You can use the parentheses as many times
as you like in your pattern

124
00:09:57,240 --> 00:10:03,380
For example, we could make the names of the people
in our step into arguments, like this

125
00:10:06,200 --> 00:10:10,160
Notice that we haven’t used quotation marks ("")
to surround our captures

126
00:10:10,160 --> 00:10:11,720
anywhere in this lesson

127
00:10:13,640 --> 00:10:19,080
There’s nothing mandatory about doing that -

128
00:10:19,080 --> 00:10:23,400
but as long as you use a capture group
in your regular expression

129
00:10:23,400 --> 00:10:26,940
Cucumber will pass you the captured value
as an argument

130
00:10:28,740 --> 00:10:34,220
Although it’s important to try to use
consistent terminology in your Gherkin scenarios

131
00:10:34,220 --> 00:10:37,960
to help develop the
ubiquitous language of your domain

132
00:10:39,060 --> 00:10:44,600
We also want scenarios to read naturally
which means allowing a bit of flexibility

133
00:10:46,360 --> 00:10:52,400
Ideally, the language used in scenarios should
never be constrained by your step definitions

134
00:10:53,560 --> 00:10:57,660
Otherwise, they’ll end up sounding 
like they were written by robots

135
00:10:58,943 --> 00:11:02,015
One common example is the problem of plurals

136
00:11:03,039 --> 00:11:07,135
Suppose we want to place Lucy and Sean
just 1 metre apart

137
00:11:08,160 --> 00:11:10,460
This step would not match

138
00:11:12,080 --> 00:11:18,020
Because we’ve used the singular 'metre'
instead of the plural 'metres'

139
00:11:18,020 --> 00:11:19,420
we don’t have a match

140
00:11:20,191 --> 00:11:21,727
What a pain!

141
00:11:23,007 --> 00:11:24,287
Fear not!

142
00:11:24,799 --> 00:11:28,380
We can use another modifier
the question mark (?)

143
00:11:28,380 --> 00:11:31,455
to mark the “s” as optional

144
00:11:32,480 --> 00:11:33,820
Here's how that looks

145
00:11:36,320 --> 00:11:40,020
The question mark is one way to
smooth off some of the rough edges

146
00:11:40,020 --> 00:11:41,700
in your regular expressions

147
00:11:43,487 --> 00:11:48,095
Another trick is to use a non-capturing group

148
00:11:51,940 --> 00:11:54,240
Suppose someone wanted to write this step

149
00:11:56,960 --> 00:12:01,040
The fact that Lucy is standing
doesn't particularly matter

150
00:12:01,040 --> 00:12:04,480
but the people writing this step
like the way it reads, and want to keep it

151
00:12:06,271 --> 00:12:10,367
We can change our regular expression
to allow for both, like this

152
00:12:13,439 --> 00:12:16,767
This is the same as the
alternates we used earlier

153
00:12:18,047 --> 00:12:21,887
We use a list of alternate phrases
separated by a pipe

154
00:12:22,920 --> 00:12:26,840
This time we start with
the question-mark-colon (?:)

155
00:12:26,840 --> 00:12:30,840
to indicate that the group is non-capturing

156
00:12:30,840 --> 00:12:35,560
Otherwise we’d be passed the value
of whichever alternate matched

157
00:12:35,560 --> 00:12:37,640
which isn’t really interesting to us

158
00:12:40,200 --> 00:12:41,600
One final thing

159
00:12:42,300 --> 00:12:47,000
You might have noticed that the snippets
Cucumber prints out for undefined steps

160
00:12:47,000 --> 00:12:50,060
start with a caret (^) and end with a dollar ($)

161
00:12:51,320 --> 00:12:54,660
These two metacharacters are called anchors

162
00:12:54,660 --> 00:12:58,460
because they’re used to tie down
the regular expression

163
00:12:58,460 --> 00:13:02,340
to the beginning and end
of the string they're being matched on

164
00:13:03,615 --> 00:13:09,247
You don’t have to use them, and we’ve got on fine
leaving them out of this example so far

165
00:13:10,783 --> 00:13:14,623
To illustrate why we need them
consider this step

166
00:13:18,720 --> 00:13:23,320
Because we haven’t anchored down the
end of our pattern with a dollar

167
00:13:23,320 --> 00:13:29,460
it will happily match this step
ignoring the bit about Dave at the end

168
00:13:30,800 --> 00:13:34,740
Adding anchors to the beginning and end
of your pattern

169
00:13:34,740 --> 00:13:38,440
prevents this kind of nasty little accident

170
00:13:41,180 --> 00:13:48,180
When Cucumber captures an argument from your step
it’s always a string by default

171
00:13:48,180 --> 00:13:52,000
even if you’ve used a digit character class
in the regular expression

172
00:13:53,023 --> 00:13:54,559
This can cause headaches

173
00:13:55,320 --> 00:14:00,040
In the case of the distance
we’ve been using in our example

174
00:14:00,040 --> 00:14:05,320
we’d like it to be an integer
but we’ll have to convert it manually, like this

175
00:14:07,620 --> 00:14:10,720
This is OK in one or two places

176
00:14:10,720 --> 00:14:14,060
but when you need to do it
all over your step definition code

177
00:14:14,060 --> 00:14:17,640
it becomes repetitive and error prone

178
00:14:17,640 --> 00:14:22,680
Luckily, Cucumber has a feature
called transforms

179
00:14:22,680 --> 00:14:24,760
that’s designed to tackle this problem

180
00:14:26,560 --> 00:14:31,760
We define a Transform in much
the same way as a step definition

181
00:14:31,760 --> 00:14:37,820
but this time our pattern will be
matched against any captured argument

182
00:14:39,360 --> 00:14:47,900
If the transform matches
then the raw captured string is passed in

183
00:14:47,900 --> 00:14:54,200
and the result of the transform block
is then passed on to the step definition

184
00:14:56,980 --> 00:15:03,220
This very simple Transform will match
any number and convert it to an integer

185
00:15:04,200 --> 00:15:08,040
Having a few of these Transforms
can be very handy indeed

186
00:15:09,060 --> 00:15:13,160
Well that was a pretty deep dive
into regular expressions!

187
00:15:14,140 --> 00:15:16,260
With what you’ve learned in this lesson

188
00:15:16,260 --> 00:15:20,820
you’ll be able to match any phrase
you see in a Gherkin step without fear

189
00:15:21,860 --> 00:15:24,880
This will help you keep your scenarios readable

190
00:15:24,880 --> 00:15:29,020
and keep your business stakeholders
engaged in the BDD process

191
00:15:32,600 --> 00:15:35,720
We’d love to hear your feedback
about Cucumber School

192
00:15:36,920 --> 00:15:40,340
If you love it, feel free to tweet about us

193
00:15:40,340 --> 00:15:44,840
and mention @cucumberbdd
in your tweet if you like

194
00:15:46,440 --> 00:15:52,340
If there’s anything you’d like us to improve on
or any specific things you want to tell us

195
00:15:52,340 --> 00:15:57,700
please email hello@cucumber.pro
to start the conversation

196
00:15:59,100 --> 00:16:01,100
Captions created by Jayson Smith for Cucumber Ltd.
