WEBVTT

1
00:00:14.592 --> 00:00:15.360
Hello

2
00:00:15.616 --> 00:00:17.408
Welcome back to cucumber School

3
00:00:17.920 --> 00:00:23.552
And the last lesson we saw how easily incidental details can creep into your scenarios

4
00:00:23.808 --> 00:00:25.600
Tilt about why there a problem

5
00:00:26.112 --> 00:00:29.696
I showed you some techniques from massaging them back out again

6
00:00:30.720 --> 00:00:31.488
But

7
00:00:31.744 --> 00:00:34.560
As we push the details out about scenarios

8
00:00:34.816 --> 00:00:37.632
We made the step definition code more complicated

9
00:00:38.400 --> 00:00:41.472
We promise to show you how to deal with the extra complexity

10
00:00:41.984 --> 00:00:43.776
And that's what we'll do in this episode

11
00:00:44.544 --> 00:00:45.568
First time

12
00:00:45.824 --> 00:00:51.968
Let's look at how we could have prevented the Premium Accounts feature from getting into such a mess

13
00:00:52.224 --> 00:00:53.504
In the first place

14
00:00:55.808 --> 00:00:59.904
Unless someone we showed you an example of The Three Amigos

15
00:01:00.160 --> 00:01:01.184
Pasta

16
00:01:01.440 --> 00:01:03.744
Developer and product owner

17
00:01:04.000 --> 00:01:06.816
Having a conversation about the New Uses story

18
00:01:07.840 --> 00:01:10.912
What's the purpose of this conversation

19
00:01:12.448 --> 00:01:16.544
A software project is often the unknown unknowns

20
00:01:16.800 --> 00:01:19.872
That can make the biggest difference between success and failure

21
00:01:20.640 --> 00:01:26.784
DDD we always try to assume we're ignorant of some important information

22
00:01:27.296 --> 00:01:29.856
And try to deliberately discover

23
00:01:30.368 --> 00:01:36.000
That was unknown unknowns as early as possible so they don't surprise his lights are on

24
00:01:36.768 --> 00:01:40.352
That's what the Three Amigos is all about

25
00:01:41.120 --> 00:01:47.008
Nobody likes long meetings so we've developed a simple framework for this conversation that keeps it quick and effective

26
00:01:47.776 --> 00:01:50.336
The coldest example mapping

27
00:01:51.360 --> 00:01:53.920
Don't need a multicolor pack of index cards

28
00:01:54.432 --> 00:01:55.712
And some pens

29
00:01:56.992 --> 00:02:02.624
Will use the different color cards to represent the different kinds of information that arise in the conversation

30
00:02:03.392 --> 00:02:05.184
We can start with the easy stuff

31
00:02:05.952 --> 00:02:09.024
Take a yellow card and write down the name of the story

32
00:02:11.584 --> 00:02:12.096
Now

33
00:02:12.608 --> 00:02:16.960
Do we already know any rules or acceptance criteria about this story

34
00:02:17.984 --> 00:02:21.312
Write each roll down on a blue card

35
00:02:23.616 --> 00:02:25.408
They look pretty straightforward

36
00:02:25.920 --> 00:02:29.504
Let's explore them a bit by coming up with some examples

37
00:02:30.528 --> 00:02:36.160
Down in the developer comes up with a simple scenario to check he understands the basics of the viral

38
00:02:37.440 --> 00:02:38.976
I stopped at end credits

39
00:02:39.488 --> 00:02:41.792
I shout by my muffins

40
00:02:42.048 --> 00:02:45.120
And then I want to buy some socks

41
00:02:45.376 --> 00:02:47.168
And then I have zero credits

42
00:02:47.424 --> 00:02:48.192
Correct

43
00:02:49.472 --> 00:02:51.008
Yes cipolla

44
00:02:51.520 --> 00:02:53.824
Darn Rice's example up on a green card

45
00:02:54.080 --> 00:02:57.408
And places it underneath the Rule Tattoo illustrates

46
00:02:58.944 --> 00:03:00.480
Tell me the test to chimes in

47
00:03:01.504 --> 00:03:07.648
How about the one where you shout to word that contains by like fire for example

48
00:03:08.416 --> 00:03:11.744
If you want to shout I need a buyer for my house

49
00:03:12.000 --> 00:03:13.536
Without those credits to

50
00:03:14.816 --> 00:03:20.960
Pull it thinks about this for a minute and besides that no only the whole would buy counts

51
00:03:23.008 --> 00:03:27.616
The right that's up on the rule card and placed example caught underneath it

52
00:03:30.432 --> 00:03:31.456
Darn asks

53
00:03:31.968 --> 00:03:33.760
How to use this get these credits

54
00:03:34.016 --> 00:03:36.832
Are we building at functionalities part of the Story 2

55
00:03:38.112 --> 00:03:43.744
Hotels in that pot another story and they can assure music can purchase credits

56
00:03:44.768 --> 00:03:46.560
They write that down as a rule to

57
00:03:48.352 --> 00:03:54.496
This isn't a behavioral it's a rule about the scope of the story but it's still useful to write it down since we've agreed on it

58
00:03:55.776 --> 00:03:57.312
It won't need an examples

59
00:03:59.104 --> 00:04:02.176
Still focused on the by rule tell me asks

60
00:04:02.432 --> 00:04:04.224
What's your favorite asset credit

61
00:04:04.736 --> 00:04:09.088
So you start with 10 credits and Shout by three times was the outcome

62
00:04:10.112 --> 00:04:11.392
Pulling looks puzzled

63
00:04:12.416 --> 00:04:13.952
I don't know if she says

64
00:04:14.208 --> 00:04:16.000
I need to give that some thought

65
00:04:17.024 --> 00:04:18.559
Darren takes a red card

66
00:04:18.815 --> 00:04:20.863
And writes this up as a question

67
00:04:23.423 --> 00:04:29.567
Apply the same technique to the other rule about long messages I'm pretty soon the table is covered in cars reflect

68
00:04:29.823 --> 00:04:34.687
Setting the rules examples on questions that have come up in that conversation

69
00:04:35.199 --> 00:04:39.551
Now to have a picture in front of them that reflect back will they know

70
00:04:39.807 --> 00:04:42.879
And still don't know about the story

71
00:04:47.487 --> 00:04:53.631
The apparent purpose of the Three Amigos is to take a user story together with its acceptance Christ

72
00:04:53.887 --> 00:04:55.167
Ontario business rules

73
00:04:55.423 --> 00:04:58.751
I'm producing examples that illustrate the behavior

74
00:05:00.031 --> 00:05:04.895
Many people think they need to produce full McGuckin scenarios from The Three Amigos conversations

75
00:05:05.151 --> 00:05:11.295
What's in our experience that only occasionally necessary in fact they can often slow the discussion.

76
00:05:13.343 --> 00:05:19.487
As you've seen an example mapping session should go right across the breadth of the story trying to get complete

77
00:05:19.743 --> 00:05:20.767
Picture of the behavior

78
00:05:21.535 --> 00:05:23.583
Next time you come up with an example

79
00:05:23.839 --> 00:05:26.655
Try to understand what the underlying rules

80
00:05:27.423 --> 00:05:30.239
If you discover a scenario that doesn't fit your rules

81
00:05:30.495 --> 00:05:32.799
You need to reconsider your rules

82
00:05:33.567 --> 00:05:38.687
In this way the acceptance criteria for the story a refined by the group

83
00:05:39.711 --> 00:05:44.575
Although there's no doubt of the power of examples for exploring and token three requirements

84
00:05:45.087 --> 00:05:47.135
It's the rules will come into the code

85
00:05:47.903 --> 00:05:49.695
If you understand the rules

86
00:05:49.951 --> 00:05:52.511
You'll be able to build an elegant solution

87
00:05:54.559 --> 00:05:58.911
Sometimes you come across questions that nobody in the group can answer

88
00:05:59.679 --> 00:06:03.007
Instead of getting stuck trying to come up with an answer

89
00:06:03.263 --> 00:06:05.055
Just write down the question

90
00:06:05.823 --> 00:06:10.175
Congratulations you just turned unknown unknown

91
00:06:10.431 --> 00:06:12.479
Into a Known Unknown

92
00:06:12.991 --> 00:06:14.783
That's progress

93
00:06:18.111 --> 00:06:20.159
Deciding what the story is not

94
00:06:20.415 --> 00:06:23.487
Maximizing the amount of work not done

95
00:06:23.743 --> 00:06:27.327
Is one of the most useful things you can do in a three Amigo session

96
00:06:28.095 --> 00:06:32.191
Small stories at the secret of a successful a child theme

97
00:06:33.727 --> 00:06:36.031
I told him through the details of the behavior

98
00:06:36.287 --> 00:06:41.919
Ensure that the Testa developing products on a old antique rement about what needs to be built

99
00:06:42.431 --> 00:06:44.991
Shadow understanding emerges between them

100
00:06:46.015 --> 00:06:49.087
They also got a little more about one another's perspective

101
00:06:49.343 --> 00:06:53.951
Some people tell us the Three Amigos is help to build empathy within that team

102
00:06:55.999 --> 00:07:02.143
With this goal in mind make sure the Three Amigos isn't just a rubber-stamping exercise while one person

103
00:07:02.399 --> 00:07:03.679
Does all the talking

104
00:07:04.447 --> 00:07:10.335
Notice how we not example everyone in the group was asking questions and writing you cards

105
00:07:11.615 --> 00:07:16.479
One last tip is to run your Three Amigos sessions inside a time box

106
00:07:16.991 --> 00:07:21.343
When your practice that's it you should be able to analyze a story within 25 minutes

107
00:07:21.855 --> 00:07:23.391
If you can't

108
00:07:23.647 --> 00:07:24.927
It's either too big

109
00:07:25.439 --> 00:07:27.743
Well you don't understand it well enough yet

110
00:07:28.511 --> 00:07:31.327
Either way it's not ready to play

111
00:07:32.863 --> 00:07:37.983
By the end of the 25 minutes you can check whether everyone thinks the store is ready to start work on

112
00:07:38.751 --> 00:07:42.079
Has lots of questions remain it will be risky to start work

113
00:07:42.335 --> 00:07:47.199
The people might be comfortable taking on the story with only a few minor questions to clear up

114
00:07:47.967 --> 00:07:50.783
Check this with a quick thumb vote

115
00:07:53.343 --> 00:07:57.695
When we build software we're always working across two domains

116
00:07:58.463 --> 00:08:00.255
Does the problem domain

117
00:08:00.511 --> 00:08:03.327
What are customers and business stakeholders live

118
00:08:04.351 --> 00:08:06.911
And as a solution to Maine

119
00:08:07.167 --> 00:08:10.495
But we sold those business problems using technology

120
00:08:12.031 --> 00:08:15.615
Each domain has its own jog on its own dialect

121
00:08:16.127 --> 00:08:17.407
That's fine

122
00:08:17.663 --> 00:08:20.991
Specialized language helps to main expose to communicate

123
00:08:21.759 --> 00:08:27.903
Off to know this jog on can prevent us from understanding one another across the two domains

124
00:08:29.183 --> 00:08:34.559
Ispeedy practitioners with focused on trying to grow this error in the middle

125
00:08:34.815 --> 00:08:38.399
Why we have a common will ubiquitous language

126
00:08:39.423 --> 00:08:42.751
We know that the bigger the shed vocabulary is

127
00:08:43.007 --> 00:08:49.151
The quicker the team can communicate ideas between the business and technology facing sides of the team

128
00:08:50.687 --> 00:08:54.527
We've also had it said that if you model the problem well enough

129
00:08:54.783 --> 00:08:57.599
Solution will take care of itself

130
00:08:59.135 --> 00:09:03.743
Certainly we believe that the better understanding you have the problem to mine

131
00:09:03.999 --> 00:09:06.303
The best resolution you can build

132
00:09:07.071 --> 00:09:09.119
That's why cucumber so powerful

133
00:09:09.631 --> 00:09:12.703
Because it helps you to stay rooted in the public domain

134
00:09:15.007 --> 00:09:17.567
So why do you feature file set on this diagram

135
00:09:18.591 --> 00:09:24.735
Well we hope to sit right in the middle here and access the place where the problem and solution to Minds come together

136
00:09:26.015 --> 00:09:31.135
Someone from either to me should be able to read a feature file and it will make sense to them

137
00:09:32.671 --> 00:09:34.719
And how about step definitions

138
00:09:35.487 --> 00:09:38.047
Step definitions of Rights on the boundary here

139
00:09:38.303 --> 00:09:42.399
Translating between the problem domain language we use in a gherkin scenarios

140
00:09:42.911 --> 00:09:47.263
On the concrete actions were taken code to plump over his eye solution

141
00:09:48.799 --> 00:09:54.943
We want to prevent solution to main Concepts and language from leaking into a gherkin scenarios so that we keep them readable

142
00:09:55.967 --> 00:10:00.319
I saw in the last lesson when we remove details from cenarios

143
00:10:00.575 --> 00:10:04.159
The trade-off for increased complexity and ISTEP definitions

144
00:10:05.695 --> 00:10:07.743
So how do we manage this complexity

145
00:10:09.279 --> 00:10:15.423
Amateur cucumber test we will have a layer of support code sitting between the step definitions

146
00:10:15.679 --> 00:10:17.471
I'm a system being automated

147
00:10:18.239 --> 00:10:24.383
This layer of support I would literally supposed to step definitions by providing an API

148
00:10:24.639 --> 00:10:25.919
Automating replication

149
00:10:26.687 --> 00:10:29.759
We can extract this API for my step definitions

150
00:10:30.527 --> 00:10:33.855
Let's pick up The Shanty codebase I show you what we mean

151
00:10:34.623 --> 00:10:37.695
We need a new director to contain us a pull code

152
00:10:37.951 --> 00:10:43.327
The conventional place to put it is here in a support directory underneath features

153
00:10:44.351 --> 00:10:50.495
Does a special file and support the Cucumber always loads first cold EnV or n

154
00:10:50.751 --> 00:10:52.031
Abby

155
00:10:52.799 --> 00:10:55.871
You can use this to boot up the system that you're testing

156
00:10:56.639 --> 00:11:02.527
In this case I'll system is just at the main model so we can load it here instead of from the step definitions

157
00:11:03.039 --> 00:11:07.647
The most healthiest ubication in the steppe definition code is for sure and shouting a message

158
00:11:08.671 --> 00:11:10.975
Let's imagine where to help a method like this instead

159
00:11:11.999 --> 00:11:13.279
Veneta

160
00:11:15.327 --> 00:11:20.191
Everytime cucumber Runza scenario it creates a new object called the world

161
00:11:20.959 --> 00:11:25.823
Each step definition runs inside this world object almost as though it were a method

162
00:11:26.847 --> 00:11:31.711
We can extend the methods available on the World by first defining them on a roofie module

163
00:11:32.223 --> 00:11:34.527
Then registering that module with cucumber

164
00:11:36.575 --> 00:11:40.671
Create a new file in the support directory to container extensions to the world

165
00:11:43.231 --> 00:11:47.839
Now we find a molecule until cucumber to make it pop off the world

166
00:11:49.887 --> 00:11:53.471
Finally we Define on you help a methadone this module

167
00:11:53.727 --> 00:11:56.031
Payson the coaching two-step definition

168
00:11:57.567 --> 00:12:00.895
Dallas run cucumber to check everything still working

169
00:12:02.943 --> 00:12:03.455
Good

170
00:12:04.991 --> 00:12:07.807
Now we can use that new method everywhere

171
00:12:12.415 --> 00:12:14.975
And check we haven't broken anything

172
00:12:15.999 --> 00:12:16.511
Done

173
00:12:18.303 --> 00:12:24.447
Notice that the help a method we extracted still uses those instance variables people and

174
00:12:24.703 --> 00:12:26.239
Messages shouted by

175
00:12:27.007 --> 00:12:32.383
This works because the help a message and mixed into the same world of ject has the step definitions

176
00:12:32.639 --> 00:12:35.199
So they can all see these ants inside apples

177
00:12:35.967 --> 00:12:36.991
However

178
00:12:37.247 --> 00:12:41.343
We don't like sharing State across the support API bounded like this

179
00:12:42.111 --> 00:12:48.255
Things can get complicated quickly when you have code spread all over your step definitions on support directory

180
00:12:48.511 --> 00:12:50.815
That's depending on these instance variables

181
00:12:51.839 --> 00:12:55.423
It's better to push the state behind the support API

182
00:12:56.191 --> 00:12:58.495
Let's stop with the hardship people

183
00:12:59.519 --> 00:13:03.871
Go to find a new method on the world that Returns the people instance variable

184
00:13:04.127 --> 00:13:07.711
Initializing it with an empty hash if it's never been accessed before

185
00:13:09.247 --> 00:13:15.391
Now we can use this method everywhere in the step definitions I mean no longer need to initialize it in this way

186
00:13:15.647 --> 00:13:16.415
The faux hawk

187
00:13:18.463 --> 00:13:20.767
Let's run cucumber to chat we haven't broken anything

188
00:13:21.791 --> 00:13:22.815
Cut

189
00:13:23.327 --> 00:13:26.655
Now we can do exactly the same thing with messages shouted by

190
00:13:28.191 --> 00:13:30.495
First grade helper method

191
00:13:32.031 --> 00:13:34.591
10 replace the coils from the step definitions

192
00:13:36.383 --> 00:13:38.943
Now we can remove this before hook altogether

193
00:13:40.735 --> 00:13:44.063
I'm finally run cucumber to check was still green

194
00:13:47.135 --> 00:13:51.743
We could continue to move code for my step definitions into the support code like this

195
00:13:52.255 --> 00:13:56.863
For example we could rise support method for generating messages of a certain length

196
00:13:58.143 --> 00:14:04.287
Ideally each step definition should only contain one or two lines that delegate to your support code

197
00:14:05.055 --> 00:14:11.199
When you follow this principle is Step definitions become a translation laugh from plain language into code

198
00:14:12.223 --> 00:14:18.367
Batcave in the vocabulary consistent As you move across the problem solution boundary you start to Allison

199
00:14:18.623 --> 00:14:21.183
Scenarios to dry the design of your Domain model

200
00:14:21.951 --> 00:14:25.279
This is what we cool modeling by example

201
00:14:27.327 --> 00:14:31.679
And this way we create our API automating your application

202
00:14:32.191 --> 00:14:38.335
At this API grows if it comes easy and easier to write a new Step definitions because the actions

203
00:14:38.591 --> 00:14:41.663
You need to take are already defined on the API

204
00:14:43.455 --> 00:14:49.599
It might seem like over engineering but all this was shot application but you'll be surprised how quickly these tests

205
00:14:49.855 --> 00:14:50.623
Sweet scrub

206
00:14:50.879 --> 00:14:57.023
Taking time to Stamp Out complexity early and organize your code to create a good support API

207
00:14:57.279 --> 00:14:59.583
Is a great investment for the future

208
00:15:00.351 --> 00:15:06.495
In a future lesson will show you how a well-crafted automation API I miss that you plug

209
00:15:06.751 --> 00:15:11.103
Cenarios into the system at different levels such as a web front-end

210
00:15:12.383 --> 00:15:16.735
The other investment we showed you about in this episode is it Three Amigos conversation

211
00:15:17.247 --> 00:15:23.391
Taking a little time to explore you use a story in a collaborative setting before you start to code it

212
00:15:23.903 --> 00:15:27.487
Could save an enormous amount of time and effort down the line

213
00:15:28.255 --> 00:15:34.399
Finding mistaken assumptions and misunderstandings cost almost nothing when you just pushing pieces of car door

214
00:15:34.655 --> 00:15:35.423
Around the table

215
00:15:36.191 --> 00:15:38.239
As my grandma used to say

216
00:15:38.495 --> 00:15:41.311
Stitch in time saves nine

217
00:15:42.335 --> 00:15:46.431
It might feel like an overhead to have these Three Amigos paintings for every story

218
00:15:46.687 --> 00:15:52.831
We think you'll be surprised how much you can discover from just that 25 minute conversation

219
00:15:53.855 --> 00:15:55.135
Give us a try

220
00:15:56.159 --> 00:15:57.951
And I'll see you next time

221
00:15:58.207 --> 00:15:59.743
On cucumber School
