1
00:00:14,600 --> 00:00:17,380
Hello! Welcome back to Cucumber School

2
00:00:18,060 --> 00:00:19,280
In the last lesson

3
00:00:19,280 --> 00:00:23,760
we saw how easily incidental details
can creep into your scenarios

4
00:00:23,760 --> 00:00:27,640
talked about why they're a problem
and showed you some techniques

5
00:00:27,640 --> 00:00:29,620
for massaging them back out again

6
00:00:30,600 --> 00:00:34,900
But as we push the details
out of our scenarios

7
00:00:34,900 --> 00:00:37,620
we made the step definition code
more complicated

8
00:00:38,480 --> 00:00:41,920
We promised to show you how to deal
with that extra complexity

9
00:00:41,920 --> 00:00:43,920
and that's what we'll do in this episode

10
00:00:44,680 --> 00:00:49,100
First though, let's look at how
we could have prevented the premium accounts

11
00:00:49,100 --> 00:00:53,500
feature from getting into such a mess
in the first place

12
00:00:55,880 --> 00:01:00,260
In lesson 1 we showed you an example
of the three amigos -

13
00:01:00,260 --> 00:01:04,100
tester, developer, and product owner -

14
00:01:04,100 --> 00:01:06,900
having a conversation about
a new user story

15
00:01:07,960 --> 00:01:10,860
What's the purpose of this conversation?

16
00:01:12,420 --> 00:01:17,460
In software projects, it's often the
unknown unknowns that can make the

17
00:01:17,460 --> 00:01:20,840
biggest difference between
success and failure

18
00:01:20,840 --> 00:01:27,340
In BDD we always try to assume we're
ignorant of some important information

19
00:01:27,340 --> 00:01:33,354
and try to deliberately discover those
unknown unknowns as early as possible

20
00:01:33,360 --> 00:01:36,940
so they don't surprise us later on

21
00:01:36,940 --> 00:01:41,100
That's what the three amigos is all about

22
00:01:41,100 --> 00:01:44,680
Nobody likes long meetings so we've
developed a simple framework

23
00:01:44,680 --> 00:01:47,740
for this conversation that
keeps it quick and effective

24
00:01:47,740 --> 00:01:50,200
We call this Example Mapping

25
00:01:51,440 --> 00:01:55,520
You'll need a multicoloured pack of index
cards and some pens

26
00:01:57,100 --> 00:01:59,938
We use the different coloured cards to
represent the different kinds of

27
00:01:59,940 --> 00:02:02,740
information that arise in the conversation

28
00:02:03,540 --> 00:02:05,040
We can start with the easy stuff:

29
00:02:05,920 --> 00:02:09,240
Take a yellow card
and write down the name of the story

30
00:02:11,540 --> 00:02:17,060
Now do we already know any rules or
acceptance criteria about this story?

31
00:02:18,080 --> 00:02:21,220
Write each rule down on a blue card

32
00:02:23,760 --> 00:02:27,440
They look pretty straightforward but let's
explore them a bit

33
00:02:27,440 --> 00:02:29,340
by coming up with some examples

34
00:02:30,620 --> 00:02:34,100
Darren the developer comes up with a simple scenario to check he understands

35
00:02:34,100 --> 00:02:36,180
the basics of the 'buy' rule:

36
00:02:37,380 --> 00:02:42,160
I start with ten credits
I shout 'buy my muffins'

37
00:02:42,160 --> 00:02:48,400
and then 'I want to buy some socks'
and then I have zero credits, correct?

38
00:02:49,660 --> 00:02:51,380
Yes, says Paula

39
00:02:51,380 --> 00:02:56,080
Darren writes example upon a green card
and places it underneath the rule

40
00:02:56,080 --> 00:02:57,500
that it illustrates

41
00:02:58,900 --> 00:03:01,440
Tammy the tester chimes in:

42
00:03:01,440 --> 00:03:08,440
How about the one where you shout a word
 that contains 'buy' like 'buyer' for example?

43
00:03:08,440 --> 00:03:13,840
If you were to shout 'I need a buyer for my
house' would that lose credits too?

44
00:03:14,980 --> 00:03:18,360
Paula thinks about this for a minute
and decides that no

45
00:03:18,360 --> 00:03:20,720
only the whole word buy counts

46
00:03:20,720 --> 00:03:22,178
They've discovered a new rule!

47
00:03:23,120 --> 00:03:27,700
They write that up on the rule card and
place the example card underneath it

48
00:03:30,500 --> 00:03:31,920
Darren asks:

49
00:03:31,920 --> 00:03:34,160
How do users get these credits?

50
00:03:34,160 --> 00:03:36,760
Are we building that functionality
as part of the story?

51
00:03:38,100 --> 00:03:42,260
Paula tells him that's part of another story
and they can assume the user already

52
00:03:42,260 --> 00:03:43,680
can purchase credits

53
00:03:44,900 --> 00:03:46,540
They write that down as a rule too

54
00:03:48,280 --> 00:03:52,080
This isn't a behaviour rule
it's a rule about the scope of the story

55
00:03:52,080 --> 00:03:55,660
but it's still useful to write it down
since we've agreed on it

56
00:03:55,660 --> 00:03:57,460
but it won't need any examples

57
00:03:59,200 --> 00:04:04,720
Still focussed on the 'buy' rule, Tammy asks:
What if they run out of credit?

58
00:04:04,720 --> 00:04:08,000
Say you start with 10 credits
and shout 'buy' three times

59
00:04:08,000 --> 00:04:09,060
What's the outcome?

60
00:04:10,220 --> 00:04:11,400
Paula looks puzzled

61
00:04:12,620 --> 00:04:16,780
I don't know, she says
I'll need to give that some thought

62
00:04:16,780 --> 00:04:20,680
Darren takes a red card and writes this up
as a question

63
00:04:23,320 --> 00:04:27,697
They apply the same technique to the other
rule about long messages and pretty soon

64
00:04:27,700 --> 00:04:32,720
the table is covered in cards reflecting
the rules, examples, and questions

65
00:04:32,720 --> 00:04:34,520
that have come up in their conversation

66
00:04:35,180 --> 00:04:39,820
Now they have a picture in front of them
that reflects back what they know

67
00:04:39,820 --> 00:04:42,660
and still don't know about this story

68
00:04:47,520 --> 00:04:52,740
The apparent purpose of the three amigos
is to take a user story together with its

69
00:04:52,740 --> 00:04:58,900
acceptance criteria or business rules and produce examples that illustrate the behaviour

70
00:05:00,080 --> 00:05:03,000
Many people think they need to produce
formal Gherkin scenarios

71
00:05:03,000 --> 00:05:05,440
from their three amigos conversations

72
00:05:05,440 --> 00:05:08,700
but in our experience
that's only occasionally necessary

73
00:05:08,700 --> 00:05:13,260
In fact, it can often slow the
discussion down

74
00:05:13,260 --> 00:05:16,700
As you've just seen, an example mapping
session should go right across

75
00:05:16,700 --> 00:05:21,760
the breadth of the story, trying to get a
complete picture of the behaviour

76
00:05:21,760 --> 00:05:26,520
Each time you come up with an example
try to understand what the underlying rules are

77
00:05:27,600 --> 00:05:30,640
If you discover a scenario that
doesn't fit your rules

78
00:05:30,640 --> 00:05:32,780
you'll need to reconsider your rules

79
00:05:33,700 --> 00:05:38,880
In this way the acceptance criteria for the story
are refined by the group

80
00:05:39,780 --> 00:05:43,000
Although there's no doubt of the
power of examples for exploring

81
00:05:43,000 --> 00:05:47,360
and talking through requirements
it's the rules that will go into the code

82
00:05:48,000 --> 00:05:52,720
If you understand the rules
you'll be able  to build an elegant solution

83
00:05:54,520 --> 00:05:59,720
Sometimes you'll come across questions
that nobody in the group can answer

84
00:05:59,720 --> 00:06:03,400
Instead of getting stuck trying to come up
with an answer

85
00:06:03,400 --> 00:06:04,960
just write down the question

86
00:06:05,880 --> 00:06:07,480
Congratulations!

87
00:06:07,480 --> 00:06:13,140
You've just turned an unknown unknown
into a known unknown

88
00:06:13,140 --> 00:06:14,800
That's progress

89
00:06:18,120 --> 00:06:23,800
Deciding what a story is not -
and maximizing the amount of work not done

90
00:06:23,800 --> 00:06:27,280
is one of the most useful things you
can do in a three amigos session

91
00:06:28,180 --> 00:06:32,200
Small stories are the secret of a
successful agile team

92
00:06:33,760 --> 00:06:36,520
By talking through the details 
of the behaviour

93
00:06:36,520 --> 00:06:39,340
we ensure that the tester
developer and product owner

94
00:06:39,340 --> 00:06:42,500
are all in agreement about
what needs to be built

95
00:06:42,500 --> 00:06:45,900
A shared understanding emerges
between them

96
00:06:45,900 --> 00:06:49,540
They also learn a little more about
one another's perspective

97
00:06:49,540 --> 00:06:54,240
Some people tell us the three amigos has
helped to build empathy within their team!

98
00:06:56,020 --> 00:06:58,744
With this goal in mind
make sure the three amigos

99
00:06:58,744 --> 00:07:04,440
isn't just a rubber stamping exercise
where one person does all the talking

100
00:07:04,440 --> 00:07:08,580
Notice how in our example everyone
in the group was asking questions

101
00:07:08,580 --> 00:07:10,360
and writing new cards?

102
00:07:11,700 --> 00:07:16,480
One last tip is to run your three amigo
sessions inside a time box

103
00:07:17,180 --> 00:07:21,220
When you're practiced at it you should be able to
analyze a story within 25 minutes

104
00:07:21,960 --> 00:07:27,940
If you can't, it's either too big or
you don't understand it well enough yet

105
00:07:28,620 --> 00:07:31,280
Either way it's not ready to play

106
00:07:32,920 --> 00:07:36,479
At the end of the 25 minutes you can
check whether everyone thinks the story

107
00:07:36,480 --> 00:07:38,020
is ready to start work on

108
00:07:38,820 --> 00:07:43,300
If lots of questions remain it will be risky
to start work, but people might be

109
00:07:43,300 --> 00:07:47,240
comfortable taking on a story with only a
few minor questions to clear up

110
00:07:48,020 --> 00:07:50,920
Check this with a quick thumb-vote

111
00:07:53,380 --> 00:07:57,520
When we build software we're always
working across two domains

112
00:07:58,560 --> 00:08:04,460
There's the problem domain, where our customers and business stakeholders live

113
00:08:04,460 --> 00:08:07,240
and there's a solution domain

114
00:08:07,240 --> 00:08:10,560
where we solve those business problems
using technology

115
00:08:12,060 --> 00:08:15,680
Each domain has its own jargon
its own dialect

116
00:08:16,300 --> 00:08:20,880
That's fine: specialized language helps
domain experts to communicate

117
00:08:21,800 --> 00:08:26,400
Often though, this jargon can prevent us
from understanding one another across

118
00:08:26,400 --> 00:08:28,000
the two domains

119
00:08:29,280 --> 00:08:31,200
As BDD practitioners

120
00:08:31,200 --> 00:08:35,020
we're focussed on trying to grow
this area in the middle

121
00:08:35,020 --> 00:08:38,400
where we have a common or ubiquitous language

122
00:08:39,480 --> 00:08:42,920
We know that the bigger the
shared vocabulary is

123
00:08:42,920 --> 00:08:47,480
the quicker the team can communicate ideas 
between the business and technology

124
00:08:47,480 --> 00:08:49,060
facing sides of the team

125
00:08:50,840 --> 00:08:54,860
We've also heard it said
that if you model the problem well enough

126
00:08:54,860 --> 00:08:57,720
the solution will take care of itself

127
00:08:59,300 --> 00:09:02,460
Certainly we believe that the
better understanding you have of

128
00:09:02,460 --> 00:09:06,260
the problem domain
the better a solution you can build

129
00:09:07,220 --> 00:09:11,420
That's why Cucumber is so powerful
because it helps you to stay rooted

130
00:09:11,420 --> 00:09:12,620
in a problem domain

131
00:09:14,860 --> 00:09:17,780
So where do your feature files sit
on this diagram?

132
00:09:18,740 --> 00:09:21,860
Well, we hope they sit right in
the middle here and act as

133
00:09:21,860 --> 00:09:25,000
the place where the problem and solution
domains come together

134
00:09:26,260 --> 00:09:29,420
Someone from either domain should be 
able to read a feature file

135
00:09:29,420 --> 00:09:31,020
and it will make sense to them

136
00:09:32,740 --> 00:09:35,340
And how about step definitions?

137
00:09:35,340 --> 00:09:38,240
Step definitions are right on the boundary 
here

138
00:09:38,240 --> 00:09:42,639
translating between the problem domain language
we use in our Gherkin scenarios

139
00:09:42,640 --> 00:09:47,340
and the concrete actions we take in code
to pull and poke at our solution

140
00:09:48,880 --> 00:09:51,400
We want to prevent solution domain 
concepts and language

141
00:09:51,400 --> 00:09:55,380
from leaking into our gherkin scenarios
so that we keep them readable

142
00:09:56,180 --> 00:10:00,520
As we saw in the last lesson when we
remove details from scenarios

143
00:10:00,520 --> 00:10:04,120
we trade off for increased complexity in 
our step definitions

144
00:10:05,700 --> 00:10:07,680
So how do we manage this complexity?

145
00:10:09,500 --> 00:10:13,980
A mature Cucumber test suite will have a
layer of support code sitting between

146
00:10:13,980 --> 00:10:18,260
the step definitions and the system being 
automated

147
00:10:18,260 --> 00:10:22,400
This layer of support code
literally supports the step definitions

148
00:10:22,400 --> 00:10:25,960
by providing an API for automating
your application

149
00:10:26,740 --> 00:10:29,740
We can extract this API
from our step definitions

150
00:10:30,540 --> 00:10:33,720
Let's pick up the Shouty code base
and show you what we mean

151
00:10:34,820 --> 00:10:37,940
We need a new directory to contain our 
support code

152
00:10:37,940 --> 00:10:43,380
The conventional place to put it is here in a support directory underneath features

153
00:10:44,540 --> 00:10:48,800
There's a special file in support
that Cucumber always loads first called

154
00:10:48,800 --> 00:10:51,800
E N V or env.rb

155
00:10:52,920 --> 00:10:56,640
You can use this to boot up the system
that you're testing

156
00:10:56,640 --> 00:11:00,640
In this case, our system is just 
a domain model, but we can load it here

157
00:11:00,640 --> 00:11:03,160
instead of from the step definitions

158
00:11:03,160 --> 00:11:05,900
The most obvious duplication in the
step definition code is for

159
00:11:05,900 --> 00:11:07,620
Sean shouting a message

160
00:11:08,580 --> 00:11:11,180
Let's imagine we had
a helper method like this instead

161
00:11:12,180 --> 00:11:13,520
Wouldn't that be neater?

162
00:11:15,400 --> 00:11:20,120
Every time Cucumber runs a scenario
it creates a new object called the world

163
00:11:20,960 --> 00:11:24,120
Each step definition runs inside this
world object

164
00:11:24,120 --> 00:11:25,780
almost as though it were a method

165
00:11:26,960 --> 00:11:29,220
We can extend the methods available
on the world

166
00:11:29,220 --> 00:11:34,560
by first defining them on a ruby module then
registering that module with Cucumber

167
00:11:36,540 --> 00:11:40,660
We'll create a new file in the support directory
to contain our extensions to the world

168
00:11:43,220 --> 00:11:48,120
Now, we define a module and tell Cucumber
to make it part of the world

169
00:11:49,940 --> 00:11:53,800
Finally, we define our new helper method
on this module

170
00:11:53,800 --> 00:11:56,040
and paste in the code from the step definition

171
00:11:57,760 --> 00:12:00,580
Now let's run Cucumber
to check everything's still working

172
00:12:02,960 --> 00:12:03,760
Good

173
00:12:05,160 --> 00:12:07,960
Now we can use that new method 
everywhere...

174
00:12:12,320 --> 00:12:14,760
and check we haven't broken anything...

175
00:12:15,880 --> 00:12:16,640
done!

176
00:12:18,400 --> 00:12:23,120
Notice that the helper method we extracted 
still uses those instance variables

177
00:12:23,120 --> 00:12:26,260
people and messages_shouted_by

178
00:12:27,160 --> 00:12:31,000
This works because the helper methods
are mixed into the same world object

179
00:12:31,000 --> 00:12:35,240
as the step definitions so they can all
see these instance variables

180
00:12:36,280 --> 00:12:41,500
However, we don't like sharing state
across the support API boundary like this

181
00:12:42,160 --> 00:12:46,060
Things can get complicated quickly when
you have code spread all over your

182
00:12:46,060 --> 00:12:50,800
step definitions and support directory
that's depending on these instance variables

183
00:12:52,060 --> 00:12:55,500
It's better to push the state behind
the support API

184
00:12:56,600 --> 00:12:58,380
Let's start with the hash of people

185
00:12:59,580 --> 00:13:04,160
We'll define a new method on the world
that returns the people instance variable

186
00:13:04,160 --> 00:13:07,580
initializing it with an empty hash if it's
never been accessed before

187
00:13:09,340 --> 00:13:12,880
Now we can use this method everywhere
in the step definitions

188
00:13:12,880 --> 00:13:16,380
and we no longer need to initialize it
in this before hook

189
00:13:18,480 --> 00:13:20,780
Let's run Cucumber to check
we haven't broken anything

190
00:13:21,820 --> 00:13:22,720
Good

191
00:13:23,480 --> 00:13:26,740
Now we can do exactly the same thing
with messages_shouted_by

192
00:13:28,300 --> 00:13:34,720
First, create the helper method, then
replace the calls from the step definitions

193
00:13:36,500 --> 00:13:38,820
Now we can remove this
before hook altogether

194
00:13:40,820 --> 00:13:44,180
And finally, run Cucumber
to check we're still green

195
00:13:47,200 --> 00:13:49,760
We could continue to move code
from our step definitions

196
00:13:49,760 --> 00:13:51,740
into the support code like this

197
00:13:52,520 --> 00:13:53,520
For example,

198
00:13:53,520 --> 00:13:56,980
we could write a support method for 
generating messages of a certain length

199
00:13:58,500 --> 00:14:02,880
Ideally each step definition should only
contain one or two lines that delegate

200
00:14:02,880 --> 00:14:04,120
to your support code

201
00:14:05,160 --> 00:14:08,040
When you follow this principle your
step definitions become a

202
00:14:08,040 --> 00:14:11,180
translation layer from plain language
into code

203
00:14:12,360 --> 00:14:15,240
By keeping the vocabulary consistent
as you move across the

204
00:14:15,240 --> 00:14:17,320
problem-solution boundary

205
00:14:17,320 --> 00:14:21,200
you start to allow the scenarios
to drive the design of your domain model

206
00:14:22,120 --> 00:14:25,180
This is what we call modeling by example

207
00:14:27,600 --> 00:14:31,600
In this way we create our API for
automating our application

208
00:14:32,420 --> 00:14:37,480
As this API grows, it becomes
easier and easier to write new step definitions

209
00:14:37,480 --> 00:14:41,600
because the actions you need to take are 
already defined on the API

210
00:14:43,600 --> 00:14:47,600
It might seem like over engineering
on our little Shouty application but

211
00:14:47,600 --> 00:14:51,040
you'll be surprised how quickly
these test suites grow

212
00:14:51,040 --> 00:14:55,400
Taking time to stamp out complexity early
and organise your code to

213
00:14:55,400 --> 00:14:59,400
create a good support API is a great
investment for the future

214
00:15:00,540 --> 00:15:05,840
In a future lesson, we'll show you how
a well-crafted automation API like this

215
00:15:05,840 --> 00:15:09,460
lets you plug your scenarios into the
system at different levels

216
00:15:09,460 --> 00:15:11,200
such as a web front-end

217
00:15:12,560 --> 00:15:15,040
The other investment we showed you about
in this episode is the

218
00:15:15,040 --> 00:15:16,640
three amigos conversation

219
00:15:17,260 --> 00:15:21,580
Taking a little time to explore your
user story in a collaborative setting

220
00:15:21,580 --> 00:15:24,040
before you start to code it

221
00:15:24,040 --> 00:15:27,640
can save an enormous amount of
time and effort down the line

222
00:15:28,460 --> 00:15:32,760
Finding mistaken assumptions and
misunderstandings costs almost nothing

223
00:15:32,760 --> 00:15:35,380
when you're just pushing
pieces of card around the table

224
00:15:36,420 --> 00:15:41,420
As my grandma used to say 
'A stitch in time saves nine'

225
00:15:42,420 --> 00:15:46,720
It might feel like an overhead to have these 
three amigos meetings for every story

226
00:15:46,720 --> 00:15:48,640
but we think you'll be surprised

227
00:15:48,640 --> 00:15:52,700
how much you can discover
from just that 25 minute conversation

228
00:15:53,780 --> 00:15:54,960
Give it a try!

229
00:15:56,300 --> 00:15:59,620
And I'll see you next time on
Cucumber School

230
00:16:01,060 --> 00:16:03,000
Captions created by Jayson Smith for Cucumber Ltd.
