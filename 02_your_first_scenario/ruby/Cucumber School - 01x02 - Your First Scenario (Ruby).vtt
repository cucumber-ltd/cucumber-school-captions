1
00:00:15,020 --> 00:00:18,960
Hello, and welcome to the second lesson
here at Cucumber School!

2
00:00:19,720 --> 00:00:23,900
Last time we learned how to use
conversations about concrete examples

3
00:00:23,900 --> 00:00:27,720
to explore your problem domain
and decide what to build

4
00:00:28,420 --> 00:00:32,816
In this episode, you'll learn how to
describe those examples using the

5
00:00:32,816 --> 00:00:36,864
Gherkin specification language
so that Cucumber can run them

6
00:00:37,376 --> 00:00:42,240
Then, we'll drive out a solution using
a failing Cucumber scenario to guide us

7
00:00:43,000 --> 00:00:45,680
There's going to be a fair amount
of programming in this episode

8
00:00:45,680 --> 00:00:49,000
and some object-oriented design as well

9
00:00:49,000 --> 00:00:52,800
We want this to feel real,
so we'll work on something fun

10
00:00:52,800 --> 00:00:54,980
A social networking application!

11
00:00:55,800 --> 00:01:02,000
Shouty is a social network that allows
people who are physically close to communicate

12
00:01:02,000 --> 00:01:04,500
just like people have always communicated

13
00:01:04,500 --> 00:01:06,860
with their voices

14
00:01:06,860 --> 00:01:08,500
In the real world you can talk to someone

15
00:01:08,500 --> 00:01:10,580
in the same room or across the street

16
00:01:10,580 --> 00:01:13,700
or even a hundred metres
away from you in a park

17
00:01:13,700 --> 00:01:15,520
if you shout

18
00:01:16,040 --> 00:01:17,580
That's Shouty!

19
00:01:17,580 --> 00:01:22,940
What you say in this social network
can only be heard by people who are nearby

20
00:01:24,480 --> 00:01:28,080
Let's start with a very basic example
of Shouty's behaviour

21
00:01:28,080 --> 00:01:31,640
Something we might have discussed
in a Three Amigos meeting

22
00:01:33,440 --> 00:01:37,700
Sean the shouter shouts, 
"Free bagels at Sean's!"

23
00:01:37,700 --> 00:01:39,340
And Lucy the listener

24
00:01:39,340 --> 00:01:44,480
who happens to be stood across the street
from his store 15 metres away, hears him

25
00:01:44,480 --> 00:01:49,060
She walks into Sean's coffee shop
and takes advantage of the offer

26
00:01:50,592 --> 00:01:55,200
We can translate this into a Gherkin scenario
so that Cucumber can run it

27
00:01:57,000 --> 00:01:58,500
Here's how that would look

28
00:01:59,560 --> 00:02:02,900
You can see that there are four
special keywords being used here

29
00:02:02,900 --> 00:02:08,260
Scenario just tells Cucumber we're about
to describe an example that it can execute

30
00:02:09,280 --> 00:02:13,888
Then you see the lines beginning with
Given, When, and Then

31
00:02:14,920 --> 00:02:19,280
Given is the context for the scenario

32
00:02:19,280 --> 00:02:25,140
We're putting the system into a specific state
ready for the scenario to unfold

33
00:02:26,176 --> 00:02:28,224
When is the action

34
00:02:28,992 --> 00:02:34,880
Something that happens to the system that will
cause something else to happen: an outcome

35
00:02:36,420 --> 00:02:38,460
Then is the outcome

36
00:02:39,100 --> 00:02:45,400
It's the behaviour we expect from the system
when this action happens in this context

37
00:02:48,780 --> 00:02:51,400
You'll notice we've omitted from our outcome

38
00:02:51,400 --> 00:02:55,300
anything about Lucy walking into Sean's
store and making a purchase

39
00:02:55,300 --> 00:02:57,800
Remember, Gherkin is supposed to
describe the behaviour of the system

40
00:02:57,800 --> 00:03:01,800
so it would be distracting to have
that detail in our scenario

41
00:03:02,920 --> 00:03:10,200
Each scenario has these three ingredients:
a context, an action, and one or more outcomes

42
00:03:10,720 --> 00:03:16,860
Together, they describe one single aspect
of the behaviour of the system

43
00:03:18,180 --> 00:03:21,000
Now that we've translated our
example into Gherkin

44
00:03:21,000 --> 00:03:22,752
we can automate it

45
00:03:24,540 --> 00:03:26,480
Before we get started

46
00:03:26,480 --> 00:03:30,800
make sure you have a modern version
of Ruby installed and the Bundler gem

47
00:03:31,460 --> 00:03:33,540
Open a command prompt and type

48
00:03:37,980 --> 00:03:40,600
If you see an error message
when you run these commands

49
00:03:40,600 --> 00:03:42,980
you'll need to fix your Ruby installation

50
00:03:44,150 --> 00:03:48,096
Go back to the command prompt
and create a new directory for our project

51
00:03:50,660 --> 00:03:55,520
Use 'cd' to go into that directory
and open it up in your editor

52
00:03:58,700 --> 00:04:03,260
First, we'll create a gemfile that describes
the Ruby gems we need for our project

53
00:04:04,240 --> 00:04:09,100
We'll add Cucumber and RSpec expectations

54
00:04:10,880 --> 00:04:14,140
Now go back to the command line
and run 'bundle install'

55
00:04:14,140 --> 00:04:16,000
to install these gems

56
00:04:17,520 --> 00:04:18,960
Now we're ready!

57
00:04:18,960 --> 00:04:22,500
If we run Cucumber at this point
you'll see it's telling us

58
00:04:22,500 --> 00:04:25,060
to create a features directory

59
00:04:25,060 --> 00:04:28,740
That's the conventional place to
store your Gherkin specifications

60
00:04:28,740 --> 00:04:30,080
Let's create one

61
00:04:32,640 --> 00:04:35,140
Now we're ready to create our
first feature file

62
00:04:36,180 --> 00:04:39,400
Call the file shouty.feature

63
00:04:41,740 --> 00:04:47,360
All feature files start with the keyword
feature followed by a name

64
00:04:47,360 --> 00:04:50,560
It's a good convention to give it
a name that matches the file name

65
00:04:52,100 --> 00:04:54,400
Now let's write out our first scenario

66
00:05:09,200 --> 00:05:12,320
Switch back to the command prompt
and run 'cucumber'

67
00:05:13,200 --> 00:05:17,660
You'll see Cucumber has found
a feature file and read it back to us

68
00:05:17,660 --> 00:05:20,260
We can see a summary of
the results at the bottom:

69
00:05:20,260 --> 00:05:24,920
three steps, one scenario, all undefined

70
00:05:25,640 --> 00:05:28,620
Undefined means Cucumber
doesn't know what to do

71
00:05:28,620 --> 00:05:31,780
for any of the three steps
we wrote in our Gherkin scenario

72
00:05:33,340 --> 00:05:37,100
It needs us to provide it with
some step definitions

73
00:05:37,100 --> 00:05:40,100
Step definitions translate
from the plain language

74
00:05:40,100 --> 00:05:43,300
you use in Gherkin, into code

75
00:05:44,500 --> 00:05:48,420
When Cucumber runs a step
it looks for a step definition

76
00:05:48,420 --> 00:05:50,600
that matches the text in the step

77
00:05:51,480 --> 00:05:55,560
If it finds one, then it
executes the code in the step definition

78
00:05:56,300 --> 00:05:58,220
If it doesn't find one

79
00:05:58,220 --> 00:06:00,700
well you've just seen what happens

80
00:06:00,700 --> 00:06:04,060
Cucumber helpfully prints out
some code snippets that we can use

81
00:06:04,060 --> 00:06:07,020
as a basis for new step definitions

82
00:06:07,020 --> 00:06:08,640
Let's copy these

83
00:06:09,920 --> 00:06:14,400
We'll paste them into a Ruby file
under a new directory called

84
00:06:14,400 --> 00:06:16,660
step_definitions

85
00:06:16,660 --> 00:06:18,340
underneath the features directory

86
00:06:19,220 --> 00:06:22,460
I'll just call it 'steps.rb'

87
00:06:23,780 --> 00:06:25,280
Now run Cucumber again

88
00:06:26,760 --> 00:06:29,240
This time the output is a little different

89
00:06:29,880 --> 00:06:34,020
We now have a pending step
and two skipped ones

90
00:06:34,020 --> 00:06:39,160
This means Cucumber found all our
step definitions and executed the first one

91
00:06:39,160 --> 00:06:42,340
But that first step definition
throws a Pending exception

92
00:06:42,340 --> 00:06:46,080
which causes Cucumber to stop,
skip the rest of the steps

93
00:06:46,080 --> 00:06:48,580
and mark the scenario as pending

94
00:06:49,860 --> 00:06:52,320
It's time to work on our solution

95
00:06:52,320 --> 00:06:55,420
At this point we need to do
a little domain modeling

96
00:06:55,420 --> 00:06:58,360
The words in the step
provide us some good hints

97
00:06:58,360 --> 00:07:01,820
about some names that
will appear in our domain model

98
00:07:01,820 --> 00:07:04,800
Our scenario mentions
two people Lucy and Sean

99
00:07:04,800 --> 00:07:09,000
so it looks like we'll need
a couple of person objects at least

100
00:07:09,000 --> 00:07:12,380
Each person will also need to
know their own location

101
00:07:14,100 --> 00:07:16,740
Cucumber is telling us to
write the code we wish we had

102
00:07:16,740 --> 00:07:17,760
Let's do it!

103
00:07:18,720 --> 00:07:23,140
Start by renaming the 'arg1' parameter
to something that better reflects its meaning

104
00:07:24,120 --> 00:07:25,760
We'll call it distance

105
00:07:27,480 --> 00:07:29,580
To keep things simple 
we're going to assume

106
00:07:29,580 --> 00:07:31,580
all people are situated on a line

107
00:07:32,351 --> 00:07:34,655
A one-dimensional coordinate system

108
00:07:35,423 --> 00:07:38,495
We can always introduce proper geo locations later

109
00:07:39,000 --> 00:07:40,700
We'll place Sean in the center

110
00:07:40,700 --> 00:07:43,360
and Lucy 15 metres away from Sean

111
00:07:45,400 --> 00:07:49,240
Notice that the number 15
does not appear anywhere in our code

112
00:07:49,240 --> 00:07:55,180
The value 15 is automatically passed
from the Gherkin step into the step definition

113
00:07:55,180 --> 00:07:56,460
If you're curious

114
00:07:56,460 --> 00:08:00,760
that's the '\d' in the
pattern of the step definition

115
00:08:01,580 --> 00:08:05,120
We'll explain regular expressions
in detail in a future lesson

116
00:08:08,200 --> 00:08:10,860
To implement this step
we need to create a couple of

117
00:08:10,860 --> 00:08:14,340
person objects with
the specified distance between them

118
00:08:14,340 --> 00:08:15,880
We could write it like this

119
00:08:18,320 --> 00:08:22,360
Now we have two instances
of person one representing Lucy

120
00:08:22,360 --> 00:08:24,320
and one representing Sean

121
00:08:24,840 --> 00:08:28,740
If you run Cucumber we'll see
a compilation error from Ruby

122
00:08:28,740 --> 00:08:31,220
We need to define our person class

123
00:08:33,020 --> 00:08:36,620
Let's give our solution a home
by creating a 'lib' directory

124
00:08:36,620 --> 00:08:42,740
We'll put our Shouty application
in a Ruby file called 'shouty.rb' in that directory

125
00:08:44,040 --> 00:08:47,060
Create the bare bones of our person

126
00:08:47,060 --> 00:08:52,100
just enough to satisfy the API
that we know we need

127
00:08:52,100 --> 00:08:55,300
from the code we've written
in our step definitions

128
00:08:57,660 --> 00:09:03,000
For now, we'll just require the
Shouty application from our 'steps.rb' file

129
00:09:03,000 --> 00:09:07,340
In a later lesson, we'll talk more
about how to organize this code a bit better

130
00:09:09,375 --> 00:09:14,239
When we run the scenario again
the first step is green!

131
00:09:17,060 --> 00:09:20,120
We'll follow the same flow
to make the remaining two steps pass

132
00:09:20,120 --> 00:09:24,200
do a little bit of domain modeling,
write the code we wish we had,

133
00:09:24,200 --> 00:09:26,800
make it compile, and run the scenario

134
00:09:28,920 --> 00:09:33,060
In the second step definition,
we want to tell Sean to shout something

135
00:09:36,480 --> 00:09:41,900
In order to send instructions to Sean,
we need to store him in an instance variable

136
00:09:41,900 --> 00:09:46,940
so that he'll be accessible
from all of our definitions, like this

137
00:09:53,740 --> 00:09:56,740
Our Person class needs a 'shout' method

138
00:09:57,400 --> 00:09:58,380
Let's add it!

139
00:10:00,520 --> 00:10:02,900
Don't worry about the implementation yet

140
00:10:02,900 --> 00:10:07,480
The important thing right now is to
discover the shape of our domain model

141
00:10:08,900 --> 00:10:13,240
The last step definition is where
we implement the check or assertion

142
00:10:13,240 --> 00:10:15,500
We'll verify that what Lucy has heard

143
00:10:15,500 --> 00:10:18,500
is exactly the same as what Sean shouted

144
00:10:21,000 --> 00:10:23,360
Once again we're going to
write the code we wish we had

145
00:10:24,480 --> 00:10:29,000
So we need a way to ask Lucy
what messages she's heard

146
00:10:29,000 --> 00:10:33,620
and we also need to know
what it was that Sean shouted

147
00:10:33,620 --> 00:10:39,240
We can record what Sean shouts
by storing it an instance variable

148
00:10:39,240 --> 00:10:41,880
as the When step runs

149
00:10:41,880 --> 00:10:44,400
This is a common pattern to use
in Cucumber step definitions

150
00:10:44,400 --> 00:10:47,900
when you don't want to repeat
the same test data in different

151
00:10:47,900 --> 00:10:49,471
parts of a scenario

152
00:10:50,495 --> 00:10:53,567
Now we can use that value in the assertion check

153
00:10:54,847 --> 00:10:59,199
We also need to add a 'messages_heard'
method to our Person class

154
00:10:59,711 --> 00:11:00,991
Let's do that now

155
00:11:05,080 --> 00:11:08,000
We run Cucumber again and

156
00:11:08,000 --> 00:11:09,600
and whoops!

157
00:11:10,980 --> 00:11:15,600
Undefined method 'messages_heard'
for nil class steps line 15

158
00:11:15,600 --> 00:11:22,560
It looks like we forgot to set Lucy as an
instance variable

159
00:11:24,300 --> 00:11:29,420
Let's fix that and run the test again

160
00:11:33,200 --> 00:11:35,340
This is great!

161
00:11:35,340 --> 00:11:40,760
Whenever we do BDD, getting to our
first failing test is a milestone

162
00:11:40,760 --> 00:11:46,760
Seeing the test fail, proves that it is
capable of detecting errors in our code

163
00:11:46,760 --> 00:11:51,940
Never trust an automated test that
you haven't seen fail!

164
00:11:53,460 --> 00:11:57,120
Now all we have to do is write
the code to make it pass

165
00:11:57,120 --> 00:11:58,680
That's the easy bit!

166
00:12:00,120 --> 00:12:02,940
In this case we're going to cheat

167
00:12:04,220 --> 00:12:08,140
We have a one line fix that will
make the scenario pass

168
00:12:08,140 --> 00:12:10,300
It's not a particularly

169
00:12:10,300 --> 00:12:12,671
future-proof implementation

170
00:12:13,960 --> 00:12:15,500
Can you guess what it is?

171
00:12:18,760 --> 00:12:20,260
I'll show you

172
00:12:21,640 --> 00:12:24,720
Hmm, there. I told you it
wasn't very future-proof!

173
00:12:25,480 --> 00:12:30,860
Still, the fact that such a poor
implementation can pass our tests

174
00:12:30,860 --> 00:12:33,860
shows us that we need to work on our tests

175
00:12:33,860 --> 00:12:36,100
A more comprehensive set of scenarios would

176
00:12:36,100 --> 00:12:38,780
force us to write a better implementation

177
00:12:40,340 --> 00:12:43,480
This is the essence of
behaviour-driven development

178
00:12:43,480 --> 00:12:46,720
Examples of behaviour drive the development

179
00:12:49,280 --> 00:12:52,920
So we know we need more scenarios
and a better solution

180
00:12:52,920 --> 00:12:56,959
Instead of writing a note on our to-do list
let's write another failing scenario

181
00:13:00,040 --> 00:13:03,120
Now when we come back to this code
we can just run the tests

182
00:13:03,120 --> 00:13:06,360
and Cucumber will remind us
what we need to do next

183
00:13:06,360 --> 00:13:08,280
We're done for the day!

184
00:13:08,280 --> 00:13:10,200
Go make yourself a cup of tea

185
00:13:12,000 --> 00:13:14,000
Captions created by Jayson Smith for Cucumber Ltd.
