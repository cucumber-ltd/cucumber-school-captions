WEBVTT

1
00:00:14.848 --> 00:00:19.200
Hello and welcome to the second lesson
here at Cucumber School

2
00:00:19.712 --> 00:00:25.856
Last time we, learned how to use
conversations about concrete examples to 

3
00:00:26.112 --> 00:00:27.648
explore your problem domain
and decide what to build

4
00:00:28.416 --> 00:00:34.560
In this episode you'll learn how to describe those examples using the Gherkin specification language

5
00:00:34.816 --> 00:00:36.864
So that Cucumber can run them

6
00:00:37.376 --> 00:00:42.240
Then we'll drive out a solution using a failing Cucumber scenario to guide us

7
00:00:43.008 --> 00:00:48.640
It's going to be a fair amount of programming in this episode and some object-oriented design as well

8
00:00:48.896 --> 00:00:52.480
We want this to feel real so we'll work on something fun

9
00:00:52.736 --> 00:00:55.040
A social networking application

10
00:00:55.808 --> 00:01:01.952
Shouty is a social network that allows people who are physically close to communicate

11
00:01:02.208 --> 00:01:08.352
Just like people have always communicated with the voices

In the real world you can talk to

12
00:01:08.608 --> 00:01:13.216
Someone in the same room or across the street or even a hundred meters away from you in a park

13
00:01:13.728 --> 00:01:15.520
If you shout

14
00:01:16.032 --> 00:01:17.312
That's Shouty!

15
00:01:17.568 --> 00:01:22.944
What you saying this social network can only be heard by people who are nearby

16
00:01:24.480 --> 00:01:27.808
Let's start with a very basic example of Shouty's behavior

17
00:01:28.064 --> 00:01:31.648
Something we might have discussed in a Three Amigos meeting

18
00:01:33.440 --> 00:01:39.584
Sean the shouter shouts, "Free Bagels at Sean's!" and Lucy the listener

19
00:01:39.840 --> 00:01:45.984
Who happens to be stood across the street from the store 15 meters away hears him she walks into Sean's

20
00:01:46.240 --> 00:01:49.056
Coffee shop and takes advantage of the offer

21
00:01:50.592 --> 00:01:55.200
We can translate this into a Gherkin scenario so that Cucumber can run it

22
00:01:56.992 --> 00:01:58.272
Here's how that would look

23
00:01:59.552 --> 00:02:02.624
You can see that there are four special keywords being used here

24
00:02:02.880 --> 00:02:08.256
Scenario just tells Cucumber we're about to describe an example that it can execute

25
00:02:09.280 --> 00:02:13.888
Then you see the lines beginning with given, when, and  then

26
00:02:14.912 --> 00:02:15.936
Given

27
00:02:16.192 --> 00:02:19.008
is the context for the scenario

28
00:02:19.264 --> 00:02:25.152
We're putting the system into a specific state ready for the scenario to unfold

29
00:02:26.176 --> 00:02:28.224
When is the action

30
00:02:28.992 --> 00:02:34.880
Something that happens to the system that will cause something else to happen: an outcome

31
00:02:36.416 --> 00:02:38.464
Then is the outcome

32
00:02:38.976 --> 00:02:45.120
It's the behavior we expect from the system when this action happens in this context

33
00:02:46.144 --> 00:02:52.288
You'll notice we've omitted from our outcome anything about Lucy

34
00:02:52.544 --> 00:02:54.848
Walking into Sean's store making a purchase

35
00:02:55.360 --> 00:03:01.504
Remember Gherkin is supposed to describe the behavior of the system it would be distracting to have that detail in our scenario

36
00:03:02.784 --> 00:03:08.928
Each scenario has these three ingredients: a context, an action, and one or more

37
00:03:09.184 --> 00:03:10.208
Outcomes

38
00:03:10.720 --> 00:03:16.864
Together they describe one single aspect of the behavior of the system

39
00:03:17.888 --> 00:03:20.960
Now that we've translated are examples into Gherkin

40
00:03:21.216 --> 00:03:22.752
We can automate it

41
00:03:24.544 --> 00:03:30.688
Before we get started make sure you have a modern version of Ruby installed and the Bundler gem

42
00:03:31.456 --> 00:03:33.504
Open a command prompt type

43
00:03:37.856 --> 00:03:42.976
If you see an error message when you run these commands you'll need to fix your Ruby installation

44
00:03:44.256 --> 00:03:48.096
Go back to the command prompt and create a new directory for our project

45
00:03:50.656 --> 00:03:55.520
Use 'cd' to go into that directory and open it up in your editor

46
00:03:57.312 --> 00:04:03.456
First, we'll create a gemfile that describes the Ruby gems we need for our project

47
00:04:03.712 --> 00:04:09.088
We'll add Cucumber and RSpec expectations

48
00:04:10.880 --> 00:04:16.000
Now go back to the command line and run 'bundle install' to install these gems

49
00:04:17.536 --> 00:04:23.679
Now we're ready. if we run Cucumber at this point you'll see its telling us to create a features

50
00:04:23.935 --> 00:04:24.703
directory

51
00:04:24.959 --> 00:04:28.543
That's the conventional place to store your Gherkin specifications

52
00:04:28.799 --> 00:04:30.079
Let's create one

53
00:04:32.639 --> 00:04:35.455
Now we're ready to create our first feature file

54
00:04:35.967 --> 00:04:39.551
Call the file 'Shouty.feature'

55
00:04:41.599 --> 00:04:44.927
All feature files start with the keyword 'feature'

56
00:04:45.439 --> 00:04:46.975
Followed by a name

57
00:04:47.231 --> 00:04:50.559
It's a good convention to give it a name that matches the file name

58
00:04:52.095 --> 00:04:54.399
Now let's write out our first scenario

59
00:05:08.479 --> 00:05:12.319
Switch back to the command prompt and run 'cucumber'

60
00:05:13.343 --> 00:05:17.439
You'll see Cucumber has found a feature file and read it back to us

61
00:05:17.695 --> 00:05:19.999
We can see a summary of the results at the bottom

62
00:05:20.255 --> 00:05:25.119
Three steps, one scenario, all undefined

63
00:05:25.631 --> 00:05:31.775
Undefined means Cucumber doesn't know what to do for any of the three steps we wrote in our Gherkin scenario

64
00:05:33.055 --> 00:05:36.895
It needs us to provide it with some step definitions

65
00:05:37.151 --> 00:05:42.015
Step definitions translate in the plain language using Gherkin

66
00:05:42.271 --> 00:05:43.295
Entry code

67
00:05:44.319 --> 00:05:50.463
When kicking a Runza step it looks for a step definition of matches the text in the step

68
00:05:51.487 --> 00:05:55.839
If it finds one that executes the code in the steppe definition

69
00:05:56.095 --> 00:05:57.631
If it doesn't find one

70
00:05:58.143 --> 00:06:00.191
Well you just see what happens

71
00:06:00.703 --> 00:06:06.847
Cucumber Health Lake Prince house in code Snippets that we can use as a basis for new Step definitions

72
00:06:07.103 --> 00:06:08.639
Let's copy days

73
00:06:09.919 --> 00:06:16.063
Pasting into a ruby file under new directory step definitions

74
00:06:16.575 --> 00:06:18.623
Underneath the feature directory

75
00:06:19.135 --> 00:06:22.463
I'll just call it steps that I'll be

76
00:06:23.743 --> 00:06:25.279
Now run Cucumber again

77
00:06:25.791 --> 00:06:29.375
This time the output is a little different

78
00:06:29.887 --> 00:06:36.031
We now have a pending step onto skipped ones

79
00:06:36.287 --> 00:06:38.847
Set definitions that executes the first one

80
00:06:39.103 --> 00:06:45.247
That first step definition throes of pending exception which causes Cucumber to stop skip the rest of this

81
00:06:45.503 --> 00:06:48.575
The steps with scenario as pending

82
00:06:49.855 --> 00:06:51.903
It's time to work on a solution

83
00:06:52.159 --> 00:06:54.975
At this point we need to do a little Divine modeling

84
00:06:55.231 --> 00:07:01.119
The words in the step provided some good hints about some names that will appear in all the main model

85
00:07:01.631 --> 00:07:07.775
A scenario mentions two people Lucy and Sean so it looks like we'll need a couple of person object

86
00:07:08.031 --> 00:07:08.543
List

87
00:07:08.799 --> 00:07:12.383
Each person will also need to know their own location

88
00:07:13.919 --> 00:07:17.759
Cucumbers telling us to write the code we wish we had let's do it

89
00:07:18.527 --> 00:07:23.391
Stop by renaming the odd one parameter to something about the reflexes meaning

90
00:07:23.903 --> 00:07:25.951
We'll call it distance

91
00:07:27.487 --> 00:07:31.583
To keep things simple we're going to assume old people situation on the line

92
00:07:32.351 --> 00:07:34.655
One-dimensional coordinate system

93
00:07:35.423 --> 00:07:38.495
We can always introduce proper geolocations later

94
00:07:39.007 --> 00:07:43.359
What play shown in the center and Lucy 15 minutes away from Sean

95
00:07:45.407 --> 00:07:48.735
Notice that the number 15 does not pair anywhere knock code

96
00:07:49.247 --> 00:07:54.879
The value 15 is automatically passed from The Collection step into the step definition

97
00:07:55.135 --> 00:08:00.767
If you're curious that's the backslash D in the pound of the steppe definition

98
00:08:01.535 --> 00:08:05.119
What explain regular expressions in detail in a future lesson

99
00:08:08.191 --> 00:08:14.079
Infamous step we need to create a couple of personal checks with the specified distance between them

100
00:08:14.335 --> 00:08:15.871
We could write it like this

101
00:08:18.175 --> 00:08:22.271
Now we have two instances of person one representing Lucy

102
00:08:22.527 --> 00:08:24.319
And 1 representing Sean

103
00:08:24.831 --> 00:08:28.415
If you run Cucumber will see a compilation of a ruby

104
00:08:28.671 --> 00:08:31.231
We need to define a person class

105
00:08:33.023 --> 00:08:36.351
Let's give a solution to home by creating a lib directory

106
00:08:36.607 --> 00:08:42.751
Put Bachata application in a ruby file called shouting and not directory

107
00:08:44.031 --> 00:08:46.591
Create bad bones about person

108
00:08:47.103 --> 00:08:53.247
Just enough to satisfy the API that we know we need from the code

109
00:08:53.503 --> 00:08:55.295
Gnostic definitions

110
00:08:57.599 --> 00:09:02.719
So now we'll just require the shout out application for my steps to avi file

111
00:09:02.975 --> 00:09:07.327
And I like to listen we'll talk more about how to organize this code a bit better

112
00:09:09.375 --> 00:09:14.239
When we run the scenario again the first step is green

113
00:09:17.055 --> 00:09:23.199
What's are the same flight to make the remaining two-step spiced lentil pasta made modeling write the code

114
00:09:23.455 --> 00:09:26.783
Sweetheart I should compile and run the scenario

115
00:09:28.831 --> 00:09:33.183
The Second Step definition we want to tell Sean to shout something

116
00:09:36.511 --> 00:09:41.887
In order to send instructions to Shone we need to steal him in an instance variable

117
00:09:42.143 --> 00:09:47.775
So that he'll be accessible from all of us that definitions like this

118
00:09:53.663 --> 00:09:56.735
A person class needs a shout

119
00:09:57.503 --> 00:09:58.271
That's not it

120
00:10:00.319 --> 00:10:02.367
Don't worry about the implementation yet

121
00:10:02.623 --> 00:10:07.487
Important thing right now is to discover the shape of out the main level

122
00:10:08.767 --> 00:10:14.911
Elastic definition is why we implemented check or assertion will verify that what

123
00:10:15.167 --> 00:10:18.495
Is exactly the same as what showing shouted

124
00:10:20.799 --> 00:10:23.359
Once again we're going to write the code we wish we had

125
00:10:24.383 --> 00:10:28.735
So we need to wait ask Lucy what messages she's heard

126
00:10:29.247 --> 00:10:33.087
I also need to know what it was the show and shouted

127
00:10:33.599 --> 00:10:38.975
I can record what Sean shouts by storing it's an instance variable

128
00:10:39.231 --> 00:10:41.279
Astor wines that runs

129
00:10:41.791 --> 00:10:47.935
This is a common pain to using Cucumber step definitions when you don't want to repeat the same test dates and different

130
00:10:48.191 --> 00:10:49.471
Possible scenario

131
00:10:50.495 --> 00:10:53.567
Now we can use that value in this session check

132
00:10:54.847 --> 00:10:59.199
We also need to add a messages method in class

133
00:10:59.711 --> 00:11:00.991
That's too hot now

134
00:11:05.087 --> 00:11:07.647
Aaron can you come by again

135
00:11:07.903 --> 00:11:09.951
Oops

136
00:11:10.207 --> 00:11:16.351
Personnel class steps line 15 it looks like

137
00:11:16.607 --> 00:11:17.375
Like

138
00:11:17.631 --> 00:11:23.775
We forgot to set Lucy as an instance variable

139
00:11:24.031 --> 00:11:29.407
It's fixed. And run the test again

140
00:11:32.991 --> 00:11:35.039
This is great

141
00:11:35.295 --> 00:11:41.439
Whatever we do baby dancing to our first failing test is a milestone seeing the

142
00:11:41.695 --> 00:11:46.303
Text file that is capable of detecting errors in a code

143
00:11:46.559 --> 00:11:51.935
Never trust an automated test that you haven't seen fail

144
00:11:53.471 --> 00:11:56.799
Now all we have to do is write the code to make it pass

145
00:11:57.055 --> 00:11:58.591
That's the easy path

146
00:12:00.127 --> 00:12:02.943
In this case we're going to cheat

147
00:12:04.223 --> 00:12:07.295
I have a 1 line fix it would make the scenario Pais

148
00:12:08.063 --> 00:12:10.111
It's not a particularly

149
00:12:10.367 --> 00:12:12.671
Future-proof implementation

150
00:12:13.951 --> 00:12:15.487
Can you guess what it is

151
00:12:18.815 --> 00:12:19.839
I'll show you

152
00:12:21.631 --> 00:12:24.703
I told you it wasn't very future-proof

153
00:12:25.471 --> 00:12:26.239
Still

154
00:12:26.751 --> 00:12:30.591
If I was such a poem limitation can pass our test

155
00:12:30.847 --> 00:12:33.407
Shows us that we need to work on a text

156
00:12:33.919 --> 00:12:38.783
Mo comprehensive set of scenario is what forces to write a better implementation

157
00:12:40.319 --> 00:12:43.135
This is the essence of behavior driven development

158
00:12:43.391 --> 00:12:46.719
Examples of behavior Drive the development

159
00:12:49.279 --> 00:12:55.423
So we know we need more scenarios in a better solution instead of writing a to-do list that's right

160
00:12:55.679 --> 00:12:56.959
Another failing scenario

161
00:13:00.031 --> 00:13:05.919
Now let me come back to this code we can just run the test and keep them all remind us what we need to do next

162
00:13:06.431 --> 00:13:07.711
With them for the day

163
00:13:08.223 --> 00:13:10.015
Go make yourself a cup of tea
