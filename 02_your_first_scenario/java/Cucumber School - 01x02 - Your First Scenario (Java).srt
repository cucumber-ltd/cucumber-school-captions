1
00:00:15,080 --> 00:00:18,860
Hello and welcome to the second lesson
here at Cucumber School

2
00:00:19,800 --> 00:00:24,060
Last time we learned how to use
conversations about concrete examples

3
00:00:24,060 --> 00:00:27,640
to explore your problem domain
and decide what to build

4
00:00:28,600 --> 00:00:32,816
In this episode you'll learn how to
describe those examples using the

5
00:00:32,816 --> 00:00:36,864
Gherkin specification language
so that Cucumber can run them

6
00:00:37,376 --> 00:00:42,240
Then, we'll drive out a solution using
a failing Cucumber scenario to guide us

7
00:00:43,008 --> 00:00:45,500
There's going to be a fair amount
of programming in this episode

8
00:00:45,500 --> 00:00:48,480
and some object-oriented design as well

9
00:00:48,980 --> 00:00:52,740
We want this to feel real
so we'll work on something fun

10
00:00:52,740 --> 00:00:55,040
A social networking application!

11
00:00:55,740 --> 00:01:01,940
Shouty is a social network that allows
people who are physically close to communicate

12
00:01:01,940 --> 00:01:04,500
just like people have always communicated

13
00:01:04,500 --> 00:01:06,640
with their voices

14
00:01:06,640 --> 00:01:08,460
In the real world you can talk to someone

15
00:01:08,460 --> 00:01:10,340
in the same room or across the street

16
00:01:10,340 --> 00:01:13,620
or even a hundred metres
away from you in a park

17
00:01:13,620 --> 00:01:15,520
if you shout

18
00:01:16,040 --> 00:01:17,500
That's Shouty!

19
00:01:17,500 --> 00:01:22,940
What you say in this social network
can only be heard by people who are nearby

20
00:01:24,480 --> 00:01:28,020
Let's start with a very basic example
of Shouty's behaviour

21
00:01:28,020 --> 00:01:31,640
Something we might have discussed
in a Three Amigos meeting

22
00:01:33,600 --> 00:01:37,640
Sean the shouter shouts
"Free bagels at Sean's!"

23
00:01:37,640 --> 00:01:39,340
And Lucy the listener

24
00:01:39,340 --> 00:01:44,460
who happens to be stood across the street
from his store 15 metres away, hears him

25
00:01:44,460 --> 00:01:48,840
She walks into Sean's coffee shop
and takes advantage of the offer

26
00:01:50,600 --> 00:01:54,980
We can translate this into a Gherkin scenario
so that Cucumber can run it

27
00:01:57,000 --> 00:01:58,280
Here's how that would look

28
00:02:00,700 --> 00:02:03,980
You can see that there are four
special keywords being used here

29
00:02:03,980 --> 00:02:10,200
Scenario just tells Cucumber we're about
to describe an example that it can execute

30
00:02:10,200 --> 00:02:14,820
Then you see the lines beginning with
Given, When, and Then

31
00:02:16,160 --> 00:02:20,380
Given is the context for the scenario

32
00:02:20,380 --> 00:02:26,100
We're putting the system into a specific state
ready for the scenario to unfold

33
00:02:27,220 --> 00:02:29,200
When is the action

34
00:02:29,980 --> 00:02:35,920
Something that happens to the system that will
cause something else to happen: an outcome

35
00:02:37,420 --> 00:02:40,060
Then is the outcome

36
00:02:40,060 --> 00:02:46,460
It's the behaviour we expect from the system
when this action happens in this context

37
00:02:49,820 --> 00:02:53,200
You'll notice we've omitted from our outcome
anything about Lucy

38
00:02:53,200 --> 00:02:56,360
walking into Sean's store and making a purchase

39
00:02:56,360 --> 00:02:59,000
Remember, Gherkin is supposed to
describe the behaviour of the system

40
00:02:59,000 --> 00:03:02,820
so it would be distracting to have
that detail in our scenario

41
00:03:03,940 --> 00:03:11,760
Each scenario has these three ingredients:
a context, an action, and one or more outcomes

42
00:03:11,760 --> 00:03:17,920
Together, they describe one single aspect
of the behaviour of the system

43
00:03:19,160 --> 00:03:22,180
Now that we've translated our
example into Gherkin

44
00:03:22,180 --> 00:03:23,640
we can automate it

45
00:03:26,340 --> 00:03:29,480
The easiest way to get started
with Cucumber for Java is to

46
00:03:29,480 --> 00:03:31,600
use a template project with a build script

47
00:03:31,600 --> 00:03:33,500
that sets everything up correctly

48
00:03:34,272 --> 00:03:37,088
You can download this template project from GitHub

49
00:03:37,856 --> 00:03:43,232
Open your web browser and go to the
'cucumber-java-skeleton' project on GitHub

50
00:03:44,000 --> 00:03:47,328
If you're comfortable with git
you can just clone the project

51
00:03:47,840 --> 00:03:49,750
If you're new to git, don't worry

52
00:03:49,750 --> 00:03:51,680
we'll download a zip file instead

53
00:03:52,704 --> 00:03:57,568
Click releases and download the
most recent that file that starts with a v

54
00:03:58,592 --> 00:04:02,176
If you're on Windows
click the zip file to download it

55
00:04:02,940 --> 00:04:07,400
If you're on OSX or Linux
just copy the link and download it with wget

56
00:04:08,840 --> 00:04:11,800
On Windows, extract the zip file
by double-clicking on it or

57
00:04:11,800 --> 00:04:16,256
if you're on OSX or Linux
extract it with the unzip command

58
00:04:17,280 --> 00:04:19,300
After extracting the zip file

59
00:04:19,300 --> 00:04:21,887
we'll rename the directory to 'shouty'

60
00:04:23,167 --> 00:04:26,751
In your shell, 'cd' into the shouty directory

61
00:04:27,520 --> 00:04:31,560
The template project contains
Maven and Ant build scripts

62
00:04:31,560 --> 00:04:34,940
that makes it easier to get started
with Cucumber for Java

63
00:04:35,840 --> 00:04:37,140
We'll be using Maven

64
00:04:37,140 --> 00:04:40,520
so if you haven't installed that already
now is a good time

65
00:04:41,680 --> 00:04:43,900
Let's take a look at what else is in this project

66
00:04:44,920 --> 00:04:48,680
There is a main directory for our application code

67
00:04:48,680 --> 00:04:51,060
and a test directory for our test code

68
00:04:52,095 --> 00:04:54,655
Let's remove some of the files
that come with the project

69
00:04:55,423 --> 00:05:01,000
Remove Belly.java, Stepdefs.java, and Belly.feature

70
00:05:01,500 --> 00:05:03,980
Now we have a bare bones project

71
00:05:03,980 --> 00:05:07,720
We'll be building it from the ground up
so you can see what is going on

72
00:05:09,240 --> 00:05:14,660
Before we open the project in our IDE
we're going to modify the name of the application

73
00:05:14,660 --> 00:05:16,720
We'll use a text editor for this

74
00:05:16,720 --> 00:05:20,260
I'm using the Atom editor
but you can use anything you like

75
00:05:21,240 --> 00:05:27,940
Open pom.xml and change the 
groupId, artifactId, and name

76
00:05:29,471 --> 00:05:31,263
We're ready to start coding!

77
00:05:32,031 --> 00:05:35,500
We're going to use
IntelliJ IDEA Community Edition

78
00:05:35,500 --> 00:05:38,200
because it has really nice
Cucumber integration built in

79
00:05:38,800 --> 00:05:43,300
If you prefer to use a different IDE
such as Eclipse, that's fine too.

80
00:05:44,260 --> 00:05:48,420
To open the project in IntelliJ
just open the pom.xml file

81
00:05:52,540 --> 00:05:56,060
Let's rename the package
from skeleton to Shouty

82
00:05:56,060 --> 00:05:59,420
In IntelliJ you can rename it
via the Refactor menu

83
00:06:01,800 --> 00:06:04,800
The first file we're going to create
is a feature file

84
00:06:04,800 --> 00:06:07,103
where we will write our first scenario

85
00:06:07,620 --> 00:06:13,260
Create a file called shout.feature
in the shouty directory, under resources

86
00:06:19,900 --> 00:06:23,660
Now that we have a scenario it's time to run it!

87
00:06:23,660 --> 00:06:28,080
Switch back to the command prompt
and run 'mvn clean test'

88
00:06:28,863 --> 00:06:32,700
Maven will now download Cucumber
compile your code

89
00:06:32,700 --> 00:06:35,100
and tell Cucumber to run the feature file

90
00:06:36,000 --> 00:06:39,615
You'll see that Cucumber has found
our feature file and read it back to us

91
00:06:41,160 --> 00:06:44,240
We can see a summary of the results at the bottom

92
00:06:44,240 --> 00:06:48,840
Three steps, one scenario, all undefined

93
00:06:50,111 --> 00:06:52,927
Let's run the scenario again
from inside IntelliJ

94
00:06:53,695 --> 00:06:57,279
Select the feature file and choose run
from the context menu

95
00:07:00,863 --> 00:07:02,655
This will give you similar output

96
00:07:04,191 --> 00:07:08,200
Undefined means Cucumber doesn't know
what to do for any of the three steps

97
00:07:08,200 --> 00:07:10,720
we wrote in our Gherkin scenario

98
00:07:11,360 --> 00:07:15,280
It needs us to provide some step definitions

99
00:07:15,280 --> 00:07:18,500
Step definitions translate
from the plain language

100
00:07:18,500 --> 00:07:21,599
you use in Gherkin, into code

101
00:07:22,623 --> 00:07:26,500
When Cucumber runs a step
it looks for a step definition

102
00:07:26,500 --> 00:07:29,020
that matches the text in the step

103
00:07:29,760 --> 00:07:33,900
If it finds one, then it
executes the code in the step definition

104
00:07:35,020 --> 00:07:36,080
If it doesn't find one

105
00:07:36,080 --> 00:07:38,340
well, you've just seen what happens

106
00:07:39,000 --> 00:07:41,920
Cucumber helpfully prints out
some code snippets that we can use

107
00:07:41,920 --> 00:07:45,200
as a basis for new step definitions

108
00:07:45,200 --> 00:07:46,700
Let's copy those

109
00:07:47,460 --> 00:07:51,320
We'll create a new class in the shouty package
where we'll paste those snippets

110
00:07:51,800 --> 00:07:55,120
Make sure you create it under test and not main

111
00:07:56,159 --> 00:07:59,743
Now IntelliJ's complaining that
there are some unknown symbols

112
00:08:00,260 --> 00:08:02,940
We need to add some import statements

113
00:08:02,940 --> 00:08:04,860
Pressing alt-enter will do that for us

114
00:08:06,399 --> 00:08:08,703
Let's return to the scenario and run it again

115
00:08:11,000 --> 00:08:14,860
There is a small bug in IntelliJ's
Cucumber integration

116
00:08:14,860 --> 00:08:19,500
Sometimes it doesn't tell Cucumber
where to find step definitions

117
00:08:19,500 --> 00:08:21,040
This is easy to work around

118
00:08:21,040 --> 00:08:25,150
Just edit the Run configuration
and make sure the Glue field

119
00:08:25,150 --> 00:08:27,380
contains the value of your package

120
00:08:33,400 --> 00:08:34,860
Now run Cucumber again

121
00:08:36,340 --> 00:08:39,520
This time the output is a little different

122
00:08:39,520 --> 00:08:43,500
We now have a pending step
and two skipped ones

123
00:08:43,500 --> 00:08:48,860
This means Cucumber found all our
step definitions and executed the first one

124
00:08:48,860 --> 00:08:52,000
But that first step definition
throws a Pending exception

125
00:08:52,000 --> 00:08:55,100
which causes Cucumber to stop
skip the rest of the steps

126
00:08:55,100 --> 00:08:58,111
and mark the scenario as pending

127
00:08:59,500 --> 00:09:02,060
It's time to work on our solution

128
00:09:02,060 --> 00:09:04,940
At this point we need to do
a little domain modeling

129
00:09:04,940 --> 00:09:08,040
The words in the step
provide us some good hints

130
00:09:08,040 --> 00:09:11,420
about some names that
will appear in our domain model

131
00:09:11,420 --> 00:09:14,620
Our scenario mentions
two people Lucy and Sean

132
00:09:14,620 --> 00:09:18,000
so it looks like we'll need
a couple of person objects at least

133
00:09:18,740 --> 00:09:21,920
Each person will also need to
know their own location

134
00:09:23,720 --> 00:09:26,460
Cucumber is telling us to
write the code we wish we had

135
00:09:26,460 --> 00:09:27,680
Let's do it!

136
00:09:28,880 --> 00:09:30,760
To implement this step we need to create

137
00:09:30,760 --> 00:09:34,800
a couple of person objects
with a specified distance between them

138
00:09:34,800 --> 00:09:36,511
We could write it like this

139
00:09:37,791 --> 00:09:42,399
Start by renaming the 'arg1' parameter
to something that better reflects its meaning

140
00:09:43,160 --> 00:09:44,960
We'll call it distance

141
00:09:46,400 --> 00:09:48,000
To keep things simple 
we're going to assume

142
00:09:48,000 --> 00:09:50,340
all people are situated on a line

143
00:09:51,220 --> 00:09:53,660
A one-dimensional coordinate system

144
00:09:54,440 --> 00:09:57,280
We can always introduce proper geo locations later

145
00:09:57,840 --> 00:10:02,100
We'll place Sean in the center 
and Lucy 15 metres away from Sean

146
00:10:07,060 --> 00:10:10,860
Notice that the number 15
does not appear anywhere in our code

147
00:10:10,860 --> 00:10:16,860
The value 15 is automatically passed
from the Gherkin step into the step definition

148
00:10:16,860 --> 00:10:18,100
If you're curious

149
00:10:18,100 --> 00:10:22,340
that's the '\d' in the
pattern of the step definition

150
00:10:23,100 --> 00:10:26,940
We'll explain regular expressions
in detail in a future lesson

151
00:10:29,880 --> 00:10:32,640
Before we can run the code we just wrote

152
00:10:32,640 --> 00:10:34,880
we need to fix the compilation errors

153
00:10:35,500 --> 00:10:38,200
Let's create a class called person

154
00:10:43,520 --> 00:10:45,640
Then we'll add a setter for the location

155
00:10:56,640 --> 00:11:00,740
When we run the scenario again
the first step is green!

156
00:11:02,280 --> 00:11:05,500
We'll follow the same flow
to make the remaining two steps pass

157
00:11:05,500 --> 00:11:09,540
do a little bit of domain modeling
write the code we wish we had

158
00:11:09,540 --> 00:11:12,260
make it compile, and run the scenario

159
00:11:14,303 --> 00:11:18,399
In the second step definition
we want to tell Sean to shout something

160
00:11:28,120 --> 00:11:33,980
In order to send instructions to Sean
we need to store him in an instance variable

161
00:11:33,980 --> 00:11:38,620
so that he'll be accessible
from all of our definitions, like this

162
00:11:41,960 --> 00:11:44,880
Our Person class needs a 'shout' method

163
00:11:45,540 --> 00:11:46,560
Let's add it!

164
00:11:48,600 --> 00:11:51,040
Don't worry about the implementation yet

165
00:11:51,040 --> 00:11:55,780
The important thing right now is to
discover the shape of our domain model

166
00:11:57,060 --> 00:12:01,540
The last step definition is where
we implement the check or assertion

167
00:12:01,540 --> 00:12:03,740
We'll verify that what Lucy has heard

168
00:12:03,740 --> 00:12:06,780
is exactly the same as what Sean shouted

169
00:12:09,080 --> 00:12:11,700
Once again we're going to
write the code we wish we had

170
00:12:24,840 --> 00:12:29,600
So we need a way to ask Lucy
what messages she's heard

171
00:12:29,600 --> 00:12:33,400
and we also need to know
what it was that Sean shouted

172
00:12:34,000 --> 00:12:39,620
We can record what Sean shouts
by storing it an instance variable

173
00:12:39,620 --> 00:12:41,860
as the When step runs

174
00:12:42,367 --> 00:12:45,000
This is a common pattern to use
in Cucumber step definitions

175
00:12:45,000 --> 00:12:48,260
when you don't want to repeat
the same test data in different

176
00:12:48,260 --> 00:12:49,800
parts of a scenario

177
00:12:51,071 --> 00:12:54,143
Now we can use that value
in the assertion check

178
00:12:55,420 --> 00:12:59,780
We also need to add a getMessagesHeard
method to our Person class

179
00:13:00,180 --> 00:13:01,460
Let's do that now

180
00:13:05,660 --> 00:13:07,460
This is great!

181
00:13:07,960 --> 00:13:13,200
Whenever we do BDD, getting to our
first failing test is a milestone

182
00:13:13,200 --> 00:13:19,120
Seeing the test fail, proves that it is
capable of detecting errors in our code

183
00:13:19,120 --> 00:13:24,360
Never trust an automated test
that you haven't seen fail!

184
00:13:25,880 --> 00:13:29,680
Now all we have to do is write
the code to make it pass

185
00:13:29,680 --> 00:13:31,200
That's the easy bit!

186
00:13:32,543 --> 00:13:35,359
In this case we're going to cheat

187
00:13:36,500 --> 00:13:39,711
We have a one line fix that will
make the scenario pass

188
00:13:40,480 --> 00:13:42,860
It's not a particularly...

189
00:13:42,860 --> 00:13:45,080
future-proof implementation

190
00:13:46,360 --> 00:13:47,900
Can you guess what it is?

191
00:13:51,360 --> 00:13:52,380
I'll show you

192
00:13:54,040 --> 00:13:57,120
Hmm, there. I told you it
wasn't very future-proof!

193
00:13:57,880 --> 00:14:03,360
Still, the fact that such a poor
implementation can pass our tests

194
00:14:03,360 --> 00:14:05,820
shows us that we need to work on our tests

195
00:14:06,335 --> 00:14:11,199
A more comprehensive set of scenarios would
force us to write a better implementation

196
00:14:12,740 --> 00:14:15,840
This is the essence of
behaviour-driven development

197
00:14:15,840 --> 00:14:19,120
Examples of behaviour drive the development

198
00:14:21,695 --> 00:14:25,300
So we know we need more scenarios
and a better solution

199
00:14:25,300 --> 00:14:29,631
Instead of writing a note on our TODO list
let's write another failing scenario

200
00:14:32,440 --> 00:14:35,560
Now when we come back to this code
we can just run the tests

201
00:14:35,560 --> 00:14:38,340
and Cucumber will remind us
what we need to do next

202
00:14:38,940 --> 00:14:40,640
We're done for the day!

203
00:14:40,640 --> 00:14:42,440
Go make yourself a cup of tea

204
00:14:42,880 --> 00:14:44,880
Captions created by Jayson Smith for Cucumber Ltd.
