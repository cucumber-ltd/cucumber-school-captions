WEBVTT

1
00:00:14.592 --> 00:00:17.920
Welcome to the final lesson in this series of Cucumber School

2
00:00:18.432 --> 00:00:24.576
Over the series we've tried to cover all the important techniques and concepts we think you need to become a

3
00:00:24.832 --> 00:00:27.136
successful behaviour-driven developer

4
00:00:28.160 --> 00:00:31.488
We've taught you how to break down requirements with example mapping

5
00:00:32.000 --> 00:00:35.584
and how to express those examples as Gherkin scenarios

6
00:00:36.096 --> 00:00:39.680
We've explained the importance of keeping your features readable

7
00:00:39.936 --> 00:00:44.544
and shown you how to write great, flexible, step definitions to help you achieve that goal

8
00:00:45.824 --> 00:00:51.968
We've also explored the difference between acceptance tests and unit tests and demonstrated how the

9
00:00:52.224 --> 00:00:58.368
outside in approach to software development works using both types of tests to drive out the solution to your

10
00:00:58.624 --> 00:00:59.648
Stakeholders problems

11
00:01:01.696 --> 00:01:04.512
One glaring omission from the story so far however

12
00:01:04.768 --> 00:01:08.352
is that our shouty solution is nothing more than a domain model

13
00:01:09.376 --> 00:01:12.192
It doesn't have any way for a user to interact with it

14
00:01:12.960 --> 00:01:15.776
Well that's all about to change

16
00:01:16.544 --> 00:01:22.688
In this episode, we'll review the code that's just been written for the first iteration of Shouty's web user interface

17
00:01:22.944 --> 00:01:26.784
and show you how to use Selenium WebDriver

18
00:01:27.296 --> 00:01:33.440
a browser automation library to run our Cucumber scenarios through that user interface

19
00:01:34.464 --> 00:01:40.608
We think it would be irresponsible to teach you how to use Selenium without also teaching you about the Agile

20
00:01:40.864 --> 00:01:43.680
testing pyramid and its nemesis

21
00:01:44.192 --> 00:01:45.984
the testing ice cream cone

22
00:01:46.752 --> 00:01:52.896
We've come across too many teams who have ended up with miserably slow, unreliable

23
00:01:53.152 --> 00:01:55.456
test suites that cost too much to maintain

24
00:01:55.712 --> 00:01:59.296
because all their Cucumber scenarios go through the UI

25
00:02:00.064 --> 00:02:01.856
It doesn't have to be this way

26
00:02:02.112 --> 00:02:03.392
and in this episode

27
00:02:03.648 --> 00:02:05.696
we'll show you how to avoid this trap

28
00:02:06.720 --> 00:02:12.864
Let's start by walking you through the changes that have been happening in the code base while we've been away

29
00:02:13.632 --> 00:02:19.520
Shouty now has a simple web UI which displays a form where a user can shout a message

30
00:02:20.288 --> 00:02:22.848
It won't win any awards for style just yet

31
00:02:23.104 --> 00:02:25.152
but it should be functional at least

32
00:02:26.432 --> 00:02:32.576
We can let Cucumber put the new web app through its paces by setting the 'shouty_test_depth'

33
00:02:32.832 --> 00:02:36.416
environment variable to 'web' when we run Cucumber

34
00:02:37.952 --> 00:02:42.816
This setting causes the scenarios to be run through the browser via Selenium

35
00:02:43.072 --> 00:02:48.448
and if you watch closely, you can see the message being typed into the format it runs

36
00:02:49.472 --> 00:02:55.616
You can see it's way slower to run the scenarios via a browser

around a minute

37
00:03:21.472 --> 00:03:27.616
Luckily, we still have our original, much faster, version of the acceptance tests that go directly to the domain model

38
00:03:28.384 --> 00:03:30.432
These run in less than a second

39
00:03:31.200 --> 00:03:35.552
We can run this version by setting 'shouty_test_depth' to something else

40
00:03:35.808 --> 00:03:37.856
or just leaving it out altogether

41
00:03:39.392 --> 00:03:43.488
Nice!

So we have the best of both worlds it seems

42
00:03:44.512 --> 00:03:48.096
Let's have a look at how this has been implemented in the features

43
00:03:49.632 --> 00:03:54.496
In this world.rb file here we now have two separate modules being defined

44
00:03:54.752 --> 00:04:00.896
Our original ShoutyWorld has been renamed to DomainWorld

45
00:04:01.152 --> 00:04:01.664
and a new WebWorld has been added

46
00:04:02.176 --> 00:04:06.272
WebWorld has exactly the same methods as the original DomainWorld

47
00:04:06.528 --> 00:04:08.832
but the implementation is quite different

48
00:04:09.856 --> 00:04:16.000
In the sean_shout method, rather than calling the Person domain object directly to shout the message

49
00:04:16.768 --> 00:04:22.911
The WebWorld calls this visit method to open the homepage as Sean then posts the message into

50
00:04:23.167 --> 00:04:23.935
the shout form

51
00:04:25.215 --> 00:04:29.823
Where have these new methods visit fill_in, and click_button come from?

52
00:04:30.847 --> 00:04:32.639
They're provided by Capybara

53
00:04:32.895 --> 00:04:38.527
which is a delightful Ruby library that wraps Selenium WebDriver in a user-friendly package

54
00:04:39.039 --> 00:04:42.623
I know you're almost drowning in buzzwords to this point

55
00:04:43.391 --> 00:04:46.719
Don't worry- we'll clear this up in a moment

Let's continue with the tour

56
00:04:48.255 --> 00:04:52.607
Down here, we examine the value of the shouty_test_depth environment variable

57
00:04:52.863 --> 00:04:54.143
If its 'web'

58
00:04:54.399 --> 00:04:58.751
we load Capybara, configure it for Selenium, tell it how to boot up our web app

59
00:04:59.263 --> 00:05:04.127
and finally tell Cucumber to use the WebWorld in the step definitions

60
00:05:05.151 --> 00:05:09.247
The alternative, of course, iss just to use the DomainWorld as normal

61
00:05:09.759 --> 00:05:13.599
Let's walk through what happens when a scenario runs using the WebWorld

62
00:05:14.367 --> 00:05:18.207
When Cucumber runs the "Sean shouts Free Bagels" step

63
00:05:18.719 --> 00:05:22.559
it searches for the corresponding step definition and executes it

64
00:05:23.583 --> 00:05:28.703
Now the code in that step definition calls the sean_shout method on the World

65
00:05:28.959 --> 00:05:34.079
which in turn calls the visit method on Capybara to open the homepage as Sean

66
00:05:34.847 --> 00:05:38.943
Capybara will now tell Selenium WebDriver to open a browser at that URL

67
00:05:39.455 --> 00:05:42.783
Selenium tells Firefox what it needs to do

68
00:05:43.295 --> 00:05:47.903
and when the browser opens that URL, our website will get a request for the page

69
00:05:48.159 --> 00:05:51.487
We render the page on the server and the browser displays it

70
00:05:52.511 --> 00:05:57.887
Next, the world asks Capybara to fill out and submit the shout form

72
00:05:58.399 --> 00:06:03.519
which causes it to give instructions to Selenium, which in turn causes button clicks in the browser

73
00:06:04.287 --> 00:06:05.567
The form is submitted

74
00:06:06.079 --> 00:06:08.127
the server calls the core domain

75
00:06:08.383 --> 00:06:09.663
to broadcast a shout

76
00:06:14.527 --> 00:06:15.807
In contrast

77
00:06:16.063 --> 00:06:20.159
the DomainWorld implementation of sean_shout calls the domain model directly.

78
00:06:21.183 --> 00:06:25.535
Notice this is exactly the same code as the web server uses

79
00:06:27.583 --> 00:06:31.679
Using multiple worlds like this allows us to choose the strategy

80
00:06:31.935 --> 00:06:33.727
for automating our application

81
00:06:34.495 --> 00:06:40.639
The strategy that talks directly to the domain model gives us fast feedback and lets us test where the heart

82
00:06:40.895 --> 00:06:42.943
of the application's behaviour is implemented

83
00:06:43.711 --> 00:06:49.855
But now I did a second strategy. Last approve this Behavior still works when presented by the web UI

84
00:06:50.879 --> 00:06:52.927
You might be wondering why we need both

85
00:06:53.439 --> 00:06:57.279
Why didn't we just stopped driving all way in from the wifey why in the beginning

86
00:06:59.071 --> 00:07:04.447
We found the focusing on driving out at the main model for my scenarios first

87
00:07:04.959 --> 00:07:06.495
Modeling by example

88
00:07:07.263 --> 00:07:11.615
Gives us fast way back about the understanding of new problems to mines

89
00:07:12.127 --> 00:07:18.271
We don't get distracted by solution to man complexities like web service HDML and so on

90
00:07:18.527 --> 00:07:21.855
Why was still just trying to understand the core of the problem

91
00:07:23.135 --> 00:07:29.279
In the long run we also find is staying focused on the code to main helps us build scenario is that the most

92
00:07:29.535 --> 00:07:30.815
Fable of the time

93
00:07:31.839 --> 00:07:37.471
User interface is 10 to change a lot more often in the cold business rules of the Domaine

94
00:07:39.263 --> 00:07:42.847
Building scenarios that makes sense even without to use interface

95
00:07:43.103 --> 00:07:46.175
Also helps is to avoid. Test from becoming too

96
00:07:46.431 --> 00:07:47.711
Imperative

97
00:07:48.735 --> 00:07:54.879
Most teams who ride and run that keeps against the user interface and it was a lot of incidental detail

98
00:07:55.135 --> 00:07:57.951
Anna cenarios about the UI interaction

99
00:07:58.207 --> 00:07:59.743
Solution to mine stuff

100
00:08:00.767 --> 00:08:03.071
These scenarios of poor documentation

101
00:08:03.839 --> 00:08:09.983
That too busy talking about how to use a phone as a task rather than what the user is trying to achieve

102
00:08:11.263 --> 00:08:12.287
For example

103
00:08:12.799 --> 00:08:15.103
We might have written scenario like this instead

104
00:08:18.943 --> 00:08:21.759
This scenario doesn't illustrate the behaviour very well

105
00:08:22.527 --> 00:08:27.903
If you didn't know anything about Shawty imma trying to understand it through the examples written like this

106
00:08:28.159 --> 00:08:29.439
You have a tough time

107
00:08:30.463 --> 00:08:32.511
It makes for a lousy documentation

108
00:08:34.303 --> 00:08:36.863
Notice how the language used in this scenario

109
00:08:37.119 --> 00:08:39.679
The URL to CSS selectors

110
00:08:39.935 --> 00:08:46.079
Evening feeling in fields and clicking of buttons is from the solution to Maine not the problem to me

111
00:08:47.103 --> 00:08:50.943
It tells you nothing about your team's ubiquitous language

112
00:08:52.735 --> 00:08:53.503
Finally

113
00:08:53.759 --> 00:08:55.039
The scenarios brothel

114
00:08:55.551 --> 00:08:59.647
If you need to change the details of the interaction for sending a shout

115
00:08:59.903 --> 00:09:01.695
Such as the way you will send to Kate

116
00:09:01.951 --> 00:09:05.535
You need to come back and change every scenario that involves shouting

117
00:09:06.047 --> 00:09:08.351
By pushing the house down

118
00:09:08.863 --> 00:09:11.423
Your scenarios will remain true

119
00:09:11.679 --> 00:09:12.447
Malanga

120
00:09:13.471 --> 00:09:19.615
The opposite of the imperative style web Express the scenario is using problem the main language is known as a

121
00:09:19.871 --> 00:09:21.407
Declarative Style

122
00:09:21.919 --> 00:09:28.063
In the style we tried to describe what the user is trying to achieve rather than how they do it

123
00:09:29.599 --> 00:09:33.183
Thanks to the car to stall we've been using through the rest of the series

124
00:09:33.439 --> 00:09:38.303
We were able to easily swap in a different stressed you automatic or application through the web

125
00:09:38.559 --> 00:09:40.863
Without changing us specifications

126
00:09:41.887 --> 00:09:47.263
After other interfaces to our application like a rest API or a mobile app

127
00:09:47.775 --> 00:09:53.919
We can continue to use this pun I didn't use strategies that runoff scenarios through these new layers of the Sun

128
00:09:54.175 --> 00:09:54.687
Stack

129
00:09:55.967 --> 00:09:56.735
Redundant

130
00:09:56.991 --> 00:10:02.367
Each of these strategies uses exactly the same scenarios and step definitions

131
00:10:03.135 --> 00:10:09.279
This means the investment to put into writing your scenarios face back over and over

132
00:10:09.535 --> 00:10:13.631
Reusing to validate the behaviour of the application from these different perspectives

133
00:10:14.399 --> 00:10:20.031
This is a major advantage of having push the details of how show and shouts down into a helper method

134
00:10:20.799 --> 00:10:26.431
If this detail was still up in the steppe definition or worse in the scenario itself

135
00:10:26.687 --> 00:10:28.479
We wouldn't have this flexibility

136
00:10:29.759 --> 00:10:35.903
In general the structure Imaging in our application and test code is cool day ports and adapters architecture

137
00:10:36.159 --> 00:10:38.719
Hexagonal architecture

138
00:10:39.487 --> 00:10:45.119
You can think of poison adopted as a direct analogy to physical devices with plugs and sockets

139
00:10:45.887 --> 00:10:52.031
For example the HDMI ports on this laptop that's me plug in any kind of display that also has a HDMI

140
00:10:52.287 --> 00:10:52.799
Airport

141
00:10:53.567 --> 00:10:58.175
If I need to use a VGA display I can use an adapter between the two

142
00:10:59.711 --> 00:11:01.503
In a hexagonal architecture

143
00:11:02.015 --> 00:11:05.087
The Alexa can contains your core business logic

144
00:11:06.111 --> 00:11:10.975
This is why the F statements that deliver the most value to your stakeholders should live

145
00:11:12.255 --> 00:11:18.399
Mexican knows nothing about the outside world your web service your database is your email sending service

146
00:11:18.655 --> 00:11:20.447
Enterprise message bus

147
00:11:21.215 --> 00:11:23.263
It's pure business logic

148
00:11:24.543 --> 00:11:28.639
We expose disco Behavior by one or more ports

149
00:11:29.663 --> 00:11:33.503
Cold is really just a protocol if you like

150
00:11:34.271 --> 00:11:40.415
Any component to understand that particles and then plug in and interact with Nicole through the port

151
00:11:41.439 --> 00:11:43.743
Bacolod component adapter

152
00:11:43.999 --> 00:11:48.863
It's the account is job to expose the code to my logic to the outside world

153
00:11:49.887 --> 00:11:52.703
In shouty that's just one pulled

154
00:11:52.959 --> 00:11:57.311
The API twat the main model made up of the personal Network classes

155
00:11:58.079 --> 00:12:01.151
Which looked into different adapters to this little port

156
00:12:01.663 --> 00:12:02.431
The weather

157
00:12:02.687 --> 00:12:08.831
Which exposes chassis code 9 of the web for users will Selenium WebDriver to interact with

158
00:12:09.599 --> 00:12:11.391
And that the main world

159
00:12:11.647 --> 00:12:14.463
Which lets Cucumber Drive the application directly

160
00:12:15.487 --> 00:12:18.559
Both clients of the same API

161
00:12:20.863 --> 00:12:25.727
Hexagonal architecture is a terrific fit the teams that care about testability

162
00:12:25.983 --> 00:12:32.127
In fact it was invented precisely to allow for testability back in the days when sick time.

163
00:12:32.383 --> 00:12:33.919
Impossible to ultimate

164
00:12:34.431 --> 00:12:40.575
By separating the code to main logic from the gooey these TD Pioneers Bible to plug that

165
00:12:40.831 --> 00:12:42.879
Test into the same port is it gooey

166
00:12:43.135 --> 00:12:45.951
I still test most of the applications Behavior

167
00:12:47.487 --> 00:12:50.559
If you have the discipline to keep your code separated like this

168
00:12:50.815 --> 00:12:56.959
You benefit from being able to run the test against the most business valuable lines of code in your codebase.

169
00:12:57.215 --> 00:12:57.983
Codomain

170
00:12:58.239 --> 00:13:00.543
In the shortest amount of time

171
00:13:01.823 --> 00:13:05.151
Test pure business logic can run lightning fast

172
00:13:05.407 --> 00:13:11.039
Meaning of cheap to get ready for a feedback about whether that logic is behaving correctly

173
00:13:12.831 --> 00:13:14.367
Let's get back to the code

174
00:13:15.135 --> 00:13:19.487
To give us a way to test the app manually the developers of kindly added this

175
00:13:19.743 --> 00:13:21.535
Configure are you file

176
00:13:21.791 --> 00:13:25.631
Which starts the web server preconfigured with some Familia test dates

177
00:13:26.655 --> 00:13:30.751
This means we're able to test the web app without having to create account so people

178
00:13:31.263 --> 00:13:32.799
Future we don't have yet

179
00:13:34.079 --> 00:13:37.407
So we should be able to open One browser top of Sean

180
00:13:37.919 --> 00:13:39.455
And another time is Lucy

181
00:13:40.223 --> 00:13:42.015
Send a shout from Shawn

182
00:13:42.271 --> 00:13:46.367
Refresh Lucy's page and see wait a minute

183
00:13:46.879 --> 00:13:48.415
LaShawn Shout

184
00:13:49.695 --> 00:13:50.463
This is all.

185
00:13:50.975 --> 00:13:53.023
The scenario is passing

186
00:13:53.279 --> 00:13:56.095
But there's nothing appearing on Lucy's page

187
00:13:57.119 --> 00:13:58.399
What's going on

188
00:13:59.423 --> 00:14:03.775
The answer lies in the implementation of our then step

189
00:14:05.055 --> 00:14:11.199
Reading it we can see the step definition is going to rectally to the Domaine model to discover the messages

190
00:14:11.455 --> 00:14:12.479
At least his head

191
00:14:13.759 --> 00:14:15.551
It shouldn't have been a surprise to us

192
00:14:16.063 --> 00:14:17.343
It's always been that way

193
00:14:18.111 --> 00:14:20.927
But since I went step now it's the UI

194
00:14:21.183 --> 00:14:23.487
We would expect this then step

195
00:14:23.743 --> 00:14:25.791
Tulsa adopt the same strategy

196
00:14:27.327 --> 00:14:30.911
When you start to mix different depths of testing as we're doing here

197
00:14:31.423 --> 00:14:37.311
A good rule of thumb is to keep the death of you when and then steps consistent

198
00:14:38.335 --> 00:14:44.479
It's often advisable to bypass layers and reach down deeper into the stock to set up state in the given

199
00:14:44.735 --> 00:14:45.247
10 steps

200
00:14:46.015 --> 00:14:48.575
If we carry out an action by the UI

201
00:14:49.343 --> 00:14:51.647
Outcome chat in the den step

202
00:14:51.903 --> 00:14:53.695
Should also be done through the UI

203
00:14:56.255 --> 00:15:00.351
Let's remedy this situation by pushing the code in the steppe definition

204
00:15:00.607 --> 00:15:01.887
Into a healthy message

205
00:15:02.655 --> 00:15:07.007
Then we'll be able to have two different strategies for checking the messages to users Hood

206
00:15:08.287 --> 00:15:12.895
Once we have a failing test for the web strategy we can drive out the behaviour

207
00:15:13.407 --> 00:15:15.967
In the UI to display that uses messages

208
00:15:16.991 --> 00:15:19.807
Will focus on a single scenario while we do this word

209
00:15:20.831 --> 00:15:23.903
Once we've got that one passing to our satisfaction

210
00:15:24.159 --> 00:15:27.231
We can apply the same change across the rest of the scenarios

211
00:15:28.511 --> 00:15:33.631
This very basic scenario by Lucy has shown is a good place to start

212
00:15:35.423 --> 00:15:38.495
That's extractor method from the body of the steppe definition

213
00:15:38.751 --> 00:15:40.031
And put it in our

214
00:15:40.287 --> 00:15:41.311
The main world

215
00:15:49.247 --> 00:15:50.783
That scenario was still passing

216
00:15:53.855 --> 00:15:56.159
Now I'm running through the web

217
00:15:56.415 --> 00:15:58.975
We shall need to add that message to the web world

218
00:16:00.767 --> 00:16:02.815
How will affect the messages Hood

219
00:16:03.583 --> 00:16:07.679
First thing we need to do is log in to make sure we're reading the messages for the correct user

220
00:16:08.447 --> 00:16:10.751
So we can reuse this help method wood floor Depot

221
00:16:11.775 --> 00:16:15.615
Now we'll need to scrape the messages off the HTML page

222
00:16:16.127 --> 00:16:19.967
Remember we're going test first here so we don't have to talk up yet

223
00:16:20.735 --> 00:16:22.015
That's not a problem

224
00:16:22.271 --> 00:16:25.343
We can use a test to help with design what the mark up should look like

225
00:16:26.879 --> 00:16:31.487
That's a shooting each message will be an element with a message class on it

226
00:16:32.255 --> 00:16:35.839
We can ask Capybara to give us all the elements with that class

227
00:16:36.863 --> 00:16:43.007
That gives is a list of Capybara HTML nodes which we can then transform into a list of that text come

228
00:16:43.263 --> 00:16:43.775
Content

229
00:16:44.799 --> 00:16:46.335
Let's watch this test fail

230
00:16:50.175 --> 00:16:51.455
Alex okay

231
00:16:52.223 --> 00:16:54.527
Let's Play Fake it till you make it

232
00:16:54.783 --> 00:16:57.599
Just to check this is such thing as doing the right thing

233
00:16:58.111 --> 00:17:01.951
Will hardcore the HTML we want into the templates here

234
00:17:04.511 --> 00:17:07.583
That gives us a chance to talk with a designer about the mock-up

235
00:17:08.095 --> 00:17:09.631
Lake Alfred chat

236
00:17:10.143 --> 00:17:11.167
And he loves it

237
00:17:11.679 --> 00:17:12.959
So we can press on

238
00:17:15.007 --> 00:17:18.591
The next step is to make the HTML template dynamic

239
00:17:18.847 --> 00:17:22.687
I have a display the actual list of messages headed by the user

240
00:17:23.455 --> 00:17:29.599
We could continue using the Cucumber scenario to drive this out but it would be best to zoom in and focus

241
00:17:29.855 --> 00:17:31.903
It's on some unit test for the weather out now

242
00:17:32.927 --> 00:17:39.071
That way if this behaviour of a slipped loose in the future there will be a unit test pointing us to exactly why we need to

243
00:17:39.327 --> 00:17:40.351
Cheat codes to fix it

244
00:17:41.631 --> 00:17:45.471
Luckily the weather app is already been built with some unit test around it

245
00:17:47.519 --> 00:17:51.615
Please test load the Sinatra weather in isolation

246
00:17:51.871 --> 00:17:55.455
I think it's a hash of people that just contains testicles

247
00:17:56.223 --> 00:18:02.367
We could have use real instances from on demand model explained in the last episode using test doubles

248
00:18:02.623 --> 00:18:07.231
Houses to see the protocol on the porch between the web adapter on. Call to Maine

249
00:18:09.023 --> 00:18:12.863
Will use a live record drug test to make requests of the web app

250
00:18:13.375 --> 00:18:19.519
Unload the response into a Capybara HTML document so we can make queries and assertions about HTML

251
00:18:19.775 --> 00:18:21.055
Response if we want to

252
00:18:22.591 --> 00:18:24.639
The test organized By Request

253
00:18:25.151 --> 00:18:29.503
So when we run then we get some nice documentation about how the out behave

254
00:18:30.783 --> 00:18:36.927
We need a new test for the get request which simulates the situation I lose his head a couple of messages

255
00:18:41.791 --> 00:18:43.583
Infuser homepage

256
00:18:44.607 --> 00:18:48.959
We expect to be able to find the message texting each of the message elements

257
00:18:51.775 --> 00:18:53.055
Let me run this

258
00:18:53.311 --> 00:18:56.895
It fails because we just hard coding the message of the moment

259
00:18:57.407 --> 00:18:59.199
Let's TDR solution

260
00:19:01.247 --> 00:19:07.391
If you'd like to try this yourself just pause the video here see if you can figure out what to do next before we show you

261
00:19:10.463 --> 00:19:16.095
Starting in the template we can look for a local variable that's cool it messages Hood

262
00:19:16.351 --> 00:19:17.887
And it's right over it

263
00:19:18.399 --> 00:19:20.959
Preach message will write a message element

264
00:19:28.127 --> 00:19:31.455
Now we need to set up messages Hood variable for the template

265
00:19:32.223 --> 00:19:35.039
We do that from within the get request Handler in the web app

266
00:19:36.319 --> 00:19:38.367
We need to get the messages heard for the user

267
00:19:38.623 --> 00:19:44.255
Which we can fetch from that people hash using the name Prime as a key to find them

268
00:19:45.279 --> 00:19:51.167
Now we passed the message is heard through to the view template in this locals hash

269
00:19:52.703 --> 00:19:53.983
Let's give that a try

270
00:20:13.951 --> 00:20:14.719
Right

271
00:20:15.999 --> 00:20:17.791
Suddenly everything is green

272
00:20:19.327 --> 00:20:24.191
Try quitting manual test for yourself creating a couple of tops as shown in Lucy

273
00:20:24.447 --> 00:20:27.007
And satisfy yourself that it's working now

274
00:20:28.031 --> 00:20:33.151
Now that we've proved all messages Hood by Method works for both domain and web strategies

275
00:20:33.407 --> 00:20:39.551
Let's use that method in all the step definitions so that every scenario that checks for messages

276
00:20:39.807 --> 00:20:42.111
Will do that check in a consistent way

277
00:20:43.135 --> 00:20:49.279
This is just a matter of finding each cold ask a person to main objective messages hood and converting it to you

278
00:20:49.535 --> 00:20:51.071
News on you help a message instead

279
00:20:54.399 --> 00:20:56.959
Let's run all the cigars in the shower feature

280
00:21:01.311 --> 00:21:01.823
Great

281
00:21:02.335 --> 00:21:03.871
It looks like we're done

282
00:21:05.151 --> 00:21:06.687
If we look at the other feature

283
00:21:06.943 --> 00:21:12.319
Premium Accounts we can see that there's a similar problem to the one we just resolved

284
00:21:13.087 --> 00:21:14.367
This last step

285
00:21:14.623 --> 00:21:17.440
Then shown should have end credit

286
00:21:17.952 --> 00:21:24.096
Goes direct to The Domain model to check Sean's credits rather than having an extra layer of indirection

287
00:21:24.352 --> 00:21:27.424
Allow us to use it to maintain a web strategy for the check

288
00:21:28.448 --> 00:21:34.592
It will be useful practice for you to go through and apply exactly what we just did to the steppe definition

289
00:21:35.616 --> 00:21:37.920
Will leave that is an exercise for you

290
00:21:40.224 --> 00:21:42.272
Let's fast-forward to the point where this is done

291
00:21:43.808 --> 00:21:49.952
Now we can all of us in areas at both levels against the two main and again

292
00:21:50.208 --> 00:21:50.976
It's the web UI

293
00:21:52.256 --> 00:21:53.792
This is awesome

294
00:21:55.328 --> 00:21:56.096
Isn't it

295
00:21:56.864 --> 00:22:00.448
We talked a lot about the benefits of automated testing the series

296
00:22:00.960 --> 00:22:05.056
Let's consider the flip side for a moment and look at the cost

297
00:22:06.592 --> 00:22:10.176
Every automated testing your system comes at a cost

298
00:22:10.944 --> 00:22:13.504
You have the cost of writing it in the first place

299
00:22:14.016 --> 00:22:16.832
The cost of waiting for it to run each time

300
00:22:17.344 --> 00:22:21.696
The cost of changing it for the desired Behavior the application changes

301
00:22:22.208 --> 00:22:26.304
And the cost of debugging it when it fails for no good reason

302
00:22:27.840 --> 00:22:33.472
When the majority of your test had the application through the user interface you got a great benefit

303
00:22:33.728 --> 00:22:37.824
From knowing that each scenario is using the system exactly as a use of wood

304
00:22:38.848 --> 00:22:42.432
Get the downside is that these tests of much slower to run

305
00:22:42.944 --> 00:22:44.736
Are often much less reliable

306
00:22:46.272 --> 00:22:51.904
A well-known metaphor to help you think about this problem is the agile testing pyramid

307
00:22:52.928 --> 00:22:57.280
At the base of the pyramid you have a large number of unit test

308
00:22:57.792 --> 00:23:03.936
Shallow test that directly hit isolated individual classes in modules in your solution

309
00:23:05.728 --> 00:23:08.288
The pyramid gets narrower as you go up

310
00:23:08.544 --> 00:23:12.128
Indicating that has a depth of test increases

311
00:23:12.384 --> 00:23:14.176
The less of them you should have

312
00:23:14.688 --> 00:23:20.064
At the very top of the pyramid for the test right through the whole application stock

313
00:23:20.832 --> 00:23:22.368
You want as few as possible

314
00:23:23.392 --> 00:23:26.720
Just enough to give you confidence the thing is working

315
00:23:28.512 --> 00:23:31.328
When you drive most of your behaviour through the GUI

316
00:23:31.584 --> 00:23:33.120
You end up with the opposite

317
00:23:33.376 --> 00:23:36.192
More of a testing ice cream cone

318
00:23:36.960 --> 00:23:39.776
Now I love it ice cream on a hot Summer's Day

319
00:23:40.032 --> 00:23:42.336
When your test Suite looks like this

320
00:23:42.592 --> 00:23:48.736
You're waiting hours for test results at least one or two random fatalism

321
00:23:48.992 --> 00:23:50.272
Every belt

322
00:23:52.576 --> 00:23:55.904
Although we have the choice to run every chassis scenario through the movie

323
00:23:56.160 --> 00:24:00.256
The agile testing pyramid tells us that would be a bad idea

324
00:24:01.536 --> 00:24:07.424
We need to select a few representative or key examples to run through the web UI

325
00:24:07.680 --> 00:24:09.728
I'm going to rest through the Domaine

326
00:24:11.008 --> 00:24:13.056
How do we choose as key examples

327
00:24:14.592 --> 00:24:17.408
Let's try and think about what could possibly go wrong

328
00:24:18.176 --> 00:24:22.784
We want to identify the minimum number of scenario is that we give us confidence the system is working

329
00:24:23.552 --> 00:24:28.928
Remember both are cool to me and our web server protected by their own unit test

330
00:24:29.184 --> 00:24:32.000
So we just need a few checks but basic correctness

331
00:24:32.512 --> 00:24:35.328
Would it be enough to just test this scenario

332
00:24:35.584 --> 00:24:37.632
The one by the listeners within range

333
00:24:38.912 --> 00:24:41.728
If we did that we could possibly go wrong

334
00:24:43.264 --> 00:24:49.408
Without testosterone we can imagine a book where the web service template didn't render multiple messages

335
00:24:50.176 --> 00:24:52.224
This scenario only works for one

336
00:24:53.248 --> 00:24:57.088
So we can add this scenario the one where there are two shouts

337
00:24:57.856 --> 00:25:00.672
It would easily catch that bug in manual testing

338
00:25:00.928 --> 00:25:03.744
I couldn't put it down with a unit test on the web server

339
00:25:05.024 --> 00:25:08.352
So we don't need to run this is a. Test every time

340
00:25:09.120 --> 00:25:10.144
In fact

341
00:25:10.656 --> 00:25:12.960
To do so would be wasteful

342
00:25:14.752 --> 00:25:18.336
How about the scenario about the listener being out of range

343
00:25:19.104 --> 00:25:21.920
Brisket bath in a web deps Cucumber run

344
00:25:22.688 --> 00:25:25.504
Would we leave ourselves vulnerable to a dangerous bug

345
00:25:27.040 --> 00:25:33.184
Well it's true that if people had messages that was not meant for them it could make us look pretty bad

346
00:25:34.208 --> 00:25:36.256
How likely is it to happen

347
00:25:37.024 --> 00:25:39.072
That logic is all in the cold in May

348
00:25:39.584 --> 00:25:43.168
The web server just rented the messages returned by the cool

349
00:25:43.936 --> 00:25:47.520
That is almost zero Risk Facebook ever leaking out

350
00:25:48.288 --> 00:25:51.872
Again a full stack test this bag it would be wasteful

351
00:25:54.432 --> 00:26:00.576
Well the same goes for the logic about the long message we know that its potential for the to be bugs in the interim

352
00:26:00.832 --> 00:26:03.136
Action of the UI for longer messages

353
00:26:03.392 --> 00:26:05.440
To make sense for us to run this one

354
00:26:06.208 --> 00:26:08.512
Baiz Market Tempe high risk

355
00:26:09.024 --> 00:26:13.120
I'm not the one where the listeners within ranges high-impact

356
00:26:13.888 --> 00:26:15.680
Explain these terms in the moment

357
00:26:16.960 --> 00:26:23.104
Now we can run the test of the top of our pyramid using those tags and the web test

358
00:26:23.360 --> 00:26:23.872
Upsetting

359
00:26:24.640 --> 00:26:29.504
Now we have three different levels of testing up pyramid that we want to run to check out code

360
00:26:29.760 --> 00:26:31.040
The unit test

361
00:26:31.296 --> 00:26:36.672
Dakota man acceptance test and the key examples running is. Test

362
00:26:37.696 --> 00:26:43.072
Let's set up a rake task to run all of these tests first with a single command

363
00:26:44.608 --> 00:26:47.168
First who created you write file

364
00:26:48.192 --> 00:26:51.520
A lot of default task depends on three tasks

365
00:26:52.032 --> 00:26:53.056
Unit test

366
00:26:53.312 --> 00:26:55.104
Core acceptance test

367
00:26:55.360 --> 00:26:57.408
And web acceptance test

368
00:26:58.944 --> 00:27:00.736
Unit test is easy to implement

369
00:27:00.992 --> 00:27:02.784
We just shout out to aspect

370
00:27:04.320 --> 00:27:06.368
Core acceptance test is very similar

371
00:27:06.880 --> 00:27:08.672
I wish a lot to Cucumber instead

372
00:27:09.952 --> 00:27:16.096
Now for the web acceptance test we just need to Shell out to Cucumber this time set to sharetea test

373
00:27:16.352 --> 00:27:17.632
Set environment variable

374
00:27:17.888 --> 00:27:20.192
Acosta tax considerations switch

375
00:27:20.704 --> 00:27:23.264
Now when we were raped from the command line

376
00:27:23.520 --> 00:27:26.080
It was all three layers of a testing pyramid

377
00:27:26.336 --> 00:27:27.872
Starting from the bottom up

378
00:27:33.504 --> 00:27:34.528
One last thing

379
00:27:35.296 --> 00:27:39.904
When we will tonight web pages we need to refer to user interface elements in action

380
00:27:40.160 --> 00:27:42.720
Buttons links text clicks Etc

381
00:27:43.488 --> 00:27:48.864
This is solution to main jog on with money sticky possible scenarios and that's good

382
00:27:49.632 --> 00:27:51.168
But it has to go somewhere

383
00:27:52.704 --> 00:27:58.848
Alondra projects it becomes useful to create abstractions copage objects to represent the things being filled in

384
00:27:59.104 --> 00:28:00.640
Clayton examined for content

385
00:28:01.152 --> 00:28:07.296
For example we might have a homepage object with a mass of cold shout then capsulated the core

386
00:28:07.552 --> 00:28:09.856
Most interact with the elements on the web page

387
00:28:10.368 --> 00:28:12.672
This allows you to easily reuse code

388
00:28:13.184 --> 00:28:14.976
And keep it easy to read

389
00:28:16.000 --> 00:28:22.144
You can easily peel page objects on your own but if you're feeling lazy there a few Libras it reduce the amount of boilerplate code

390
00:28:22.400 --> 00:28:23.168
How do you need to write

391
00:28:23.424 --> 00:28:28.032
Jeff cheesy Morgan Page object gem is it popular choice

392
00:28:29.568 --> 00:28:34.944
The page of Jake Patton is a great fit for keeping your web automation code tidy

393
00:28:35.200 --> 00:28:35.968
Thought

394
00:28:36.224 --> 00:28:42.368
We strongly recommend that you try to push as many of your test down the pyramid first

395
00:28:43.392 --> 00:28:48.512
You can use page objects together with a hexagonal architecture pot and we've shown you in this episode

396
00:28:48.768 --> 00:28:51.328
So that when you do need to hit the web UI

397
00:28:51.840 --> 00:28:54.144
You can do that through neat and tidy code

398
00:28:54.912 --> 00:28:56.192
That's it kids

399
00:28:56.448 --> 00:28:57.728
School's Out

400
00:28:57.984 --> 00:29:00.800
Time to step out into the real world

401
00:29:02.080 --> 00:29:06.944
This is been an intense episode throwing a lot of new Concepts at you

402
00:29:07.712 --> 00:29:12.832
The hexagonal architecture the stressed you patent the agile testing pyramid

403
00:29:14.112 --> 00:29:20.256
Please take time to watch this video over a few times until you understand these Concepts and

404
00:29:20.512 --> 00:29:23.072
Study the exercises in reflection questions

405
00:29:24.096 --> 00:29:29.984
We want you to remember that acceptance test don't have to be. Test

406
00:29:31.520 --> 00:29:33.312
It's off the mistake if they are

407
00:29:34.848 --> 00:29:40.224
Don't fall into the Trap of building yet another testing ice cream cone for your project

408
00:29:40.992 --> 00:29:47.136
Half develop his intestines work side-by-side to maximize the value you get from your testing and

409
00:29:47.392 --> 00:29:47.904
Bashment

410
00:29:48.160 --> 00:29:52.256
By pushing as many tests as you can down to the lowest level

411
00:29:53.280 --> 00:29:59.424
The responsibility for the health and well-being of the world's Cucumber sweets rest with you now

412
00:30:00.448 --> 00:30:03.008
Use your knowledge wisely

413
00:30:05.824 --> 00:30:08.896
If you remember one thing from the video series

414
00:30:09.152 --> 00:30:10.432
Remember this

415
00:30:11.456 --> 00:30:12.992
Software you write

416
00:30:13.248 --> 00:30:14.528
It's just a model

417
00:30:15.552 --> 00:30:19.392
A model of your team's understanding of the problem to me

418
00:30:20.672 --> 00:30:22.976
The best of the understanding is

419
00:30:23.232 --> 00:30:25.280
The best of the software will be

420
00:30:26.304 --> 00:30:30.400
Put your effort into understanding the problem together

421
00:30:30.912 --> 00:30:32.192
I'm a software

422
00:30:32.960 --> 00:30:34.240
Will take care of itself

423
00:30:36.544 --> 00:30:38.848
Goodbye from all of us on Cucumber School

424
00:30:39.360 --> 00:30:40.896
I have fun out there
