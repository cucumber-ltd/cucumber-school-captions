1
00:00:15,360 --> 00:00:18,440
Hello, and welcome back to Cucumber School!

2
00:00:18,840 --> 00:00:23,420
Last time we talked about the importance of
having readable scenarios

3
00:00:23,420 --> 00:00:27,900
and you learned some new skills with
regular expressions to help you achieve that goal

4
00:00:28,740 --> 00:00:33,000
Those skills will give you the confidence
to write scenarios exactly the way you want

5
00:00:33,000 --> 00:00:37,880
knowing you’ll be able to match the Gherkin steps
easily from your step definition code

6
00:00:39,920 --> 00:00:43,280
We emphasise readability
because from our experience

7
00:00:43,280 --> 00:00:48,020
writing Gherkin scenarios
is a software design activity

8
00:00:49,280 --> 00:00:52,340
Cucumber was created
to bridge the communication gap

9
00:00:52,340 --> 00:00:55,820
between business domain experts
and development teams

10
00:00:56,760 --> 00:01:00,800
When you collaborate with domain experts
to describe behaviour in Gherkin

11
00:01:00,800 --> 00:01:05,000
you’re expressing the group’s shared understanding
of the problem you need to solve

12
00:01:06,300 --> 00:01:09,060
The words you use in your scenarios

13
00:01:09,060 --> 00:01:13,560
can have a deep impact on the way
the software is designed

14
00:01:13,560 --> 00:01:15,780
as we’ll see in later episodes

15
00:01:17,400 --> 00:01:19,980
The more fluent you become in writing Gherkin

16
00:01:19,980 --> 00:01:24,160
the more useful a tool it becomes
to help you facilitate this communication

17
00:01:24,880 --> 00:01:29,220
Keeping your scenarios readable means
you can get feedback at any time

18
00:01:29,220 --> 00:01:31,540
about whether you’re building the right thing

19
00:01:33,080 --> 00:01:38,500
Over time, your features become
living documentation about your system

20
00:01:40,340 --> 00:01:41,960
We can’t emphasise enough

21
00:01:41,960 --> 00:01:46,400
how important it is to see your scenarios
as more than just tests

22
00:01:47,080 --> 00:01:50,220
Maintaining a living document works both ways:

23
00:01:50,220 --> 00:01:53,980
you’ll drive your solution design
from your scenarios

24
00:01:53,980 --> 00:01:57,200
but you may also have to update your Gherkin
to reflect the things you learn

25
00:01:57,200 --> 00:01:58,620
as you build the solution

26
00:01:59,500 --> 00:02:04,900
This dance back and forth between features
and solution code is what BDD is all about

27
00:02:05,860 --> 00:02:11,040
Today, we’ll learn about
feature descriptions, the Background keyword

28
00:02:11,040 --> 00:02:15,940
and about keeping scenarios and code up-to-date
with your current understanding of the project

29
00:02:17,180 --> 00:02:21,320
First, let’s catch up with
what’s been happening on the Shouty project

30
00:02:23,620 --> 00:02:29,500
While we were away, the developers of Shouty
have been busy working on the code

31
00:02:30,880 --> 00:02:32,680
Let’s have a look at what they’ve been up to

32
00:02:35,400 --> 00:02:37,440
We’ll start out by running Cucumber

33
00:02:39,900 --> 00:02:41,020
Great!

34
00:02:41,020 --> 00:02:43,580
It looks like both these scenarios
are working now -

35
00:02:44,608 --> 00:02:48,960
both the different messages
that Sean shouts are being heard by Lucy

36
00:02:50,500 --> 00:02:54,380
Let’s dig into the code
and see how these steps have been automated

37
00:02:57,280 --> 00:03:02,320
In the step definition layer
we can see that a new class has been defined

38
00:03:02,320 --> 00:03:03,560
the Network

39
00:03:04,760 --> 00:03:07,020
We’re creating an instance of the network here

40
00:03:08,820 --> 00:03:14,320
Then we pass that network instance to each
of the Person instances we create here

41
00:03:15,680 --> 00:03:20,700
So both instances of Person depend on
the same instance of network

42
00:03:22,620 --> 00:03:26,600
The Network is what allows people
to send messages to one another

43
00:03:28,720 --> 00:03:32,960
There's also a couple of new
unit test classes in the Shouty package:

44
00:03:32,960 --> 00:03:35,400
one for the Network class

45
00:03:35,400 --> 00:03:37,160
and another for the Person class

46
00:03:38,720 --> 00:03:44,280
Unit tests are fine-grained tests that define the
precise behaviour of each of these classes

47
00:03:45,340 --> 00:03:47,800
We’ll talk more about this in a future lesson

48
00:03:47,800 --> 00:03:50,640
but feel free to have a poke around
in there in the meantime

49
00:03:52,160 --> 00:03:58,480
The familiar mvn test command will
run those unit tests as well as Cucumber

50
00:04:00,060 --> 00:04:02,660
The first thing I notice coming back to the code

51
00:04:02,660 --> 00:04:07,480
is that the feature file is still talking about
the distance between Lucy and Sean

52
00:04:07,480 --> 00:04:10,240
but we haven’t actually implemented
any behaviour around that yet

53
00:04:11,940 --> 00:04:16,180
This happens to us all the time -
we have an idea for a new feature

54
00:04:16,180 --> 00:04:19,760
but then we find the problem is
too complex to solve all at once

55
00:04:19,760 --> 00:04:22,000
so we break it down into simpler steps

56
00:04:23,120 --> 00:04:27,680
If we’re not careful, little bits of that
original idea can be left around like clutter

57
00:04:27,680 --> 00:04:29,720
in the scenarios and in the code

58
00:04:30,640 --> 00:04:35,200
That clutter can get in the way
especially if plans change

59
00:04:37,240 --> 00:04:43,140
We’re definitely going to develop this behaviour
but we’ve decided to defer it to our next iteration

60
00:04:43,140 --> 00:04:46,540
Our current solution is just focussed
on broadcasting messages between

61
00:04:46,540 --> 00:04:48,080
the people on the network

62
00:04:49,620 --> 00:04:53,240
Let’s clean up the feature to
reflect that current understanding

63
00:04:55,840 --> 00:04:58,960
After the feature keyword, we have space
in a Gherkin document

64
00:04:58,960 --> 00:05:01,080
to write any arbitrary text that we like

65
00:05:01,920 --> 00:05:04,360
We call this the feature’s description

66
00:05:05,240 --> 00:05:07,960
This is a great place to write up any notes
or other details that

67
00:05:07,960 --> 00:05:10,280
can’t easily be expressed in examples

68
00:05:11,380 --> 00:05:14,960
You might have links to
wiki pages or issue trackers

69
00:05:14,960 --> 00:05:17,160
or to wireframes for example

70
00:05:19,900 --> 00:05:25,640
You can put anything you like in here, as long
as you don’t mention the magic word scenario

71
00:05:27,320 --> 00:05:32,720
A common thing to do here for a new feature
is write out the user story we’re working on

72
00:05:33,320 --> 00:05:35,640
This is a good place to start, so let’s do that

73
00:05:39,760 --> 00:05:40,360
Good

74
00:05:41,200 --> 00:05:45,040
Now we have an overarching story to guide us as we go

75
00:05:47,160 --> 00:05:52,000
Something we really like to put into the description
are the acceptance criteria or

76
00:05:52,000 --> 00:05:54,960
business rules we’re trying to implement

77
00:05:56,840 --> 00:05:59,840
In this case, we can explain that

78
00:05:59,840 --> 00:06:04,980
for the time being, we’re broadcasting to
all users, irrespective of distance

79
00:06:06,920 --> 00:06:10,800
Because we know we’ll need to
filter by proximity - later -

80
00:06:10,800 --> 00:06:15,800
we can also write a TODO list here so it’s clear
that we do intend to get to that soon

81
00:06:18,280 --> 00:06:23,680
Changing the description doesn’t change anything
about how Cucumber will run this feature

82
00:06:23,680 --> 00:06:30,280
It just helps the human beings reading this document
to understand more of what you understand

83
00:06:30,280 --> 00:06:32,360
about the system you’re building

84
00:06:35,100 --> 00:06:41,300
The step 'Given Lucy is 15m from Sean' is misleading

85
00:06:41,300 --> 00:06:45,160
since the distance between the two people
is not yet relevant in our current model

86
00:06:46,520 --> 00:06:48,360
We have this code here

87
00:06:48,360 --> 00:06:50,800
a moveTo method on Person

88
00:06:50,800 --> 00:06:53,920
that’s being called from the step definition
but doesn’t actually do anything

89
00:06:55,800 --> 00:07:00,840
Let’s simplify this code to do just what
it needs to do right now, and no more

90
00:07:02,000 --> 00:07:05,560
We can start from the scenario by
changing this single step

91
00:07:05,560 --> 00:07:07,640
to express what’s actually going on

92
00:07:08,160 --> 00:07:13,120
We’ll work on one scenario at a time, and update
the other one once we’re happy with this one

93
00:07:18,340 --> 00:07:19,300
There!

94
00:07:19,300 --> 00:07:22,620
Now we have two steps, each creating a person

95
00:07:23,480 --> 00:07:27,880
Notice we’re starting to reveal some more of
our domain language here:

96
00:07:27,880 --> 00:07:31,440
we’ve introduced the words person and name

97
00:07:33,460 --> 00:07:35,680
Person is already a part of our domain language

98
00:07:35,680 --> 00:07:38,500
so it’s nice to have that revealed
in the language of the scenario

99
00:07:39,980 --> 00:07:43,720
Name may well become an attribute
of our person soon

100
00:07:43,720 --> 00:07:47,760
so it’s also useful to have that surfaced so
we can get feedback about it from the team

101
00:07:50,480 --> 00:07:54,400
One thing we’ve lost by doing this
is the idea that, eventually

102
00:07:54,400 --> 00:07:57,900
the two people will need to be close to each other
for the message to be transmitted

103
00:07:58,960 --> 00:08:02,560
We definitely wouldn’t remove
detail like that unilaterally

104
00:08:02,560 --> 00:08:06,440
without discussing it with the other people
who were in the three amigos meeting with us

105
00:08:06,440 --> 00:08:07,840
when the example was written

106
00:08:08,800 --> 00:08:11,920
In this case, as well as adding it
to the TODO list above

107
00:08:11,920 --> 00:08:15,220
we’ve decided to update the names of
the existing scenarios

108
00:08:15,220 --> 00:08:19,400
and write a couple of new empty scenarios
to remind us to implement that behaviour later

109
00:08:21,560 --> 00:08:23,760
Now the scenario names make sense

110
00:08:23,760 --> 00:08:26,840
and we’ve got a reminder of
future scenarios we’ll need to implement

111
00:08:27,780 --> 00:08:28,820
Let's press on

112
00:08:29,840 --> 00:08:34,960
We can run Cucumber to generate
new step definition snippets for the new steps...

113
00:08:36,160 --> 00:08:38,160
and paste them into our steps file

114
00:08:39,880 --> 00:08:44,000
Now to implement these two separate steps
we have a bit of a problem

115
00:08:45,280 --> 00:08:48,600
We need the same instance of Network
available in both

116
00:08:50,240 --> 00:08:55,800
We could just assume that the Lucy step
will always run first and create it there

117
00:08:55,800 --> 00:08:57,440
but that seems fragile

118
00:08:58,040 --> 00:09:02,480
If someone wrote a new scenario
that didn’t create people in the right order

119
00:09:02,480 --> 00:09:06,520
they’d end up with no Network instance
and weird bugs

120
00:09:07,440 --> 00:09:11,100
We want our steps to be as independent as possible

121
00:09:11,100 --> 00:09:15,160
so they can be easily composed into new scenarios

122
00:09:16,440 --> 00:09:20,260
There are a couple of different ways
to create this network instance in Java

123
00:09:21,040 --> 00:09:24,360
The most straightforward is to
create a network field

124
00:09:24,360 --> 00:09:26,600
and initialize it in the declaration

125
00:09:27,460 --> 00:09:32,260
Every time Cucumber runs a scenario
it creates a new instance of your steps class

126
00:09:32,260 --> 00:09:35,240
so we’ll get a fresh instance of the 
Network for each scenario

127
00:09:36,720 --> 00:09:38,080
As an alternative

128
00:09:38,080 --> 00:09:41,540
that can be useful if you have
more complex setup to do

129
00:09:41,540 --> 00:09:42,720
you can use a hook

130
00:09:44,840 --> 00:09:47,440
We need an instance of Network
in every scenario

131
00:09:47,440 --> 00:09:50,480
so we can declare a Before Hook

132
00:09:50,480 --> 00:09:54,800
that creates one before
each scenario starts, like this

133
00:09:56,420 --> 00:10:02,500
Now we can use that Network instance
as we create Lucy and Sean in these two new steps

134
00:10:03,420 --> 00:10:06,420
It should be working again now.
Let’s run cucumber to check

135
00:10:07,980 --> 00:10:08,740
Good

136
00:10:09,520 --> 00:10:11,840
Let’s do the same with the other scenario

137
00:11:18,360 --> 00:11:22,560
OK, so we’ve cleaned things up a bit
to bring the scenarios, the code

138
00:11:22,560 --> 00:11:26,360
and our current understanding
of the problem all into sync

139
00:11:27,260 --> 00:11:31,500
What’s nice to see is how well
those new steps that create Lucy and Sean

140
00:11:31,500 --> 00:11:33,720
match the code inside the step definition

141
00:11:35,080 --> 00:11:37,920
When step definitions have to make a big leap

142
00:11:37,920 --> 00:11:41,320
to translate between our plain-language
description of the domain

143
00:11:41,320 --> 00:11:45,880
in the Gherkin scenario, and the code

144
00:11:45,880 --> 00:11:48,080
that’s usually a sign that something is wrong

145
00:11:49,740 --> 00:11:53,920
We like to see step definitions that are only
one or two lines long

146
00:11:53,920 --> 00:11:57,820
because that usually indicates
our scenarios are doing a good job

147
00:11:57,820 --> 00:12:02,120
of reflecting the domain model
in the code and vice-versa

148
00:12:04,140 --> 00:12:07,280
One problem that we still have with these scenarios

149
00:12:07,280 --> 00:12:13,440
is that we’re very fixed to only being able
to use these two characters, Lucy and Sean

150
00:12:14,600 --> 00:12:18,020
If we want to introduce anyone else
into the scenario

151
00:12:18,020 --> 00:12:20,800
we’re going to be creating
quite a lot of duplicate code

152
00:12:20,800 --> 00:12:21,900
In fact

153
00:12:21,900 --> 00:12:25,720
the two steps for creating
Lucy and Sean are almost identical

154
00:12:25,720 --> 00:12:28,040
apart from those instance variables

155
00:12:29,420 --> 00:12:30,940
Now on a real project

156
00:12:30,940 --> 00:12:33,440
we wouldn’t bother about
such a tiny amount of duplication

157
00:12:33,440 --> 00:12:34,920
at this early stage...

158
00:12:35,440 --> 00:12:37,380
but this isn’t a real project!

159
00:12:37,380 --> 00:12:41,760
Let’s play with the skills we learned
last week to make a single step definition

160
00:12:41,760 --> 00:12:44,660
that can create Lucy or Sean

161
00:12:45,320 --> 00:12:50,280
The first problem we’ll need to tackle
is these hard-coded instance variable names

162
00:12:50,960 --> 00:12:54,400
We can use a map to store
all the people involved in the scenario

163
00:12:56,720 --> 00:12:59,140
Let’s try replacing Lucy first

164
00:12:59,700 --> 00:13:04,120
We’ll start by creating a new map
in the before hook, like this

165
00:13:04,760 --> 00:13:07,260
Now we can story Lucy in a key in that map

166
00:13:08,000 --> 00:13:11,600
We’ll use her name as the key
hard-coding it for now

167
00:13:12,740 --> 00:13:18,880
Finally, where we check Lucy’s messages heard
here in the assertion

168
00:13:18,880 --> 00:13:20,680
we need to fetch her out of the map

169
00:13:22,560 --> 00:13:24,640
With that little refactoring done

170
00:13:24,640 --> 00:13:28,480
we can now try and make this first step
generic for any name

171
00:13:30,320 --> 00:13:34,520
Using your new found regular expression skills
from the last lesson

172
00:13:34,520 --> 00:13:38,660
you’ll know that if we surround the word
Lucy here with a capture group

173
00:13:38,660 --> 00:13:42,500
we’ll have the name passed into our
step definition as an argument, here

174
00:13:43,780 --> 00:13:46,660
Now we can use that as the key in the map

175
00:13:48,500 --> 00:13:55,480
Finally, we can replace the hard-coded Lucy
in the pattern with \w+

176
00:13:55,480 --> 00:13:59,060
meaning one or more word characters

177
00:13:59,920 --> 00:14:03,080
Now we have a totally generic step

178
00:14:04,860 --> 00:14:10,300
If we try and run Cucumber now
we get an error about an ambiguous match

179
00:14:10,940 --> 00:14:12,640
Our generic step definition

180
00:14:12,640 --> 00:14:16,600
is now matching the step
'a person named Sean'...

181
00:14:17,580 --> 00:14:19,640
but so is the original one!

182
00:14:20,340 --> 00:14:25,240
In bigger projects, this can be a real issue
so this warning is important

183
00:14:26,200 --> 00:14:31,320
Let’s remove the old step definition
and fetch Sean from the map, here

184
00:14:31,320 --> 00:14:33,040
where he shouts his message

185
00:14:35,460 --> 00:14:37,920
Great, we’re green again!

186
00:14:39,320 --> 00:14:43,080
Let’s switch back to the feature
to show you one more technique

187
00:14:43,080 --> 00:14:45,600
for improving the readability of your scenarios

188
00:14:47,780 --> 00:14:52,400
When we have common context steps - the givens -

189
00:14:52,400 --> 00:14:55,080
in all the scenarios in our feature

190
00:14:55,080 --> 00:14:57,960
it can sometimes be useful to get those out of the way

191
00:14:59,260 --> 00:15:03,600
We can literally move them into the background

192
00:15:03,600 --> 00:15:06,760
using a background keyword, like this

193
00:15:08,720 --> 00:15:13,220
As far as Cucumber is concerned
these scenarios haven’t changed

194
00:15:13,220 --> 00:15:17,500
It will still create both Lucy and Sean
as the first things it does

195
00:15:17,500 --> 00:15:19,860
when running each of these scenarios

196
00:15:20,600 --> 00:15:23,380
But from a readability point of view

197
00:15:23,380 --> 00:15:29,540
we can now see more clearly what’s important
and interesting about these two scenarios -

198
00:15:29,540 --> 00:15:32,520
in this case, the message being shouted

199
00:15:34,560 --> 00:15:37,860
Notice we just went straight into When steps
in our scenarios

200
00:15:37,860 --> 00:15:39,640
That’s absolutely fine!

201
00:15:39,640 --> 00:15:43,960
We still have a context for the scenario
but we’ve chosen to push it off into the background

202
00:15:45,240 --> 00:15:50,620
Again, it’s debatable whether we’d bother
to use a Background yet on a real project

203
00:15:50,620 --> 00:15:52,900
but this at least illustrates the technique

204
00:15:53,560 --> 00:15:58,480
Hopefully, you’re already thinking about
how you can use it in your own code

205
00:15:59,980 --> 00:16:06,020
To maintain trust in the BDD process,
it’s important to keep your features fresh

206
00:16:07,040 --> 00:16:10,520
Even when you drive the development
from BDD scenarios

207
00:16:10,520 --> 00:16:14,420
you’ll still learn lessons from the implementation

208
00:16:14,420 --> 00:16:17,620
that might need to be
fed back into your Gherkin documentation

209
00:16:19,260 --> 00:16:23,800
In this case, we discovered that
we could find a smaller slice of this story

210
00:16:23,800 --> 00:16:27,920
and defer the business rule about proximity
until our next iteration

211
00:16:28,740 --> 00:16:32,360
Splitting stories like this
is a powerful agile technique

212
00:16:32,360 --> 00:16:35,020
and one that BDD can help you to master

213
00:16:36,280 --> 00:16:38,300
Now we have a clean code base

214
00:16:38,300 --> 00:16:42,220
and suite of scenarios that reflects
the current state of the system’s development

215
00:16:43,700 --> 00:16:46,720
We’re ready to start the next iteration!

216
00:16:47,660 --> 00:16:49,640
Captions created by Jayson Smith for Cucumber Ltd.
