WEBVTT

1
00:00:15.360 --> 00:00:18.432
Hello and welcome back to cucumber School

2
00:00:18.688 --> 00:00:24.832
Last time we talked about the importance of having readable scenarios and you learn some new skills

3
00:00:25.088 --> 00:00:27.904
Regular Expressions to help you achieve that goal

4
00:00:28.672 --> 00:00:34.816
Those skills will give you the confidence to write scenario is exactly the way you want knowing you'll be able to match the cooking

5
00:00:35.072 --> 00:00:37.888
In steps easily from your step definition code

6
00:00:39.680 --> 00:00:43.008
We emphasized readability because from our experience

7
00:00:43.264 --> 00:00:47.872
Right angle can scenarios is a software design activity

8
00:00:49.152 --> 00:00:55.296
Cucumber was created to bridge the communication gap between business to Maine experts and development team

9
00:00:56.832 --> 00:01:00.416
When you collaborate with the main exposed to describe behavior and cooking

10
00:01:00.672 --> 00:01:05.024
You're expressing the group's shared understanding of the problem you need to solve

11
00:01:06.304 --> 00:01:10.912
The words you use in your scenarios can have a deep impact

12
00:01:11.168 --> 00:01:12.960
On the way the software is designed

13
00:01:13.472 --> 00:01:15.520
I will see you in later episodes

14
00:01:17.312 --> 00:01:19.616
Tamiflu and you become in writing carican

15
00:01:19.872 --> 00:01:23.968
The more useful tool it becomes to help you facilitate this communication

16
00:01:24.992 --> 00:01:26.528
Keeping us in our as readable

17
00:01:26.784 --> 00:01:31.392
Made you can get feedback at anytime about whether you're building the right thing

18
00:01:32.928 --> 00:01:37.024
All the time your features become living documentation

19
00:01:37.280 --> 00:01:38.304
About your system

20
00:01:40.352 --> 00:01:46.496
We taught emphasize enough how important it is to see your scenarios is more than just tests

21
00:01:46.752 --> 00:01:52.896
Maintaining a living document was both ways you'll drive yourself Lucian design from your scenario

22
00:01:53.920 --> 00:01:58.528
But you may also have to update your gherkin to reflect the things you learn as you feel the solution

23
00:01:59.296 --> 00:02:04.928
Just Dance back and forth between features and solution code is what BTD is all about

24
00:02:05.952 --> 00:02:08.768
Today we learn about feature descriptions

25
00:02:09.280 --> 00:02:10.816
The background keyword

26
00:02:11.072 --> 00:02:15.936
What about keeping cenario's and code up-to-date with your current understanding of the project

27
00:02:17.216 --> 00:02:17.984
First

28
00:02:18.496 --> 00:02:21.312
Let's catch up with what's been happening on the Shanti project

29
00:02:23.616 --> 00:02:25.152
While we were away

30
00:02:25.408 --> 00:02:29.504
The developers of shouty I've been busy working on the code

31
00:02:30.784 --> 00:02:32.576
Let's have a look at what they've been up to

32
00:02:35.392 --> 00:02:37.440
We'll start out by running cucumber

33
00:02:39.744 --> 00:02:40.768
Right

34
00:02:41.024 --> 00:02:43.584
It looks like both decent or is it working now

35
00:02:44.608 --> 00:02:48.960
Both two different messages that shown shouts of being hurt by Lucy

36
00:02:50.496 --> 00:02:51.776
Let's dig into the code

37
00:02:52.032 --> 00:02:54.336
And see how these steps have been automated

38
00:02:57.152 --> 00:02:58.944
In the steppe definition layer

39
00:02:59.200 --> 00:03:01.504
We can see that the new classes been defined

40
00:03:02.272 --> 00:03:03.296
The network

41
00:03:04.832 --> 00:03:07.136
The creating an instance of a network here

42
00:03:08.928 --> 00:03:14.304
Then we pass that Network instance to each of the person instances we create here

43
00:03:15.584 --> 00:03:19.424
So both instances of person depend on the same instance

44
00:03:19.680 --> 00:03:20.448
I'm Network

45
00:03:22.496 --> 00:03:26.592
The network is what allows people to send messages to one another

46
00:03:28.640 --> 00:03:34.784
They're also a couple of new unit test classes in the Chateau package one for the network class

47
00:03:35.040 --> 00:03:41.184
And another one for the person class unit test to find grind test at Define

48
00:03:41.440 --> 00:03:47.584
The precise behavior of each of these classes will talk more about this in a future lesson

49
00:03:47.840 --> 00:03:51.936
That feel free to have a poke around in there in the meantime

50
00:03:52.192 --> 00:03:55.008
The Familiar Maven test command

51
00:03:55.264 --> 00:03:58.336
I'll run those unit tests as well as cucumber

52
00:03:59.872 --> 00:04:02.432
The first thing I noticed coming back to the code

53
00:04:02.688 --> 00:04:08.832
Is that a feature file is still talking about the distance between Lucy and Sean but we haven't actually implemented

54
00:04:09.088 --> 00:04:15.232
Any Behavior around that yet this happens to us all the time we have an idea for a new face

55
00:04:15.488 --> 00:04:16.000
Picture

56
00:04:16.256 --> 00:04:22.399
But then we find the problem is too complex to solve all at once so we break it down into smaller steps

57
00:04:22.655 --> 00:04:28.799
If we're not careful little bits of the original idea can we left around like clutter in the scenarios

58
00:04:29.055 --> 00:04:35.199
And in the code that close I can get in the way especially if plans change

59
00:04:37.247 --> 00:04:43.391
We're definitely going to develop his behavior but we decided to defer it to our next iteration

60
00:04:43.647 --> 00:04:49.023
Constellation is just focused on broadcasting messages between the people on the network

61
00:04:49.535 --> 00:04:53.375
Let's clean up the feature to reflect our current understanding

62
00:04:54.655 --> 00:05:00.799
How to defeat your keyword we have a space in a gherkin document to write any arbitrary text that we like

63
00:05:01.055 --> 00:05:07.199
The coldest the features description this is a great place to write a penny notes

64
00:05:07.455 --> 00:05:13.599
All the details account easily be expressed and examples you might have links to Wiki Pages or

65
00:05:13.855 --> 00:05:19.999
Issue trackers what's a wireframes for example

66
00:05:20.255 --> 00:05:26.399
You can buy anything you like in here as long as you don't mention the magic word scenario

67
00:05:26.655 --> 00:05:29.983
Oh. nothing to do here for a new feature

68
00:05:30.239 --> 00:05:35.871
Is the right out that uses story with working on this is a good place to stop so let's do that

69
00:05:39.455 --> 00:05:40.735
Good

70
00:05:41.247 --> 00:05:45.087
Now we have an overarching story to guide us as we go

71
00:05:46.879 --> 00:05:53.023
Something would really like to put into the description of the acceptance criteria all business rules

72
00:05:53.535 --> 00:05:55.071
We're trying to implement

73
00:05:56.863 --> 00:05:57.887
And this case

74
00:05:58.143 --> 00:05:59.423
We can explain that

75
00:05:59.679 --> 00:06:05.311
For the time being we broadcasting 200 uses irrespective of distance

76
00:06:06.591 --> 00:06:10.431
Because we know it will need to filter by proximity later

77
00:06:10.943 --> 00:06:15.807
We can also write a to-do list here so it's clear that we do intend to get to that soon

78
00:06:18.367 --> 00:06:19.647
Changing the description

79
00:06:20.159 --> 00:06:23.231
Doesn't change anything about how cucumber will run this feature

80
00:06:23.999 --> 00:06:30.143
It just helps the human beings reading this document to understand more of what you understand

81
00:06:30.399 --> 00:06:32.703
About the system You're Building

82
00:06:35.007 --> 00:06:40.895
The step given Lucy is 15 meters from Sean is misleading

83
00:06:41.151 --> 00:06:46.015
Since the distance between the two people is not yet relevant in our current model

84
00:06:46.271 --> 00:06:47.807
We have this code here

85
00:06:48.319 --> 00:06:54.463
I moved to methadone person that's been cold from the step definition but doesn't actually do anything

86
00:06:55.743 --> 00:07:01.887
Let's simplify this code to do just what it needs to do right now and no more

87
00:07:02.143 --> 00:07:05.215
We can start from the scenario by changing the single-step

88
00:07:05.471 --> 00:07:07.775
To express what's actually going on

89
00:07:08.031 --> 00:07:14.175
But welcome one scenario was a time I don't date the other one was for happy with this one

90
00:07:18.271 --> 00:07:19.039
That

91
00:07:19.295 --> 00:07:20.831
Now we have two steps

92
00:07:21.087 --> 00:07:22.623
H creating a person

93
00:07:23.135 --> 00:07:27.231
Notice for starting to reveal some more vodka main language here

94
00:07:27.999 --> 00:07:29.791
We've introduced the words person

95
00:07:30.303 --> 00:07:31.839
And name

96
00:07:33.119 --> 00:07:38.495
Pistons already part about the main language so it's nice to have that revealed in the language of the scenario

97
00:07:39.263 --> 00:07:45.407
Name May welder coming out your beautiful person soon so it's also useful to have that stuff

98
00:07:45.663 --> 00:07:47.711
So we can get feedback about your from the team

99
00:07:50.527 --> 00:07:54.367
One thing with loss by doing this is the idea that eventually

100
00:07:54.623 --> 00:07:57.951
The two people need to be close to each other for the message to be transmitted

101
00:07:58.975 --> 00:08:02.303
We definitely wouldn't remove detail like that unilaterally

102
00:08:02.559 --> 00:08:07.679
Without discussing it with the other people who were in The Three Amigos mating with us when the example was written

103
00:08:08.959 --> 00:08:15.103
In this case is why was adding it to the to-do list above we decided to update the names of the existing scenarios

104
00:08:15.359 --> 00:08:19.455
Write a couple of new empty scenarios to remind us to implement that behavior later

105
00:08:21.247 --> 00:08:27.391
Now the cynara name is make sense I mean what's a reminder of future scenarios will need to implement

106
00:08:27.647 --> 00:08:28.671
Let's Press On

107
00:08:29.951 --> 00:08:34.815
We can run cucumber to generate new Step definition Snippets for the new steps

108
00:08:36.095 --> 00:08:38.143
And paste them into a step file

109
00:08:39.935 --> 00:08:44.031
Now to implement these two separate steps we have a bit of a problem

110
00:08:45.311 --> 00:08:48.639
We need the same instance of network available in both

111
00:08:50.431 --> 00:08:55.551
We could just assume that the Lucy step will always run first and create it die

112
00:08:55.807 --> 00:08:57.343
That seems fragile

113
00:08:58.111 --> 00:09:01.951
If someone wrote a new scenario that didn't create people in the right order

114
00:09:02.463 --> 00:09:04.767
They turned it was no network instance

115
00:09:05.023 --> 00:09:06.559
And weird bugs

116
00:09:07.583 --> 00:09:10.655
We want our steps to be as independent as possible

117
00:09:10.911 --> 00:09:15.007
So that they can be easily composed into new scenarios

118
00:09:16.543 --> 00:09:20.383
There a couple of different ways to create this network instance in Java

119
00:09:20.639 --> 00:09:23.967
The most straightforward is to create a network field

120
00:09:24.223 --> 00:09:26.527
Initialize it in the Declaration

121
00:09:27.295 --> 00:09:31.903
Everytime cucumber runs this scenario it creates a new instance of your steps class

122
00:09:32.159 --> 00:09:35.231
To look at the fresh instance of the network for every scenario

123
00:09:36.255 --> 00:09:41.119
As an alternative that can be useful if you have more complex set up to do

124
00:09:41.631 --> 00:09:42.911
You can use a hook

125
00:09:44.703 --> 00:09:47.263
We need an instance of networking every scenario

126
00:09:47.519 --> 00:09:53.663
So we can declare a before hook that creates one for each scenario starts

127
00:09:53.919 --> 00:09:54.687
Like this

128
00:09:56.479 --> 00:10:02.367
Now we can use that Network instances we create Lucy and Sean and these two new steps

129
00:10:03.391 --> 00:10:06.463
It should be working again now let's run cucumber to check

130
00:10:07.999 --> 00:10:08.511
Good

131
00:10:09.535 --> 00:10:11.583
Let's do the same with the other scenario

132
00:11:17.631 --> 00:11:23.775
Okay so it's clean things up a bit to bring the scenarios the code and I'll current understand

133
00:11:24.031 --> 00:11:24.799
Meaning of the problem

134
00:11:25.055 --> 00:11:26.335
Oil into sink

135
00:11:26.847 --> 00:11:31.199
What's nice to say it's how well does new steps to create lucene sean

136
00:11:31.455 --> 00:11:33.759
Plastic coated sidestep definition

137
00:11:35.039 --> 00:11:37.599
One Step definitions have to make a big leaf

138
00:11:37.855 --> 00:11:42.719
To translate between a plain language description of the domain and the gherkin scenario

139
00:11:43.743 --> 00:11:44.767
On the code

140
00:11:45.791 --> 00:11:48.095
That's usually a sign that something is wrong

141
00:11:49.631 --> 00:11:53.215
We like to see step definitions that are only one or two lines long

142
00:11:53.983 --> 00:12:00.127
Because that usually indicates a scenario is a doing a good job of reflecting the demand model in the code

143
00:12:00.895 --> 00:12:01.919
And vice versa

144
00:12:03.711 --> 00:12:07.039
One problem that we still have with a scenarios

145
00:12:07.295 --> 00:12:13.183
Is it weird very fixed the only being able to use these two characters Lucy and Sean

146
00:12:14.463 --> 00:12:17.535
If we want to introduce anyone else into the scenario

147
00:12:18.047 --> 00:12:21.375
We're going to be creating quite a lot of duplicate code in fact

148
00:12:21.887 --> 00:12:25.215
The two steps for creating loose and Shana almost identical

149
00:12:25.727 --> 00:12:28.031
Apart from those instance variables

150
00:12:28.799 --> 00:12:34.687
I want a real project we wouldn't bother about such a tiny amount of duplication at this early stage

151
00:12:35.455 --> 00:12:39.807
But this isn't the real project let's play with the skills we learned last week

152
00:12:40.063 --> 00:12:43.135
To make a single step definition that can create Lucy

153
00:12:43.391 --> 00:12:44.671
Oshun

154
00:12:44.927 --> 00:12:50.047
The first problem will need to tackle is hard-coded instance variable names

155
00:12:51.071 --> 00:12:54.399
We can use a map to store all the people involved in this scenario

156
00:12:56.703 --> 00:12:59.007
Let's try replacing Lucy first

157
00:12:59.775 --> 00:13:03.871
Will stop by creating a new map in the before hook like this

158
00:13:04.895 --> 00:13:07.199
Now we can still lose you in a can that Ma

159
00:13:07.967 --> 00:13:09.503
Will you send names the key

160
00:13:09.759 --> 00:13:11.295
Hard coating it for now

161
00:13:12.831 --> 00:13:13.599
Finally

162
00:13:14.623 --> 00:13:16.671
Where WeChat loses messages hurt

163
00:13:16.927 --> 00:13:17.951
Hernia surgeon

164
00:13:18.975 --> 00:13:20.767
We need to factor out of the map

165
00:13:22.559 --> 00:13:24.351
Without me to refund ringtone

166
00:13:24.607 --> 00:13:26.655
We can now try and make this first step

167
00:13:26.911 --> 00:13:28.703
Generic for any name

168
00:13:30.239 --> 00:13:34.079
Using your newfound regular expression skills from the last lesson

169
00:13:34.591 --> 00:13:38.175
You'll know that if we surround would Lucy hair with a capture group

170
00:13:38.687 --> 00:13:42.271
Will have a name past into a step definition is an argument here

171
00:13:43.295 --> 00:13:45.087
Now we can use that

172
00:13:45.343 --> 00:13:46.623
At the K in the map

173
00:13:48.415 --> 00:13:54.559
Finally we can replace the hard-coded Lucy in the pattern with backslash W plus

174
00:13:55.327 --> 00:13:58.911
Meaning one or more word characters

175
00:13:59.935 --> 00:14:03.007
Now we have a totally generic step

176
00:14:04.799 --> 00:14:10.175
If we try and run cucumber now we get an error about an ambiguous match

177
00:14:10.943 --> 00:14:14.015
Are generic step definition is not matching the step

178
00:14:14.527 --> 00:14:16.575
A person named Sean

179
00:14:17.599 --> 00:14:19.647
But so is the original one

180
00:14:20.415 --> 00:14:22.975
And bigger projects this can be a real issue

181
00:14:23.231 --> 00:14:25.023
So this one is important

182
00:14:26.047 --> 00:14:30.911
Let's remove the old steppe definition infection from the map here

183
00:14:31.423 --> 00:14:32.959
Bike shops is message

184
00:14:35.519 --> 00:14:36.287
Great

185
00:14:36.543 --> 00:14:37.823
Migraine again

186
00:14:39.359 --> 00:14:45.503
Let's switch back to the future to show you one more technique for improving the readability of your scenarios

187
00:14:47.807 --> 00:14:50.111
What we have common contact steps

188
00:14:50.879 --> 00:14:51.903
The Givens

189
00:14:52.415 --> 00:14:54.463
Anno listeners enough feature

190
00:14:54.975 --> 00:14:58.047
I can sometimes be useful to get those out of the way

191
00:14:59.327 --> 00:15:03.167
We can literally move them into the background

192
00:15:03.679 --> 00:15:06.751
Using a background keyword like this

193
00:15:08.543 --> 00:15:12.639
As far as cucumbers concerned these scenarios haven't changed

194
00:15:13.151 --> 00:15:19.295
It was still create bugs Lucy and shown at the first things it does when running each of these scenarios

195
00:15:20.575 --> 00:15:22.879
But from a readability point of view

196
00:15:23.391 --> 00:15:28.767
We can now see more clearly what's important and interesting about these two scenarios

197
00:15:29.535 --> 00:15:30.559
In this case

198
00:15:30.815 --> 00:15:32.351
The message being shouted

199
00:15:34.655 --> 00:15:39.263
Notice we just went straight into when steps in Austin Oreos that's absolutely fine

200
00:15:39.519 --> 00:15:43.871
We still have a contact for the scenario but we've chosen to push it off into the background

201
00:15:45.151 --> 00:15:50.015
Again it's debatable whether we bother to use a background yet on a real project

202
00:15:50.527 --> 00:15:52.831
But this at least illustrates the technique

203
00:15:53.599 --> 00:15:58.719
Hopefully you're already thinking about how you can use it in your own code

204
00:15:59.999 --> 00:16:02.815
To maintain trust in the bdd process

205
00:16:03.327 --> 00:16:05.887
It's important to keep your features fresh

206
00:16:07.167 --> 00:16:10.239
Even when you drive the development from bdd scenarios

207
00:16:10.495 --> 00:16:14.079
He'll still then lessons from the implementation

208
00:16:14.335 --> 00:16:17.663
That might need to be fed back into yoga Kentucky imitation

209
00:16:19.199 --> 00:16:20.223
In this case

210
00:16:20.479 --> 00:16:23.551
We discovered that we could find a smaller slice of the story

211
00:16:23.807 --> 00:16:27.903
The further business rule about proximity until I next iteration

212
00:16:28.671 --> 00:16:31.999
Splitting stories like this is a powerful agile technique

213
00:16:32.255 --> 00:16:34.815
I'm undefeated he can help you to master

214
00:16:36.351 --> 00:16:42.239
Now we have a clean code base and a sweet of scenarios that reflects the current state of the system's development

215
00:16:43.775 --> 00:16:46.847
They're ready to start the next iteration
