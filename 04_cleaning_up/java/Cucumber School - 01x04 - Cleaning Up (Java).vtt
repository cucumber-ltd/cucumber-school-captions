WEBVTT

1
00:00:15.360 --> 00:00:18.432
Hello, and welcome back to Cucumber School

2
00:00:18.688 --> 00:00:24.832
Last time we talked about the importance of
having readable scenarios

3
00:00:25.088 --> 00:00:27.904
and you learned some new skills with
regular expressions to help you achieve that goal

4
00:00:28.416 --> 00:00:34.560
Those skills will give you the confidence
to write scenarios exactly the way you want

5
00:00:34.816 --> 00:00:37.888
knowing you’ll be able to match the Gherkin steps
easily from your step definition code

6
00:00:39.424 --> 00:00:45.568
We emphasise readability because

7
00:00:45.824 --> 00:00:48.128
from our experience writing Gherkin scenarios
is a software design activity

8
00:00:48.896 --> 00:00:55.808
Cucumber was created to bridge the communication gap
between business domain experts and development teams

10
00:00:56.320 --> 00:01:02.464
When you collaborate with domain experts
to describe behaviour in Gherkin

11
00:01:02.720 --> 00:01:05.536
you’re expressing the group’s shared understanding
of the problem you need to solve

12
00:01:05.792 --> 00:01:13.216
The words you use in your scenarios can have
a deep impact on the way the software is designed

14
00:01:13.472 --> 00:01:15.776
as we’ll see in later episodes

15
00:01:16.288 --> 00:01:22.432
The more fluent you become in writing Gherkin,

the more useful a tool it becomes
to help you facilitate this communication

16
00:01:22.688 --> 00:01:28.832
Keeping your scenarios readable means
you can get feedback at any time

17
00:01:29.088 --> 00:01:35.232
about whether you’re building the right thing

18
00:01:35.488 --> 00:01:38.560
Over time, your features become
living documentation about your system

19
00:01:38.816 --> 00:01:44.960
We can’t emphasize enough how important it is
to see your scenarios as more than just tests

20
00:01:45.216 --> 00:01:51.360
Maintaining a living document works both ways:

21
00:01:51.616 --> 00:01:57.760
you’ll drive your solution design
from your scenarios

but you may also have to update your Gherkin
to reflect the things you learn

as you build the solution

22
00:01:58.016 --> 00:02:04.160
This dance back and forth between features
and solution code is what BDD is all about

23
00:02:04.416 --> 00:02:10.816
Today, we’ll learn about
feature descriptions, the Background keyword

25
00:02:11.072 --> 00:02:15.936
and about keeping scenarios and code up-to-date
with your current understanding of the project

27
00:02:16.960 --> 00:02:21.312
First, let’s catch up with
what’s been happening on the Shouty project

28
00:02:23.616 --> 00:02:29.504
While we were away, the developers of Shouty
have been busy working on the code. 

30
00:02:30.784 --> 00:02:32.576
Let’s have a look at what they’ve been up to

31
00:02:35.392 --> 00:02:37.440
We’ll start out by running Cucumber

32
00:02:39.744 --> 00:02:40.768
Great!

33
00:02:41.024 --> 00:02:43.584
It looks like both these scenarios
are working now -

34
00:02:44.608 --> 00:02:48.960
both the different messages that Sean shouts
are being heard by Lucy

35
00:02:50.496 --> 00:02:54.366
Let’s dig into the code
and see how these steps have been automated

37
00:02:57.152 --> 00:03:01.760
In the step definition layer,
we can see that a new class has been defined

39
00:03:02.272 --> 00:03:03.552
the Network

40
00:03:04.832 --> 00:03:07.136
We’re creating an instance of the network here

41
00:03:08.928 --> 00:03:14.304
Then we pass that network instance to each
of the Person instances we create here

42
00:03:15.584 --> 00:03:20.704
So both instances of Person depend on
the same instance of network

44
00:03:22.496 --> 00:03:26.592
The Network is what allows people
to send messages to one another

46
00:03:28.640 --> 00:03:34.784
There are also a couple of new unit test classes
in the Shouty package.

47
00:03:35.040 --> 00:03:41.184
One for the Network class
and another one for the Person class

48
00:03:41.440 --> 00:03:47.584
Unit tests are fine-grained tests that define
the precise behaviour of each of those classes

49
00:03:47.840 --> 00:03:51.936
We’ll talk more about this in a future lesson
but feel free to have a poke around in there

in the meantime

50
00:03:52.192 --> 00:03:58.336
The familiar `mvn test` command
will run those unit tests as well as Cucumber

52
00:03:59.872 --> 00:04:02.432
The first thing I notice coming back to the code

53
00:04:02.688 --> 00:04:08.832
is that the feature file is still talking about
the distance between Lucy and Sean

54
00:04:09.088 --> 00:04:15.232
but we haven’t actually implemented
any behaviour around that yet

55
00:04:15.488 --> 00:04:16.000
This happens to us all the time -
we have an idea for a new feature

56
00:04:16.256 --> 00:04:22.399
but then we find the problem is
too complex to solve all at once

so we break it down into simpler steps

57
00:04:22.655 --> 00:04:28.799
If we’re not careful, little bits of that
original idea can be left around like clutter

in the scenarios and in the code

58
00:04:29.055 --> 00:04:35.199
That clutter can get in the way
especially if plans change

59
00:04:37.247 --> 00:04:43.391
We’re definitely going to develop this behaviour
but we’ve decided to defer it to our next iteration

60
00:04:43.647 --> 00:04:49.023
Our current solution is just focused
on broadcasting messages between

the people on the network

61
00:04:49.535 --> 00:04:53.375
Let’s clean up the feature to
reflect that current understanding

62
00:04:54.655 --> 00:05:00.799
After the feature keyword, we have space
in a Gherkin document

to write any arbitrary text that we like

63
00:05:01.055 --> 00:05:07.199
We call this the feature’s description

64
00:05:07.455 --> 00:05:13.599
This is a great place to write up any notes
or other details that

can’t easily be expressed in examples

65
00:05:13.855 --> 00:05:19.999
You might have links to wiki pages
or issue trackers, or to wireframes

66
00:05:20.255 --> 00:05:26.399
You can put anything you like in here, as long
as you don’t mention the magic word scenario

67
00:05:26.655 --> 00:05:29.983
A common thing to do here for a new feature
is write out the user story we’re working on

68
00:05:30.239 --> 00:05:35.871
This is a good place to start, so let’s do that

69
00:05:39.455 --> 00:05:40.735
Good

70
00:05:41.247 --> 00:05:45.087
Now we have an overarching story to guide us as we go

71
00:05:46.879 --> 00:05:53.023
Something we really like to put into the description
are the acceptance criteria or business rules

72
00:05:53.535 --> 00:05:55.071
we’re trying to implement

73
00:05:56.863 --> 00:05:59.423
In this case, we can explain that,

74
00:05:58.143 --> 00:05:59.423
We can explain that

75
00:05:59.679 --> 00:06:05.311
for the time being, we’re broadcasting to
all users, irrespective of distance

76
00:06:06.591 --> 00:06:10.431
Because we know we’ll need to
filter by proximity - later -

77
00:06:10.943 --> 00:06:15.807
we can also write a todo list here so it’s clear
that we do intend to get to that soon

78
00:06:18.367 --> 00:06:23.231
Changing the description doesn’t change anything
about how Cucumber will run this feature

80
00:06:23.999 --> 00:06:30.143
It just helps the human beings reading this document
to understand more of what you understand 

81
00:06:30.399 --> 00:06:32.703
about the system you’re building

82
00:06:35.007 --> 00:06:40.895
The step “Given Lucy is 15m from Sean” is misleading

83
00:06:41.151 --> 00:06:46.015
since the distance between the two people
is not yet relevant in our current model

84
00:06:46.271 --> 00:06:47.807
We have this code here

85
00:06:48.319 --> 00:06:49.000
a move to method on Person

85
00:06:49.000 --> 00:06:54.463
that’s being called from the step definition
but doesn’t actually do anything

86
00:06:55.743 --> 00:07:01.887
Let’s simplify this code to do just what
it needs to do right now, and no more

87
00:07:02.143 --> 00:07:05.215
We can start from the scenario by
changing this single step 

88
00:07:05.471 --> 00:07:07.775
to express what’s actually going on

89
00:07:08.031 --> 00:07:19.039
We’ll work on one scenario at a time, and update
the other one once we’re happy with this one

91
00:07:19.295 --> 00:07:22.623
Now we have two steps, each creating a person

93
00:07:23.135 --> 00:07:27.231
Notice we’re starting to reveal some more of
our domain language here:

94
00:07:27.999 --> 00:07:31.839
we’ve introduced the words Person and name

96
00:07:33.119 --> 00:07:38.495
Person is already a part of our domain language,
so it’s nice to have that revealed

in the language of the scenario

97
00:07:39.263 --> 00:07:45.407
Name may well become an attribute
of our person soon

98
00:07:45.663 --> 00:07:47.711
so it’s also useful to have that surfaced so
we can get feedback about it from the team

99
00:07:50.527 --> 00:07:54.367
One thing we’ve lost by doing this
is the idea that, eventually

100
00:07:54.623 --> 00:07:57.951
the two people will need to be close to each other
for the message to be transmitted

101
00:07:58.975 --> 00:08:02.303
We definitely wouldn’t remove
detail like that unilaterally

102
00:08:02.559 --> 00:08:07.679
without discussing it with the other people
who were in the three amigos meeting with us

when the example was written

103
00:08:08.959 --> 00:08:15.103
In this case, as well as adding it
to the TODO list above

we’ve decided to update the names of
the existing scenarios

104
00:08:15.359 --> 00:08:19.455
and write a couple of new empty scenarios
to remind us to implement that behaviour later

105
00:08:21.247 --> 00:08:27.391
Now the scenario names make sense

and we’ve got a reminder of
future scenarios we’ll need to implement

106
00:08:27.647 --> 00:08:28.671
Let's press on

107
00:08:29.951 --> 00:08:34.815
We can run Cucumber to generate
new step definition snippets for the new steps

108
00:08:36.095 --> 00:08:38.143
and paste them into our steps file

109
00:08:39.935 --> 00:08:44.031
Now to implement these two separate steps
we have a bit of a problem

110
00:08:45.311 --> 00:08:48.639
We need the same instance of Network
available in both

111
00:08:50.431 --> 00:08:55.551
We could just assume that the Lucy step
will always run first and create it there

112
00:08:55.807 --> 00:08:57.343
but that seems fragile

113
00:08:58.111 --> 00:09:01.951
If someone wrote a new scenario
that didn’t create people in the right order

114
00:09:02.463 --> 00:09:06.559
they’d end up with no Network instance,
and weird bugs

116
00:09:07.583 --> 00:09:10.655
We want our steps to be as independent as possible

117
00:09:10.911 --> 00:09:15.007
so they can be easily composed into new scenarios

118
00:09:16.543 --> 00:09:20.383
There are a couple of different ways to create this
network instance in Java

119
00:09:20.639 --> 00:09:26.527
The most straightforward is to create a network
field and initialize it in the declaration

121
00:09:27.295 --> 00:09:31.903
Every time Cucumber runs a scenario it
creates a new instance of your steps class

122
00:09:32.159 --> 00:09:35.231
so we’ll get a fresh instance of the Network
for each scenario

123
00:09:36.255 --> 00:09:42.911
An alternative, that can be useful if you have
more complex setup to do, is to use a hook

125
00:09:44.703 --> 00:09:47.263
We need an instance of Network in every scenario

126
00:09:47.519 --> 00:09:54.687
so we can declare a Before Hook that creates one
before each scenario starts, like this

128
00:09:56.479 --> 00:10:02.367
Now we can use that Network instance
as we create Lucy and Sean in these two new steps

129
00:10:03.391 --> 00:10:06.463
It should be working again now.
Let’s run cucumber to check

130
00:10:07.999 --> 00:10:08.511
Good

131
00:10:09.535 --> 00:10:11.583
Let’s do the same with the other scenario

132
00:11:17.631 --> 00:11:23.775
OK, so we’ve cleaned things up a bit
to bring the scenarios, the code

133
00:11:24.031 --> 00:11:26.335
and our current understanding
of the problem all into sync

135
00:11:26.847 --> 00:11:31.199
What’s nice to see is how well
those new steps that create Lucy and Sean

136
00:11:31.455 --> 00:11:33.759
match the code inside the step definition

137
00:11:35.039 --> 00:11:37.599
When step definitions have to make a big leap

138
00:11:37.855 --> 00:11:42.719
to translate between our plain-language
description of the domain

139
00:11:43.743 --> 00:11:44.767
in the Gherkin scenario, and the code

140
00:11:45.791 --> 00:11:48.095
that’s usually a sign that something is wrong

141
00:11:49.631 --> 00:11:53.215
We like to see step definitions that are only
one or two lines long

142
00:11:53.983 --> 00:12:00.127
because that usually indicates our scenarios
are doing a good job of

143
00:12:00.895 --> 00:12:01.919
reflecting the domain model in the code,
and vice-versa

144
00:12:03.711 --> 00:12:07.039
One problem that we still have with these scenarios

145
00:12:07.295 --> 00:12:13.183
is that we’re very fixed to only being able
to use these two characters, Lucy and Sean

146
00:12:14.463 --> 00:12:17.535
If we want to introduce anyone else
into the scenario

147
00:12:18.047 --> 00:12:21.375
we’re going to be creating quite a lot
of duplicate code

148
00:12:21.887 --> 00:12:25.215
In fact, the two steps for creating
Lucy and Sean are almost identical

149
00:12:25.727 --> 00:12:28.031
apart from those instance variables

150
00:12:28.799 --> 00:12:34.687
On a real project we wouldn’t bother about
such a tiny amount of duplication

151
00:12:35.455 --> 00:12:39.807
at this early stage, but
this isn’t a real project!

152
00:12:40.063 --> 00:12:43.135
Let’s play with the skills we learned
last week to make a single step definition

153
00:12:43.391 --> 00:12:44.671
that can create Lucy or Sean

154
00:12:44.927 --> 00:12:50.047
The first problem we’ll need to tackle
is these hard-coded instance variable names

155
00:12:51.071 --> 00:12:54.399
We can use a Map to store all the people involved in the scenario

156
00:12:56.703 --> 00:12:59.007
Let’s try replacing Lucy first

157
00:12:59.775 --> 00:13:03.871
We’ll start by creating a
new map in the before hook, like this

158
00:13:04.895 --> 00:13:07.199
Now we can story Lucy in a key in that map

159
00:13:07.967 --> 00:13:11.295
We’ll use her name as the key,
hard-coding it for now

161
00:13:12.831 --> 00:13:16.671
Finally, where we check Lucy’s messages heard
here in the assertion

164
00:13:18.975 --> 00:13:20.767
we need to fetch her out of the map

165
00:13:22.559 --> 00:13:24.351
With that little refactoring done

166
00:13:24.607 --> 00:13:28.703
we can now try and make this first step
generic for any name


168
00:13:30.239 --> 00:13:34.079
Using your new found regular expression skills
from the last lesson

169
00:13:34.591 --> 00:13:38.175
you’ll know that if we surround the word
Lucy here with a capture group

170
00:13:38.687 --> 00:13:42.271
we’ll have the name passed into our
step definition as an argument, here

171
00:13:43.295 --> 00:13:46.623
Now we can use that as the key in the map

173
00:13:48.415 --> 00:13:54.559
Finally, we can replace the hard-coded Lucy
in the pattern with backslash-w plus (\w+)

174
00:13:55.327 --> 00:13:58.911
meaning one or more word characters

175
00:13:59.935 --> 00:14:03.007
Now we have a totally generic step

176
00:14:04.799 --> 00:14:10.175
If we try and run Cucumber now
we get an error about an ambiguous match

177
00:14:10.943 --> 00:14:16.575
Our generic step definition is now
matching the step “a person named Sean”

179
00:14:17.599 --> 00:14:19.647
but so is the original one

180
00:14:20.415 --> 00:14:25.023
In bigger projects, this can be a real issue,
so this warning is important

182
00:14:26.047 --> 00:14:30.911
Let’s remove the old step definition,
and fetch Sean from the hash here 

183
00:14:31.423 --> 00:14:32.959
where he shouts his message

184
00:14:35.519 --> 00:14:37.823
Great, we’re green again

186
00:14:39.359 --> 00:14:45.503
Let’s switch back to the feature
to show you one more technique

for improving the readability of your scenarios

187
00:14:47.807 --> 00:14:54.463
When we have common context steps - the givens -
in all the scenarios in our feature,

190
00:14:54.975 --> 00:14:58.047
it can sometimes be useful to get those out of the way

191
00:14:59.327 --> 00:15:06.751
We can literally move them into the background
using a background keyword, like this

193
00:15:08.543 --> 00:15:12.639
As far as Cucumber is concerned,
these scenarios haven’t changed

194
00:15:13.151 --> 00:15:19.295
It will still create both Lucy and Sean
as the first things it does

when running each of those scenarios

195
00:15:20.575 --> 00:15:22.879
But from a readability point of view

196
00:15:23.391 --> 00:15:28.767
we can now see more clearly what’s important
and interesting about these two scenarios -

197
00:15:29.535 --> 00:15:32.351
in this case, the message being shouted

199
00:15:34.655 --> 00:15:39.263
Notice we just went straight into When steps
in our scenarios. That’s absolutely fine

200
00:15:39.519 --> 00:15:43.871
We still have a context for the scenario,
but we’ve chosen to push it off into the background

201
00:15:45.151 --> 00:15:50.015
Again, it’s debatable whether we’d bother
to use a Background yet on a real project

202
00:15:50.527 --> 00:15:52.831
but this at least illustrates the technique

203
00:15:53.599 --> 00:15:58.719
Hopefully you’re already thinking about
how you can use it on your own code

204
00:15:59.999 --> 00:16:05.887
To maintain trust in the BDD process,
it’s important to keep your features fresh

206
00:16:07.167 --> 00:16:10.239
Even when you drive the development
from BDD scenarios

207
00:16:10.495 --> 00:16:14.079
you’ll still learn lessons from the implementation

208
00:16:14.335 --> 00:16:17.663
That might need to be fed back into yoga Kentucky imitation

209
00:16:19.199 --> 00:16:23.551
In this case, we discovered that
we could find a smaller slice of this story

211
00:16:23.807 --> 00:16:27.903
and defer the business rule about proximity
until our next iteration

212
00:16:28.671 --> 00:16:31.999
Splitting stories like this
is a powerful agile technique

213
00:16:32.255 --> 00:16:34.815
and one that BDD can help you to master

214
00:16:36.351 --> 00:16:42.239
Now we have a clean codebase
and suite of scenarios that

reflects the current state of the system’s development

215
00:16:43.775 --> 00:16:46.847
We’re ready to start the next iteration

186
00:16:48.000 --> 00:16:50.000
Captions created by Jayson Smith for Cucumber Ltd.