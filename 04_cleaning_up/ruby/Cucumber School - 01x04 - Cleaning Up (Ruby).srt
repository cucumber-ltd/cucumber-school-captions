1
00:00:15,360 --> 00:00:18,440
Hello, and welcome back to Cucumber School!

2
00:00:18,840 --> 00:00:23,420
Last time we talked about the importance of
having readable scenarios

3
00:00:23,420 --> 00:00:27,900
and you learned some new skills with
regular expressions to help you achieve that goal

4
00:00:28,740 --> 00:00:33,000
Those skills will give you the confidence
to write scenarios exactly the way you want

5
00:00:33,000 --> 00:00:37,880
knowing you’ll be able to match the Gherkin steps
easily from your step definition code

6
00:00:39,920 --> 00:00:43,280
We emphasise readability
because from our experience

7
00:00:43,280 --> 00:00:48,020
writing Gherkin scenarios
is a software design activity

8
00:00:49,280 --> 00:00:52,340
Cucumber was created
to bridge the communication gap

9
00:00:52,340 --> 00:00:55,820
between business domain experts
and development teams

10
00:00:56,760 --> 00:01:00,800
When you collaborate with domain experts
to describe behaviour in Gherkin

11
00:01:00,800 --> 00:01:05,000
you’re expressing the group’s shared understanding
of the problem you need to solve

12
00:01:06,300 --> 00:01:09,060
The words you use in your scenarios

13
00:01:09,060 --> 00:01:13,560
can have a deep impact on the way
the software is designed

14
00:01:13,560 --> 00:01:15,780
as we’ll see in later episodes

15
00:01:17,400 --> 00:01:19,980
The more fluent you become in writing Gherkin

16
00:01:19,980 --> 00:01:24,160
the more useful a tool it becomes
to help you facilitate this communication

17
00:01:24,880 --> 00:01:29,220
Keeping your scenarios readable means
you can get feedback at any time

18
00:01:29,220 --> 00:01:31,540
about whether you’re building the right thing

19
00:01:33,080 --> 00:01:38,500
Over time, your features become
living documentation about your system

20
00:01:40,340 --> 00:01:41,960
We can’t emphasise enough

21
00:01:41,960 --> 00:01:46,400
how important it is to see your scenarios
as more than just tests

22
00:01:47,080 --> 00:01:50,220
Maintaining a living document works both ways:

23
00:01:50,220 --> 00:01:53,980
you’ll drive your solution design
from your scenarios

24
00:01:53,980 --> 00:01:57,200
but you may also have to update your Gherkin
to reflect the things you learn

25
00:01:57,200 --> 00:01:58,620
as you build the solution

26
00:01:59,500 --> 00:02:04,900
This dance back and forth between features
and solution code is what BDD is all about

27
00:02:05,860 --> 00:02:11,040
Today, we’ll learn about
feature descriptions, the Background keyword

28
00:02:11,040 --> 00:02:15,940
and about keeping scenarios and code up-to-date
with your current understanding of the project

29
00:02:17,180 --> 00:02:21,320
First, let’s catch up with
what’s been happening on the Shouty project

30
00:02:23,620 --> 00:02:29,500
While we were away, the developers of Shouty
have been busy working on the code

31
00:02:30,880 --> 00:02:32,680
Let’s have a look at what they’ve been up to

32
00:02:35,400 --> 00:02:37,440
We’ll start out by running Cucumber

33
00:02:39,900 --> 00:02:41,020
Great!

34
00:02:41,020 --> 00:02:43,580
It looks like both these scenarios
are working now -

35
00:02:44,608 --> 00:02:48,960
both the different messages
that Sean shouts are being heard by Lucy

36
00:02:50,500 --> 00:02:54,380
Let’s dig into the code
and see how these steps have been automated

37
00:02:57,280 --> 00:03:02,320
In the step definition layer
we can see that a new class has been defined

38
00:03:02,320 --> 00:03:03,560
the Network

39
00:03:04,760 --> 00:03:07,020
We’re creating an instance of the network here

40
00:03:08,820 --> 00:03:14,320
Then we pass that network instance to each
of the Person instances we create here

41
00:03:15,680 --> 00:03:20,700
So both instances of Person depend on
the same instance of network

42
00:03:22,620 --> 00:03:26,600
The Network is what allows people
to send messages to one another

43
00:03:27,360 --> 00:03:30,780
There’s also a new folder here, spec

44
00:03:31,460 --> 00:03:36,320
This contains unit tests for the classes
in our domain model

45
00:03:37,300 --> 00:03:41,240
There’s a network spec and a person spec

46
00:03:41,920 --> 00:03:49,060
Unit tests are fine-grained tests that define the
precise behaviour of each of these classes

47
00:03:49,060 --> 00:03:51,660
We’ll talk more about this in a future lesson

48
00:03:51,660 --> 00:03:54,500
but feel free to have a poke around
in there in the meantime

49
00:03:56,040 --> 00:03:59,640
You can use the `rspec` command to run the tests

50
00:04:01,320 --> 00:04:02,820
RSpec does a lovely job of

51
00:04:02,820 --> 00:04:07,200
formatting the output to tell us
the responsibilities of each of these objects

52
00:04:09,080 --> 00:04:11,680
The first thing I notice coming back to the code

53
00:04:11,680 --> 00:04:16,480
is that the feature file is still talking about
the distance between Lucy and Sean

54
00:04:16,480 --> 00:04:19,400
but we haven’t actually implemented
any behaviour around that yet

55
00:04:20,880 --> 00:04:25,140
This happens to us all the time -
we have an idea for a new feature

56
00:04:25,140 --> 00:04:28,800
but then we find the problem is
too complex to solve all at once

57
00:04:28,800 --> 00:04:31,040
so we break it down into simpler steps

58
00:04:32,040 --> 00:04:36,660
If we’re not careful, little bits of that
original idea can be left around like clutter

59
00:04:36,660 --> 00:04:38,820
in the scenarios and in the code

60
00:04:39,680 --> 00:04:44,340
That clutter can get in the way
especially if plans change

61
00:04:46,260 --> 00:04:52,160
We’re definitely going to develop this behaviour
but we’ve decided to defer it to our next iteration

62
00:04:52,160 --> 00:04:55,471
Our current solution is just focussed
on broadcasting messages between

63
00:04:55,480 --> 00:04:57,180
the people on the network

64
00:04:58,500 --> 00:05:02,340
Let’s clean up the feature to
reflect that current understanding

65
00:05:04,900 --> 00:05:08,200
After the feature keyword, we have space
in a Gherkin document

66
00:05:08,200 --> 00:05:10,280
to write any arbitrary text that we like

67
00:05:11,040 --> 00:05:13,460
We call this the feature’s description

68
00:05:14,480 --> 00:05:17,280
This is a great place to write up any notes
or other details that

69
00:05:17,280 --> 00:05:19,580
can’t easily be expressed in examples

70
00:05:20,520 --> 00:05:24,260
You might have links to
wiki pages or issue trackers

71
00:05:24,260 --> 00:05:26,160
or to wireframes for example

72
00:05:28,960 --> 00:05:34,740
You can put anything you like in here, as long
as you don’t mention the magic word scenario

73
00:05:36,640 --> 00:05:42,020
A common thing to do here for a new feature
is write out the user story we’re working on

74
00:05:42,620 --> 00:05:44,940
This is a good place to start, so let’s do that

75
00:05:52,940 --> 00:05:53,540
Good

76
00:05:54,300 --> 00:05:58,140
Now we have an overarching story to guide us as we go

77
00:06:00,200 --> 00:06:05,180
Something we really like to put into the description
are the acceptance criteria or

78
00:06:05,180 --> 00:06:08,120
business rules we’re trying to implement

79
00:06:10,080 --> 00:06:12,960
In this case, we can explain that

80
00:06:12,960 --> 00:06:18,120
for the time being, we’re broadcasting to
all users, irrespective of distance

81
00:06:20,060 --> 00:06:24,060
Because we know we’ll need to
filter by proximity - later -

82
00:06:24,060 --> 00:06:28,860
we can also write a TODO list here so it’s clear
that we do intend to get to that soon

83
00:06:31,420 --> 00:06:37,080
Changing the description doesn’t change anything
about how Cucumber will run this feature

84
00:06:37,080 --> 00:06:43,580
It just helps the human beings reading this document
to understand more of what you understand

85
00:06:43,580 --> 00:06:45,660
about the system you’re building

86
00:06:46,200 --> 00:06:52,440
The step 'Given Lucy is 15m from Sean' is misleading

87
00:06:52,440 --> 00:06:56,420
since the distance between the two people
is not yet relevant in our current model

88
00:06:57,500 --> 00:06:59,440
We have this code here

89
00:06:59,440 --> 00:07:01,880
a move_to method on Person

90
00:07:01,880 --> 00:07:05,200
that’s being called from the step definition
but doesn’t actually do anything

91
00:07:06,760 --> 00:07:11,880
Let’s simplify this code to do just what
it needs to do right now, and no more

92
00:07:13,040 --> 00:07:16,700
We can start from the scenario by
changing this single step

93
00:07:16,700 --> 00:07:18,780
to express what’s actually going on

94
00:07:19,420 --> 00:07:24,380
We’ll work on one scenario at a time, and update
the other one once we’re happy with this one

95
00:07:31,900 --> 00:07:32,840
There!

96
00:07:32,840 --> 00:07:36,220
Now we have two steps, each creating a person

97
00:07:37,040 --> 00:07:41,520
Notice we’re starting to reveal some more of
our domain language here:

98
00:07:41,520 --> 00:07:44,880
we’ve introduced the words person and name

99
00:07:47,060 --> 00:07:49,021
Person is already a part of our domain language

100
00:07:49,021 --> 00:07:52,060
so it’s nice to have that revealed
in the language of the scenario

101
00:07:53,600 --> 00:07:57,260
Name may well become an attribute
of our person soon

102
00:07:57,260 --> 00:08:01,280
so it’s also useful to have that surfaced so
we can get feedback about it from the team

103
00:08:04,020 --> 00:08:08,100
One thing we’ve lost by doing this
is the idea that, eventually

104
00:08:08,100 --> 00:08:11,520
the two people will need to be close to each other
for the message to be transmitted

105
00:08:12,540 --> 00:08:16,080
We definitely wouldn’t remove
detail like that unilaterally

106
00:08:16,080 --> 00:08:19,980
without discussing it with the other people
who were in the three amigos meeting with us

107
00:08:19,980 --> 00:08:21,380
when the example was written

108
00:08:22,440 --> 00:08:25,440
In this case, as well as adding it
to the TODO list above

109
00:08:25,440 --> 00:08:28,860
we’ve decided to update the names of
the existing scenarios

110
00:08:28,860 --> 00:08:33,020
and write a couple of new empty scenarios
to remind us to implement that behaviour later

111
00:08:35,120 --> 00:08:37,380
Now the scenario names make sense

112
00:08:37,380 --> 00:08:40,440
and we’ve got a reminder of
future scenarios we’ll need to implement

113
00:08:41,300 --> 00:08:42,320
Let's press on

114
00:08:43,460 --> 00:08:48,380
We can run Cucumber to generate
new step definition snippets for the new steps...

115
00:08:49,660 --> 00:08:51,700
and paste them into our steps file

116
00:08:53,503 --> 00:08:57,599
Now to implement these two separate steps
we have a bit of a problem

117
00:08:58,879 --> 00:09:02,207
We need the same instance of Network
available in both

118
00:09:03,740 --> 00:09:09,280
We could just assume that the Lucy step
will always run first and create it there

119
00:09:09,280 --> 00:09:10,920
but that seems fragile

120
00:09:11,680 --> 00:09:16,100
If someone wrote a new scenario
that didn’t create people in the right order

121
00:09:16,100 --> 00:09:20,140
they’d end up with no Network instance
and weird bugs

122
00:09:21,160 --> 00:09:24,600
We want our steps to be as independent as possible

123
00:09:24,600 --> 00:09:28,580
so they can be easily composed into new scenarios

124
00:09:29,600 --> 00:09:35,480
Luckily Cucumber has a feature called hooks
that allows us to do exactly what we want here

125
00:09:36,720 --> 00:09:43,760
We need an instance of Network in every scenario
so we can run a Before Hook

126
00:09:43,760 --> 00:09:47,120
that creates one before
every scenario starts, like this

127
00:09:48,280 --> 00:09:54,160
Now we can use that Network instance
as we create Lucy and Sean in these two new steps

128
00:09:55,340 --> 00:09:58,280
It should be working again now.
Let’s run cucumber to check

129
00:09:59,800 --> 00:10:00,560
Good

130
00:10:01,420 --> 00:10:03,720
Let’s do the same with the other scenario

131
00:11:04,780 --> 00:11:08,880
OK, so we’ve cleaned things up a bit
to bring the scenarios, the code

132
00:11:08,880 --> 00:11:12,680
and our current understanding
of the problem all into sync

133
00:11:13,540 --> 00:11:17,940
What’s nice to see is how well
those new steps that create Lucy and Sean

134
00:11:17,940 --> 00:11:20,180
match the code inside the step definition

135
00:11:21,480 --> 00:11:24,280
When step definitions have to make a big leap

136
00:11:24,280 --> 00:11:27,660
to translate between our plain-language
description of the domain

137
00:11:27,660 --> 00:11:32,260
in the Gherkin scenario, and the code

138
00:11:32,260 --> 00:11:34,520
that’s usually a sign that something is wrong

139
00:11:36,140 --> 00:11:40,440
We like to see step definitions that are only
one or two lines long

140
00:11:40,440 --> 00:11:44,240
because that usually indicates
our scenarios are doing a good job

141
00:11:44,240 --> 00:11:48,360
of reflecting the domain model
in the code and vice-versa

142
00:11:50,520 --> 00:11:53,760
One problem that we still have with these scenarios

143
00:11:53,760 --> 00:11:59,600
is that we’re very fixed to only being able
to use these two characters, Lucy and Sean

144
00:12:00,920 --> 00:12:04,400
If we want to introduce anyone else
into the scenario

145
00:12:04,400 --> 00:12:07,080
we’re going to be creating
quite a lot of duplicate code

146
00:12:07,080 --> 00:12:08,300
In fact

147
00:12:08,300 --> 00:12:12,120
the two steps for creating
Lucy and Sean are almost identical

148
00:12:12,120 --> 00:12:14,360
apart from those instance variables

149
00:12:15,780 --> 00:12:17,300
Now on a real project

150
00:12:17,300 --> 00:12:19,700
we wouldn’t bother about
such a tiny amount of duplication

151
00:12:19,700 --> 00:12:21,060
at this early stage...

152
00:12:21,860 --> 00:12:23,360
but this isn’t a real project!

153
00:12:23,720 --> 00:12:28,180
Let’s play with the skills we learned
last week to make a single step definition

154
00:12:28,180 --> 00:12:30,960
that can create Lucy or Sean

155
00:12:32,860 --> 00:12:37,940
The first problem we’ll need to tackle
is those hard-coded instance variable names

156
00:12:39,560 --> 00:12:44,520
We can use Ruby’s hash to store
all the people involved in the scenario

157
00:12:44,520 --> 00:12:46,480
in a single instance variable

158
00:12:47,800 --> 00:12:50,360
Let’s try replacing Lucy first

159
00:12:51,080 --> 00:12:55,440
We’ll start by creating a new hash
in the before hook, like this

160
00:12:57,215 --> 00:13:00,799
Now we can story Lucy in a key in that hash

161
00:13:01,820 --> 00:13:05,400
We’ll use her name as the key
hard-coding it for now

162
00:13:07,940 --> 00:13:13,000
Finally, where we check Lucy’s messages heard
here in the assertion

163
00:13:13,000 --> 00:13:15,120
we need to fetch her out of the hash

164
00:13:16,680 --> 00:13:18,680
With that little refactoring done

165
00:13:18,680 --> 00:13:22,300
we can now try and make this first step
generic for any name

166
00:13:23,580 --> 00:13:27,840
Using your new found regular expression skills
from the last lesson

167
00:13:27,840 --> 00:13:33,020
you’ll know that if we surround the word
Lucy here with a capture group

168
00:13:33,020 --> 00:13:36,900
we’ll have the name passed into our
step definition as an argument, here

169
00:13:38,800 --> 00:13:42,120
Now we can use that as the key in the hash

170
00:13:44,060 --> 00:13:51,600
Finally, we can replace the hard-coded Lucy
in the pattern with \w+

171
00:13:51,600 --> 00:13:54,860
meaning one or more word characters

172
00:13:55,740 --> 00:13:58,060
A word in other words!

173
00:13:59,600 --> 00:14:03,400
Now we have a totally generic step

174
00:14:04,980 --> 00:14:10,700
If we try and run Cucumber now
we get an error about an ambiguous match

175
00:14:11,400 --> 00:14:14,000
Our newly generic step definition

176
00:14:14,000 --> 00:14:18,600
is now matching the step
'a person named Sean'

177
00:14:18,600 --> 00:14:20,660
but so is the original one!

178
00:14:21,439 --> 00:14:26,303
In bigger projects, this can be a real issue
so this warning is important

179
00:14:27,320 --> 00:14:32,560
Let’s remove the old step definition
and fetch Sean from the hash, here

180
00:14:32,560 --> 00:14:34,280
where he shouts his message

181
00:14:38,000 --> 00:14:40,660
Great, we’re green again!

182
00:14:40,660 --> 00:14:44,300
Let’s switch back to the feature
to show you one more technique

183
00:14:44,300 --> 00:14:46,780
for improving the readability of your scenarios

184
00:14:49,020 --> 00:14:53,700
When we have common context steps - the givens -

185
00:14:53,700 --> 00:14:56,380
in all the scenarios in our feature

186
00:14:56,380 --> 00:14:59,340
it can sometimes be useful to get those out of the way

187
00:15:00,540 --> 00:15:08,040
We can literally move them into the background
using a background keyword, like this

188
00:15:09,980 --> 00:15:14,440
As far as Cucumber is concerned
these scenarios haven’t changed

189
00:15:14,440 --> 00:15:18,575
It will still create both Lucy and Sean
as the first things it does

190
00:15:18,580 --> 00:15:21,180
when running each of these scenarios

191
00:15:21,860 --> 00:15:24,640
But from a readability point of view

192
00:15:24,640 --> 00:15:30,800
we can now see more clearly what’s important
and interesting about these two scenarios -

193
00:15:30,800 --> 00:15:33,780
in this case, the message being shouted

194
00:15:35,860 --> 00:15:39,180
Notice we just went straight into When steps
in our scenarios

195
00:15:39,180 --> 00:15:40,880
That’s absolutely fine!

196
00:15:40,880 --> 00:15:45,160
We still have a context for the scenario
but we’ve chosen to push it off into the background

197
00:15:46,440 --> 00:15:51,860
Again, it’s debatable whether we’d bother
to use a Background yet on a real project

198
00:15:51,860 --> 00:15:54,100
but this at least illustrates the technique

199
00:15:54,820 --> 00:15:59,740
Hopefully, you’re already thinking about
how you can use it in your own code

200
00:16:01,280 --> 00:16:07,320
To maintain trust in the BDD process,
it’s important to keep your features fresh

201
00:16:08,200 --> 00:16:11,840
Even when you drive the development
from BDD scenarios

202
00:16:11,840 --> 00:16:15,740
you’ll still learn lessons from the implementation

203
00:16:15,740 --> 00:16:18,940
that might need to be
fed back into your Gherkin documentation

204
00:16:20,480 --> 00:16:25,060
In this case, we discovered that
we could find a smaller slice of this story

205
00:16:25,060 --> 00:16:29,180
and defer the business rule about proximity
until our next iteration

206
00:16:29,960 --> 00:16:33,580
Splitting stories like this
is a powerful agile technique

207
00:16:33,580 --> 00:16:36,240
and one that BDD can help you to master

208
00:16:37,580 --> 00:16:39,640
Now we have a clean code base

209
00:16:39,640 --> 00:16:43,560
and suite of scenarios that reflects
the current state of the system’s development

210
00:16:44,940 --> 00:16:48,040
We’re ready to start the next iteration!

211
00:16:48,920 --> 00:16:50,900
Captions created by Jayson Smith for Cucumber Ltd.
