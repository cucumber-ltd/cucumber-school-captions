1
00:00:17,220 --> 00:00:20,040
Hello, and welcome back to
Cucumber School!

2
00:00:20,920 --> 00:00:24,460
Last time we learned about two very
different kinds of loops

3
00:00:25,140 --> 00:00:29,700
First, we use data tables to loop over data
in your scenarios

4
00:00:31,000 --> 00:00:33,320
Then we learned about TDD cycles

5
00:00:34,280 --> 00:00:39,680
We saw how the outer loop of TDD
helps you build the right thing

6
00:00:39,680 --> 00:00:43,600
while the inner loop helps you
build the thing right

7
00:00:45,020 --> 00:00:49,420
In this lesson we're going to teach you
all about how to configure Cucumber

8
00:00:50,500 --> 00:00:54,600
When we start working on a new scenario
we often take a dive down

9
00:00:54,600 --> 00:00:58,720
into the inner loop of TDD
where we use a unit testing tool

10
00:00:58,720 --> 00:01:04,000
to drive out new classes or modify
the behaviour of existing ones

11
00:01:04,280 --> 00:01:08,660
When our unit tests are green
and the new code is implemented

12
00:01:08,700 --> 00:01:12,180
we return to the Cucumber scenarios
to verify whether we have made

13
00:01:12,180 --> 00:01:14,640
overall progress or not

14
00:01:15,900 --> 00:01:20,160
If we have lots of Cucumber scenarios
it can be distracting to run all of them

15
00:01:20,160 --> 00:01:21,720
each time we do this

16
00:01:22,280 --> 00:01:25,900
We often want to focus
on a single scenario or perhaps

17
00:01:25,900 --> 00:01:29,080
just a couple
to get feedback on what

18
00:01:29,080 --> 00:01:30,840
we're currently working on

19
00:01:31,520 --> 00:01:33,980
There are several ways to do this in
Cucumber

20
00:01:34,460 --> 00:01:38,920
Probably the easiest way is to
tell Cucumber to run only a scenario

21
00:01:38,920 --> 00:01:40,560
with a particular name

22
00:01:42,480 --> 00:01:47,180
The name option tells Cucumber to run
scenarios with a name matching

23
00:01:47,180 --> 00:01:49,340
'Message is too long'

24
00:01:50,040 --> 00:01:53,960
The value of this option is actually a
regular expression so you can

25
00:01:53,960 --> 00:01:57,260
use your imagination here to run more
than one scenario

26
00:01:58,220 --> 00:02:02,700
Another way to tell Cucumber to run a
specific scenario is to specify the

27
00:02:02,700 --> 00:02:05,860
line number of the scenario within a
feature file

28
00:02:12,100 --> 00:02:16,040
You can even specify multiple line
numbers for each file to run

29
00:02:16,040 --> 00:02:17,800
more than one scenario

30
00:02:19,020 --> 00:02:22,140
You can list several files and lines
together like this if you have

31
00:02:22,140 --> 00:02:24,620
a specific set of scenarios
you want to run

32
00:02:26,480 --> 00:02:30,760
Narrowing down the set of scenarios
to run like this is called filtering

33
00:02:31,560 --> 00:02:35,220
Cucumber has a third filtering mechanism
that uses tags

34
00:02:35,820 --> 00:02:37,540
Tags start with an @ sign

35
00:02:38,200 --> 00:02:42,260
We'll put a focus tag right here
above this scenario

36
00:02:44,020 --> 00:02:47,680
Now we can run the scenarios tagged with focus.

37
00:02:48,500 --> 00:02:49,820
There should only be one

38
00:02:51,760 --> 00:02:52,440
Yep.

39
00:02:53,640 --> 00:02:55,820
It's entirely up to you what you
name your tags

40
00:02:56,300 --> 00:02:58,960
When we're working on a particular
area of the application

41
00:02:58,960 --> 00:03:00,780
it's common to use a temporary tag
like this

42
00:03:01,560 --> 00:03:04,420
We'll remove it before we check our code
into source control

43
00:03:05,600 --> 00:03:07,960
Tags can be used for other purposes
as well

44
00:03:08,500 --> 00:03:13,020
If you have lots of scenarios it can be
time-consuming to run them all every time

45
00:03:13,780 --> 00:03:14,800
For example

46
00:03:14,800 --> 00:03:18,200
you can tag a few of them with smoke
and run only those

47
00:03:18,200 --> 00:03:20,400
before you check in code to source

48
00:03:20,920 --> 00:03:23,940
This will give you a certain level of
confidence that nothing is broken

49
00:03:23,940 --> 00:03:26,080
without having to run every single one

50
00:03:27,040 --> 00:03:31,340
If you're running Cucumber on a CI,
continuous integration, server as well

51
00:03:31,340 --> 00:03:34,900
you could run all the scenarios there
detecting any regressions you might have

52
00:03:34,900 --> 00:03:37,120
missed by only running the smoke tests

53
00:03:39,060 --> 00:03:41,380
Tags give you a way to organise your
scenarios that

54
00:03:41,380 --> 00:03:43,100
cuts across feature files

55
00:03:43,600 --> 00:03:46,260
You can think of them like sticky labels
you might put into a book

56
00:03:46,260 --> 00:03:49,180
to mark interesting pages
that you want to refer back to

57
00:03:50,080 --> 00:03:54,340
Some teams also use tags to reference
external documents

58
00:03:54,460 --> 00:03:57,160
For example, tickets in an
issue tracker or planning tool

59
00:03:57,900 --> 00:04:00,920
Let's pretend we're using an issue tracker
while working on Shouty

60
00:04:00,920 --> 00:04:05,600
and all the behaviour we built so far
is related to the issue number 11

61
00:04:06,420 --> 00:04:10,100
We could tag the whole feature file
with the single line at the top

62
00:04:10,800 --> 00:04:15,200
All the scenarios within that file
now inherit that tag

63
00:04:16,080 --> 00:04:21,080
If you want to you can use more complex
tag expressions to select the scenarios

64
00:04:21,080 --> 00:04:22,160
you want to run

65
00:04:22,380 --> 00:04:23,380
For example

66
00:04:23,380 --> 00:04:29,000
you could use a tag expression to exclude
all the scenarios tagged as @slow

67
00:04:31,940 --> 00:04:36,220
Let's take a look at some of the
configuration options Cucumber offers

68
00:04:36,940 --> 00:04:41,740
If we pass the help option to Cucumber
it will exit immediately

69
00:04:41,740 --> 00:04:45,565
without running any scenarios
and print all the available options

70
00:04:45,565 --> 00:04:48,000
along with some useful documentation

71
00:04:50,800 --> 00:04:54,460
Let's take a closer look at the
plug-in option

72
00:04:55,080 --> 00:04:59,280
So far every time we've run Cucumber
it has printed the features back to us

73
00:04:59,280 --> 00:05:00,360
in the console

74
00:05:01,180 --> 00:05:03,820
Cucumber can report results
in other formats

75
00:05:03,820 --> 00:05:05,980
and this is useful for generating reports

76
00:05:06,740 --> 00:05:09,480
Let's try the HTML plugin

77
00:05:11,820 --> 00:05:15,040
When we use the HTML plug-in
we simply append a colon

78
00:05:15,040 --> 00:05:18,540
followed by the path to the directory
where we want the report to be written

79
00:05:24,040 --> 00:05:25,700
Let's try another one:

80
00:05:25,700 --> 00:05:26,520
JSON

81
00:05:28,200 --> 00:05:31,580
The JSON report outputs the results
in a single file

82
00:05:32,300 --> 00:05:35,480
You can write your own script or program
to post-process this file to

83
00:05:35,480 --> 00:05:37,560
generate your own report

84
00:05:38,640 --> 00:05:42,120
There's also a progress formatter which
just prints out a single character

85
00:05:42,120 --> 00:05:43,080
for each step

86
00:05:43,800 --> 00:05:48,340
The JUNIT formatter outputs results
in an XML format which

87
00:05:48,340 --> 00:05:51,720
many continuous integration servers
will turn into a nice report

88
00:05:55,940 --> 00:05:59,120
We can specify multiple formatters
like this

89
00:06:01,180 --> 00:06:04,440
One of these formatter plug-ins
is rather special -

90
00:06:04,440 --> 00:06:06,500
the rerun formatter

91
00:06:07,000 --> 00:06:10,700
Before we try it out, let's make
one of our scenarios fail

92
00:06:13,040 --> 00:06:13,800
Right

93
00:06:14,180 --> 00:06:18,480
Now we choose the rerun formatter
and send the output to a file called

94
00:06:18,480 --> 00:06:20,160
rerun.txt

95
00:06:22,000 --> 00:06:24,680
Let's look at what's in that rerun.txt file

96
00:06:25,560 --> 00:06:30,320
It's a list of the scenarios that failed
and the format looks familiar doesn't it?

97
00:06:31,120 --> 00:06:34,300
It's using the line number filtering format
we showed you earlier

98
00:06:35,660 --> 00:06:38,320
This is really useful when you have
a few failing scenarios

99
00:06:38,320 --> 00:06:41,360
and you want to rerun only
the ones that failed

100
00:06:42,180 --> 00:06:44,780
We can pass this to Cucumber the
next time we run it

101
00:06:44,780 --> 00:06:48,540
simply by prepending an @ sign
in front of the path

102
00:06:50,520 --> 00:06:53,840
This is a big time saver when you're
in the middle of a refactoring

103
00:06:53,840 --> 00:06:57,960
where you've broken a few scenarios
and you're working yourself back to green

104
00:06:59,620 --> 00:07:05,680
The dry run option will quickly tell you
whether any of your steps are undefined

105
00:07:05,680 --> 00:07:07,360
but it won't try to run any of them

106
00:07:08,200 --> 00:07:12,380
It can be useful to get quick feedback
if you change the wording in your steps

107
00:07:14,080 --> 00:07:18,680
The strict option affects the
exit status of Cucumber

108
00:07:19,380 --> 00:07:22,920
To see how it works
let's add an undefined step

109
00:07:25,980 --> 00:07:27,820
Let's first run it without strict

110
00:07:30,620 --> 00:07:34,180
That last command tells us that
Cucumber didn't fail

111
00:07:34,180 --> 00:07:39,840
it exited with an exit status of zero
which means success

112
00:07:40,700 --> 00:07:42,340
Now, let's run it with strict

113
00:07:43,940 --> 00:07:49,680
Ah, this time the exit status was one
indicating that Cucumber failed

114
00:07:50,780 --> 00:07:52,500
Why is this interesting?

115
00:07:52,500 --> 00:07:56,080
Well, if you run Cucumber on a
continuous integration server

116
00:07:56,080 --> 00:07:59,840
it will fail the build if there are
undefined or pending steps

117
00:08:00,520 --> 00:08:01,980
That's pretty handy!

118
00:08:02,840 --> 00:08:05,800
Cucumber is first and
foremost a tool that facilitates a

119
00:08:05,800 --> 00:08:08,480
common understanding between
people on a project

120
00:08:09,320 --> 00:08:11,200
Imagine our customers were cats

121
00:08:11,620 --> 00:08:13,500
We could write our features in English

122
00:08:13,500 --> 00:08:15,920
but the cats would obviously not
understand that

123
00:08:17,000 --> 00:08:21,340
We all know that cats speak LOLCAT
not English

124
00:08:21,340 --> 00:08:25,320
so our feature would have to look like this
in order for cats to understand

125
00:08:28,120 --> 00:08:32,200
We tell Cucumber what language to use
by adding a language comment

126
00:08:32,200 --> 00:08:33,420
at the top of the file

127
00:08:33,980 --> 00:08:38,200
Cucumber supports over 60 different
spoken languages thanks to contributions

128
00:08:38,200 --> 00:08:41,300
from people and cats all over the world

129
00:08:44,900 --> 00:08:51,700
You can get a list of all the supported
languages with - - i18n help

130
00:08:53,600 --> 00:08:57,440
To see the translation of Gherkin
keywords for a particular language

131
00:08:57,440 --> 00:09:00,560
just replace help with the language code

132
00:09:01,220 --> 00:09:06,880
For example --i18n hi for Hindi

133
00:09:09,120 --> 00:09:13,100
It would be tedious if you had to write out
these configuration options every time

134
00:09:13,100 --> 00:09:14,600
you run Cucumber

135
00:09:15,380 --> 00:09:18,240
To make this easier you can
write the options in a file

136
00:09:18,240 --> 00:09:19,540
that Cucumber will pick up

137
00:09:20,760 --> 00:09:25,460
The easiest is to write the options
down in a file called Cucumber.properties

138
00:09:25,460 --> 00:09:27,220
that you place on the class path

139
00:09:27,940 --> 00:09:30,820
In a Maven project this file 
should be in

140
00:09:30,820 --> 00:09:35,080
src/test/resources/cucumber.properties

141
00:09:36,140 --> 00:09:40,580
Just define a single property called
cucumber.options and pass all the

142
00:09:40,580 --> 00:09:42,240
configuration options there

143
00:09:44,120 --> 00:09:47,520
Alternatively, you can set all the
configuration options using

144
00:09:47,520 --> 00:09:49,020
a Java annotation

145
00:09:50,500 --> 00:09:53,060
Let's take a look at RunCukesTest

146
00:09:55,420 --> 00:09:58,960
The Cucumber annotation tells JUNIT
to run Cucumber

147
00:09:59,920 --> 00:10:01,860
The Cucumber options annotation

148
00:10:01,860 --> 00:10:05,640
has a corresponding property for each of
the options you can pass to Cucumber

149
00:10:07,040 --> 00:10:10,640
If you forget what they are just run
Cucumber with the help option

150
00:10:11,520 --> 00:10:14,240
To make Cucumber really useful
 to your team

151
00:10:14,240 --> 00:10:17,520
it's good to spend time learning the
details of how to configure it

152
00:10:18,360 --> 00:10:21,620
In this lesson we gave you a tour of almost all of

153
00:10:21,620 --> 00:10:23,620
Cucumber's configuration options

154
00:10:24,440 --> 00:10:28,740
You learned how to filter scenarios
by name, line number, or tag

155
00:10:29,760 --> 00:10:33,840
We learned how to format Cucumber's
output and we learned how to write

156
00:10:33,840 --> 00:10:36,280
your scenarios in different spoken languages

157
00:10:37,660 --> 00:10:40,840
You also learned how to set up 
different configurations

158
00:10:40,840 --> 00:10:42,500
for use by your whole team

159
00:10:43,960 --> 00:10:45,980
That's all for this lesson of Cucumber School

160
00:10:46,920 --> 00:10:48,200
See you next time!

161
00:10:49,000 --> 00:10:51,000
Captions created by Jayson Smith for Cucumber Ltd.
