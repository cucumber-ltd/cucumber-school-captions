WEBVTT

1
00:00:14.592 --> 00:00:16.640
Welcome back to cucumber School

2
00:00:17.408 --> 00:00:23.552
Last time we went from cleaning up the shotty features to keep them in sync with the current status of the project

3
00:00:24.320 --> 00:00:29.952
Which strip the scenarios back to only specify the behavior of passing messages between people

4
00:00:30.720 --> 00:00:34.816
We made it clear that the proximity rule had not yet been implemented

5
00:00:36.352 --> 00:00:42.496
You remember from the regular expressions lesson how important it is to be expressive and you scenarios

6
00:00:42.752 --> 00:00:44.288
I keep them readable

7
00:00:45.568 --> 00:00:51.712
And this episode we going to learn some new tricks with cooking that will give you even more flexibility

8
00:00:51.968 --> 00:00:53.760
But how you write scenarios

9
00:00:55.296 --> 00:00:56.576
Once again

10
00:00:56.832 --> 00:00:58.112
The Shanty Pixies

11
00:00:58.368 --> 00:01:04.512
I mean the shattered developers having hard work implementing a proximity rule

12
00:01:05.792 --> 00:01:07.840
Let's have a look at how they got on

13
00:01:11.168 --> 00:01:15.776
Right so those two scenarios we just left his place holders

14
00:01:16.032 --> 00:01:19.104
The one by the listing is within range and

15
00:01:19.360 --> 00:01:24.480
The one where the listener is out of range haven't flashed out on a passing

16
00:01:25.504 --> 00:01:26.528
Fantastic

17
00:01:28.064 --> 00:01:31.904
Let's review the changes to the feature file and more detail

18
00:01:33.696 --> 00:01:36.000
We now have full scenarios

19
00:01:36.256 --> 00:01:39.584
Original two from the last time we looked at the code

20
00:01:39.840 --> 00:01:41.376
And two new ones

21
00:01:42.144 --> 00:01:48.288
With the two new ones fleshed-out we can say that the first scenario we wrote the 1Weather listen to his

22
00:01:48.544 --> 00:01:49.312
Is a message

23
00:01:49.568 --> 00:01:51.616
Is identical to the third one

24
00:01:52.128 --> 00:01:54.688
The 1Weather listener is within range

25
00:01:55.968 --> 00:01:58.784
Keeping excess scenarios is wasteful

26
00:02:00.064 --> 00:02:04.160
They clutter up your feet your files distracting your readers

27
00:02:04.928 --> 00:02:11.072
When you run your features as tests excess cenarios make them take longer to run than necessary

28
00:02:12.864 --> 00:02:19.008
The one where the listener is within range is a perfectly good way of checking that the message has been sent correct

29
00:02:20.032 --> 00:02:21.824
Let's remove the other one

30
00:02:24.128 --> 00:02:29.248
Similarly we no longer really need to be testing multiple messages

31
00:02:29.760 --> 00:02:35.904
We use the test to triangulate and forces to replace the hard code

32
00:02:36.160 --> 00:02:39.488
Did message output with a proper implementation

33
00:02:40.000 --> 00:02:46.144
Now we have a demand model that uses a variable for the message that's an insignificant chance of this Behavior

34
00:02:46.400 --> 00:02:46.912
Dressing

35
00:02:47.424 --> 00:02:49.728
So we can safely remove the test

36
00:02:51.264 --> 00:02:55.872
So now we're down to two scenarios that illustrate this rule about proximity

37
00:02:56.640 --> 00:02:59.200
The one with the listener is within range

38
00:02:59.712 --> 00:03:02.784
And the one where the listener is out of range

39
00:03:03.552 --> 00:03:08.416
Will using two different listeners Lucy is always within range

40
00:03:08.672 --> 00:03:10.720
And Larry is not

41
00:03:11.232 --> 00:03:13.792
It's always show on who's doing the shouting

42
00:03:14.304 --> 00:03:17.632
We create all three people hair in the background

43
00:03:18.400 --> 00:03:21.216
Notice that we also specify the range hair

44
00:03:21.984 --> 00:03:28.128
We could have just had coded it within the system but having it documented here in this scenario helps to make them behave

45
00:03:28.384 --> 00:03:30.944
Lady with specified much easier to understand

46
00:03:31.456 --> 00:03:37.600
A happy side effect is that in order to set the range from a scenario we've had to make it to convey

47
00:03:37.856 --> 00:03:39.648
Considerable property of the system

48
00:03:40.160 --> 00:03:46.304
So if a business stakeholders ever change their minds about the range we won't have to go hunting around in the code for a while we talk

49
00:03:46.560 --> 00:03:51.168
Coded it notice how the steps to create the three people are very similar

50
00:03:53.216 --> 00:03:59.360
Let me see steps like this given when then syntax starts to feel a bit clunky

51
00:04:00.896 --> 00:04:04.480
Imagine if we could just write out a table like this

52
00:04:12.928 --> 00:04:15.232
Well we're in luck

53
00:04:15.488 --> 00:04:16.512
You can

54
00:04:17.536 --> 00:04:23.679
Dragon has a special syntax gold datatables that allows you to specify tablet

55
00:04:23.935 --> 00:04:30.079
Data for step using pipe characters to mount the boundary between cells as you can say

56
00:04:30.335 --> 00:04:36.479
The step definition implicitly Texas single argument which is this comment explains is a

57
00:04:36.735 --> 00:04:39.807
Cucumber AST datatable

58
00:04:40.319 --> 00:04:43.903
This subject has a rich API for using the tablet data

59
00:04:44.927 --> 00:04:50.047
Hottest most basic the table is just a two-dimensional array of arrays

60
00:04:52.351 --> 00:04:58.495
You don't have to use a column had a row in the dates table but when you do you can ask for just the date

61
00:05:07.199 --> 00:05:13.343
When you do use clematis it can be useful to fetch each day to row is a hash with a collar

62
00:05:13.599 --> 00:05:14.879
Tom names his keys

63
00:05:15.135 --> 00:05:17.695
And The Valleys from the cells and not row

64
00:05:18.207 --> 00:05:24.095
Now we can easily its rights over these hashes and turn them into instances of person

65
00:05:42.783 --> 00:05:47.647
Without done we can delete euro-step definition which is now on used

66
00:05:49.183 --> 00:05:55.327
Cucumber strips all the white space surrounding each cell so we can have a nice neat table in the cooking

67
00:05:55.583 --> 00:05:59.167
I still got clean values in the steppe definition underneath

68
00:06:00.191 --> 00:06:06.335
Notice was still have to convert the location from a string into an integer because cucumber a cop know that's the

69
00:06:06.591 --> 00:06:08.383
The type of value in a table

70
00:06:08.895 --> 00:06:11.967
You can also use the map call a method for this

71
00:06:16.319 --> 00:06:21.951
The new tables location column will not contain integers rather than the rule of strings

72
00:06:23.743 --> 00:06:29.887
By the way we specify this title is okay but it's quite hard to visualize what each of the people is

73
00:06:30.143 --> 00:06:30.655
Stud

74
00:06:31.167 --> 00:06:34.495
It might be better to express it like this instead

75
00:06:40.895 --> 00:06:42.431
Do you like that better

76
00:06:43.711 --> 00:06:48.063
Could do but you're worried how will Hamlet and ISTEP definition

77
00:06:48.831 --> 00:06:52.159
Sia not cucumber has she covered

78
00:06:53.951 --> 00:07:00.095
The datatable has a transpose method which returns a new datatable with each row

79
00:07:00.351 --> 00:07:01.631
Turn into a column

80
00:07:03.423 --> 00:07:08.031
Now we can use the transpose table object as we did before

81
00:07:08.799 --> 00:07:12.639
Let's tidy up this code so as not to keep using all these temporary variables

82
00:07:13.151 --> 00:07:19.295
Datatables a very useful for setting up data and given steps but you can also use them for specify

83
00:07:19.551 --> 00:07:20.575
Outcomes

84
00:07:21.855 --> 00:07:26.975
One rule that we've been implying but it never actually explode with an example

85
00:07:27.231 --> 00:07:27.999
Is that

86
00:07:28.255 --> 00:07:31.583
People remember everything they Hood

87
00:07:32.351 --> 00:07:38.495
So far we've only specified a single message so let's try writing a scenario but Sean Shout

88
00:07:38.751 --> 00:07:40.031
More than once

89
00:07:44.383 --> 00:07:47.455
See how natural it is to use a datatable here

90
00:07:48.735 --> 00:07:54.879
We also haven't used any color matters in this case since the data is all in a single column anyway

91
00:07:56.415 --> 00:07:58.719
So how do we implement the steppe definition

92
00:07:59.743 --> 00:08:00.767
Well

93
00:08:01.023 --> 00:08:04.351
The datatable has a really handy mesical def

94
00:08:04.607 --> 00:08:08.191
That we can use to compare two data tables

95
00:08:08.703 --> 00:08:12.287
This will pass if the tables are the same

96
00:08:12.543 --> 00:08:14.079
I say this a different

97
00:08:16.383 --> 00:08:22.527
So we need the actual messages that loses her to be stored in an object that looks like a datatable so

98
00:08:22.783 --> 00:08:25.599
We can compare it to the ones we expect

99
00:08:27.135 --> 00:08:28.927
Two dimensional array will do

100
00:08:29.183 --> 00:08:34.303
So we can just hop over Lucy's messages and create a new single item array for each row

101
00:08:35.071 --> 00:08:41.215
Now we can pass that two-dimensional array to the disk method on the table of expected messages passed in from

102
00:08:41.471 --> 00:08:42.239
McGuckin

103
00:08:43.775 --> 00:08:44.799
Oops

104
00:08:45.055 --> 00:08:47.615
It looks like animated typo and a scenario

105
00:08:48.639 --> 00:08:52.991
We should have included! Sunday expected messages

106
00:08:53.503 --> 00:08:59.647
Well at least this gives you a chance to see the nice different output from cucumber when the tables are different

107
00:09:00.671 --> 00:09:05.535
We see the expected values in Orange on the actual values and white

108
00:09:06.815 --> 00:09:11.167
Let's fix just one of these so you can see how the deaf output changes

109
00:09:13.471 --> 00:09:19.615
Matching Bagels line is green answer the mismatched bro the actual output is in white

110
00:09:19.871 --> 00:09:22.431
Unexpected output is an orange

111
00:09:23.199 --> 00:09:26.527
Let's fix that last typo. should be green again

112
00:09:27.807 --> 00:09:28.575
Crate

113
00:09:28.831 --> 00:09:34.207
When writing scenarios occasionally we want to use a really long piece of data

114
00:09:34.719 --> 00:09:35.999
For example

115
00:09:36.255 --> 00:09:40.863
Let's introduce a new rule about the maximum length of a message

116
00:09:43.423 --> 00:09:45.727
Another scenario to illustrate it

117
00:09:46.239 --> 00:09:49.567
Making the string just over the boundary of the rule

118
00:09:56.735 --> 00:10:02.367
That's pretty ugly isn't it still will press on and get it to Green

119
00:10:02.623 --> 00:10:04.671
Demo show you how to clean it up

120
00:10:05.439 --> 00:10:10.559
Existing step definition handles. Ugly step with a long message just fine

121
00:10:10.815 --> 00:10:14.655
But we need a new Step definition for this last outcome step

122
00:10:16.191 --> 00:10:21.567
Well it's right of all the people in the scenario and check they haven't heard this message

123
00:10:28.223 --> 00:10:31.807
Okay so we have a failing acceptance test

124
00:10:32.063 --> 00:10:35.135
Let's dive down into a solution and implement this new rule

125
00:10:37.183 --> 00:10:43.327
It seems like the network should be responsible for implementing this rule so let's go to its unit test I got a new

126
00:10:43.583 --> 00:10:46.655
Give example to specify this extra responsibility

127
00:10:50.751 --> 00:10:54.847
Will create i-181 character message like this

128
00:10:55.871 --> 00:11:02.015
Place Lucy and shown in the usual positions subscribe listen to the network and then answered

129
00:11:02.271 --> 00:11:05.599
The lazy should not hear the message when it's broadcast

130
00:11:06.623 --> 00:11:08.159
Let's run that test

131
00:11:09.183 --> 00:11:10.975
Good it fails

132
00:11:11.743 --> 00:11:14.559
This is still getting the message at the moment

133
00:11:16.095 --> 00:11:18.143
The how we got to implement this

134
00:11:19.423 --> 00:11:23.775
It looks like we're already implementing the proximity rule here in the broadcast method

135
00:11:24.287 --> 00:11:27.615
That's another if statement here about the message length

136
00:11:29.151 --> 00:11:30.943
From the unit test again

137
00:11:31.455 --> 00:11:32.735
Highest passing

138
00:11:32.991 --> 00:11:34.015
Great

139
00:11:35.295 --> 00:11:38.879
It's got a little bit messy and hard to read

140
00:11:39.647 --> 00:11:42.463
130 basic movie we could make to improve it

141
00:11:42.975 --> 00:11:46.303
Batista just extract a couple of temporary variables

142
00:12:00.895 --> 00:12:01.919
That's better

143
00:12:02.943 --> 00:12:07.551
This car to be improved even further of course but at least we haven't made it any worse

144
00:12:08.319 --> 00:12:10.623
Let's just run the test to check

145
00:12:11.391 --> 00:12:13.951
Great everything still green

146
00:12:16.767 --> 00:12:22.911
Now have everything passing again we can toddy of the gherkin to use a new piece of syntax we've been wanting to tell you

147
00:12:23.167 --> 00:12:23.935
About

148
00:12:24.447 --> 00:12:25.727
The dog string

149
00:12:27.519 --> 00:12:33.407
Cox trains Alliance specify text argument. The sponge of a multiple lines

150
00:12:33.919 --> 00:12:36.735
We could change our step to look like this instead

151
00:12:39.807 --> 00:12:42.111
Now the scenario is much more readable

152
00:12:43.135 --> 00:12:45.439
We don't use dogs drink very often

153
00:12:45.695 --> 00:12:50.047
I think such a lot of dates are in a test cutoff to make it quite brittle

154
00:12:50.559 --> 00:12:54.143
But when you do need it it's useful to know about

155
00:13:08.223 --> 00:13:13.855
You might have noticed that we followed a patent when we added Behavior to the system during this episode

156
00:13:14.623 --> 00:13:19.231
First Express the behavior we wanted in a gherkin scenario

157
00:13:19.487 --> 00:13:24.351
Why don't the step definitions then run cucumber to watch it fail

158
00:13:25.375 --> 00:13:31.519
Then we found the first class and not the main model that needed to change in order to

159
00:13:31.775 --> 00:13:33.567
The support that new Behavior

160
00:13:34.335 --> 00:13:37.407
In this case the network class

161
00:13:38.175 --> 00:13:43.551
We use the unit test to describe how we wanted instances of that class to behave

162
00:13:44.063 --> 00:13:47.391
Then we run the unit test and watched it fail

163
00:13:48.671 --> 00:13:54.047
We focused in on my changes to the class until it's unit test with passing

164
00:13:54.815 --> 00:13:56.863
When the unit test for passing

165
00:13:57.119 --> 00:14:01.983
Vagina made some minor changes to clean up the code and make it more readable

166
00:14:02.495 --> 00:14:06.591
This is the basic test-driven development cycle

167
00:14:06.847 --> 00:14:07.871
Red

168
00:14:08.127 --> 00:14:09.407
Green

169
00:14:09.663 --> 00:14:10.687
Plane

170
00:14:11.711 --> 00:14:16.831
The technical name for this last cleanup step is refactoring

171
00:14:17.343 --> 00:14:22.463
Refactoring is an ugly name for an extremely valuable activity

172
00:14:22.719 --> 00:14:28.351
Improving the design of existing code without changing its Behavior

173
00:14:28.863 --> 00:14:33.983
You can think about it like cleaning up and washing the dishes after you've prepared a meal

174
00:14:34.495 --> 00:14:36.543
Basic housekeeping

175
00:14:37.311 --> 00:14:42.687
But imagine the state of your kitchen if you never made time to do the dishes

176
00:14:43.967 --> 00:14:47.039
Go on imagine it for a second

177
00:14:48.319 --> 00:14:50.367
Yeah

178
00:14:51.135 --> 00:14:52.159
Well

179
00:14:52.415 --> 00:14:56.255
That's how many medical bases end up

180
00:14:57.279 --> 00:15:03.423
The good thing about taking this course is it will teach me how to write solid automated-tests

181
00:15:03.679 --> 00:15:09.823
And the good thing about having solid automated-tests as that you can refactor with confidence knowing that

182
00:15:10.079 --> 00:15:14.943
What if you accidentally change the systems Behavior your tests will tell you

183
00:15:16.991 --> 00:15:20.319
Once we're done refactoring what do we do next

184
00:15:20.831 --> 00:15:23.391
Run cucumber of course

185
00:15:24.415 --> 00:15:30.559
In this case scenario was passing with a single Trip Around The Inn at EDD Loop but some

186
00:15:30.815 --> 00:15:36.959
Times you can spend several hours working through all the unit test you need to get a single scenario to Green

187
00:15:37.983 --> 00:15:40.543
One Step sepsis test is passing

188
00:15:40.799 --> 00:15:44.639
We'll figure out the next most valuable scenario on our to-do list

189
00:15:44.895 --> 00:15:47.967
I shot the whole thing all over again

190
00:15:49.759 --> 00:15:54.111
Together these two Loops make the PD cycle

191
00:15:54.623 --> 00:16:00.767
Outer loop which starts with an acceptance test Keeps Us focused on what the

192
00:16:01.023 --> 00:16:02.559
Business needed to do next

193
00:16:03.583 --> 00:16:09.727
The inner loop where we continuously test Implement and reflect her small unit

194
00:16:09.983 --> 00:16:10.751
Zip code

195
00:16:11.007 --> 00:16:15.615
Is why we decide how will Implement that behavior

196
00:16:17.151 --> 00:16:20.479
Both of these levels of feedback are important

197
00:16:21.247 --> 00:16:26.879
It's sometimes said that your acceptance tests and show your building the right thing

198
00:16:27.647 --> 00:16:33.023
And your unit tests and sure your building the thing right

199
00:16:35.839 --> 00:16:40.191
That's all for this lesson of cucumbers cool see you next time
