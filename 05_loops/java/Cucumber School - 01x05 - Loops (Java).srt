1
00:00:15,060 --> 00:00:17,040
Welcome back to Cucumber School

2
00:00:18,060 --> 00:00:22,400
Last time we worked on cleaning up the
Shouty features to keep them in sync

3
00:00:22,400 --> 00:00:24,140
with the current status of the project

4
00:00:24,940 --> 00:00:26,940
We stripped the scenarios back

5
00:00:26,940 --> 00:00:30,320
to only specify the behaviour
of passing messages between people

6
00:00:31,400 --> 00:00:35,300
We made it clear that the proximity rule
had not yet been implemented

7
00:00:36,980 --> 00:00:39,480
You’ll remember from the
regular expressions lesson

8
00:00:39,480 --> 00:00:43,520
how important it is to be
expressive in your scenarios

9
00:00:43,520 --> 00:00:44,740
and keep them readable

10
00:00:46,140 --> 00:00:49,820
In this episode we’re going to learn
some new tricks with Gherkin

11
00:00:49,820 --> 00:00:53,980
that will give you even more flexibility
about how you write scenarios

12
00:00:55,900 --> 00:00:57,320
Once again

13
00:00:57,320 --> 00:00:58,900
the Shouty pixies --

14
00:00:58,900 --> 00:01:01,800
Umm... -- I mean the Shouty developers --

15
00:01:01,800 --> 00:01:05,140
have been hard at work
implementing that proximity rule

16
00:01:06,480 --> 00:01:08,220
Let's have a look at how they got on

17
00:01:11,900 --> 00:01:16,880
Right, so those two scenarios
we just left as just placeholders:

18
00:01:16,880 --> 00:01:22,500
the one where the listener is within range
and the one where the listener is out of range

19
00:01:22,500 --> 00:01:24,880
have been fleshed out, and are passing

20
00:01:26,020 --> 00:01:27,060
Fantastic!

21
00:01:28,580 --> 00:01:32,020
Let’s review the changes to
the feature file in more detail

22
00:01:34,340 --> 00:01:36,840
We now have four scenarios:

23
00:01:36,840 --> 00:01:41,760
our original two from the last time we
looked at the code, and the two new ones

24
00:01:42,800 --> 00:01:47,640
With the two new ones fleshed out
we can see that the first scenario we wrote -

25
00:01:47,640 --> 00:01:52,640
the one where the listener hears a message -
is identical to the third one -

26
00:01:52,640 --> 00:01:54,960
the one where the listener is within range

27
00:01:56,480 --> 00:01:59,300
Keeping excess scenarios is wasteful:

28
00:02:00,700 --> 00:02:04,280
they clutter up your feature files
distracting your readers

29
00:02:05,580 --> 00:02:07,880
When you run your features as tests

30
00:02:07,880 --> 00:02:11,520
excess scenarios make them
take longer to run than necessary

31
00:02:13,460 --> 00:02:15,840
The one where the listener is within range

32
00:02:15,840 --> 00:02:19,800
is a perfectly good way of checking that
the message has been sent correctly

33
00:02:20,640 --> 00:02:22,160
Let's remove the other one

34
00:02:24,700 --> 00:02:29,440
Similarly, we no longer really need
to be testing multiple messages

35
00:02:30,320 --> 00:02:33,600
We used this test to triangulate

36
00:02:33,600 --> 00:02:38,060
and force us to replace
the hard-coded message output

37
00:02:38,060 --> 00:02:39,940
with a proper implementation

38
00:02:40,580 --> 00:02:44,380
Now we have a domain model that uses
a variable for the message

39
00:02:44,380 --> 00:02:47,920
there's an insignificant chance
of this behaviour regressing

40
00:02:47,920 --> 00:02:50,140
so we can safely remove the test

41
00:02:51,740 --> 00:02:56,260
So now we’re down to two scenarios
that illustrate this rule about proximity:

42
00:02:57,140 --> 00:03:00,400
the one where the listener is within range

43
00:03:00,400 --> 00:03:03,220
and the one where the listener is out of range

44
00:03:04,180 --> 00:03:06,360
We’re using two different listeners

45
00:03:06,360 --> 00:03:10,960
Lucy, who’s always within range
and Larry, who’s not

46
00:03:11,860 --> 00:03:14,120
It’s always Sean who’s doing the shouting

47
00:03:14,860 --> 00:03:18,040
We create all three people here, in the background

48
00:03:19,040 --> 00:03:21,580
Notice that we also specify the range here

49
00:03:22,460 --> 00:03:27,700
We could have just hard-coded it within the system
but having it documented here in the scenario

50
00:03:27,700 --> 00:03:31,380
helps to make the behaviour we’ve specified
much easier to understand

51
00:03:32,860 --> 00:03:34,320
A happy side-effect

52
00:03:34,320 --> 00:03:37,020
is that in order to
set the range from our scenario

53
00:03:37,020 --> 00:03:39,960
we’ve had to make it a
configurable property of the system

54
00:03:40,720 --> 00:03:44,360
So if our business stakeholders ever
change their minds about the range

55
00:03:44,360 --> 00:03:48,080
we won’t have to go hunting around in the code
for where we’d hard-coded it

56
00:03:48,080 --> 00:03:51,520
Notice how the steps that create
the three people are very similar

57
00:03:53,680 --> 00:03:55,400
When we see steps like this

58
00:03:55,400 --> 00:04:00,200
Gherkin’s Given When Then syntax
starts to feel a bit clunky

59
00:04:01,560 --> 00:04:04,800
Imagine if we could just
write out a table like this

60
00:04:18,240 --> 00:04:21,680
Well, we’re in luck. You can!

61
00:04:22,760 --> 00:04:26,640
Gherkin has a special syntax
called Data Tables

62
00:04:26,640 --> 00:04:30,600
that allows you to specify
tabular data for a step

63
00:04:30,600 --> 00:04:34,360
using pipe characters to mark the
boundary between cells

64
00:04:38,280 --> 00:04:42,760
As you can see, the step definition
implicitly takes a single argument

65
00:04:42,760 --> 00:04:47,720
which as this comment explains is a
cucumber.api.DataTable

66
00:04:48,520 --> 00:04:52,400
This object has a rich API for using
the tabular data

67
00:04:53,400 --> 00:04:58,280
At its most basic, the table is just a
two-dimensional array of arrays

68
00:05:08,880 --> 00:05:11,880
You can also turn the table into a list of map

69
00:05:11,880 --> 00:05:18,000
where the first row is used for the map keys
and each following row is used for the map values

70
00:05:19,720 --> 00:05:25,560
Now we can easily iterate over these maps
and turn them into instances of Person

71
00:05:36,480 --> 00:05:41,760
With that done, we can delete our
old step definition, which is now unused

72
00:05:47,540 --> 00:05:50,520
Cucumber strips all the white space
surrounding each cell

73
00:05:50,520 --> 00:05:53,120
so we can have a nice neat table in the Gherkin

74
00:05:53,120 --> 00:05:56,360
but still get clean values
in the step definition underneath

75
00:05:59,860 --> 00:06:03,580
Notice we’ve still had to convert the location
from a string to an integer

76
00:06:03,580 --> 00:06:06,680
because Cucumber can’t know that’s the
type of value in our table

77
00:06:07,960 --> 00:06:11,080
If you have a class that has
the same field names as the header row

78
00:06:11,080 --> 00:06:12,640
in the table

79
00:06:12,640 --> 00:06:17,340
you can have Cucumber automatically convert
the table into a list of that class

80
00:06:18,060 --> 00:06:21,460
If our Person object had
name and location fields

81
00:06:21,460 --> 00:06:24,740
and didn’t take an instance of
Network in its constructor

82
00:06:24,740 --> 00:06:28,440
we could automatically create instances
of Person from this table

83
00:06:29,680 --> 00:06:31,680
But things aren’t always that simple

84
00:06:33,020 --> 00:06:34,000
Instead

85
00:06:34,000 --> 00:06:38,820
we’ll define a simple Whereabouts class
to represent the data in the table

86
00:06:40,160 --> 00:06:43,300
We’ve made it an inner class
to the step definition class

87
00:06:43,300 --> 00:06:45,820
as it doesn’t form part of our core domain

88
00:06:46,920 --> 00:06:51,120
Now we can use the asList method
on the DataTable

89
00:06:51,120 --> 00:06:54,180
to convert the table
into a list of Whereabouts

90
00:06:55,680 --> 00:06:56,840
In fact

91
00:06:56,840 --> 00:07:00,080
you don't have to explicitly
convert the table to a list

92
00:07:00,080 --> 00:07:03,260
If you declare your parameter
as a generic list

93
00:07:03,260 --> 00:07:08,320
Cucumber will automatically convert
the table into a list of the generic type for you

94
00:07:09,620 --> 00:07:15,600
Now the way we’ve specified this data is OK
but it’s quite hard to visualise

95
00:07:15,600 --> 00:07:17,280
where each of the people is stood

96
00:07:18,220 --> 00:07:21,460
It might be better to express it like this instead

97
00:07:23,160 --> 00:07:24,400
Do you like that better?

98
00:07:25,600 --> 00:07:29,500
You do, but you’re worried how
we’ll handle it in our step definition?

99
00:07:30,640 --> 00:07:34,240
Fear not. Cucumber has you covered

100
00:07:36,160 --> 00:07:41,760
If you annotate the method parameter
with the @Transpose annotation

101
00:07:41,900 --> 00:07:46,540
Cucumber will turn each row into a column
before passing it to the step definition

102
00:07:48,100 --> 00:07:51,900
You can also call the
transpose method on a DataTable

103
00:07:51,900 --> 00:07:55,560
to explicitly create
a new transposed DataTable

104
00:08:05,120 --> 00:08:09,360
Data tables are very useful for
setting up data in Given steps

105
00:08:09,360 --> 00:08:12,280
but you can also use them for specifying outcomes

106
00:08:14,000 --> 00:08:19,280
One rule that we’ve been implying but have
never actually explored with an example

107
00:08:19,280 --> 00:08:23,440
is that people remember everything they’ve heard

108
00:08:24,480 --> 00:08:29,080
So far we’ve only specified a single message
so let’s try writing a scenario

109
00:08:29,080 --> 00:08:31,960
where Sean shouts more than once

110
00:08:36,480 --> 00:08:39,360
See how natural it is to use a Data Table here?

111
00:08:40,800 --> 00:08:46,880
We also haven’t used any column headers in this case
since the data is all in a single column anyway

112
00:08:48,500 --> 00:08:50,740
So how do we implement this step definition?

113
00:08:51,880 --> 00:08:56,660
Well, the DataTable has
a really handy method called diff

114
00:08:56,660 --> 00:08:59,960
that we can use to compare two Data Tables

115
00:09:00,740 --> 00:09:06,180
diff will pass if the tables are the same
and fail if they’re different

116
00:09:08,320 --> 00:09:11,460
So we need the actual messages
that Lucy’s heard

117
00:09:11,460 --> 00:09:17,380
to be stored in an object that looks like a DataTable
so we can compare it to the ones we expect

118
00:09:18,000 --> 00:09:20,580
A list of list of string will do

119
00:09:20,580 --> 00:09:26,060
so we can just iterate over Lucy’s messages and create
a new single-item list for each row

120
00:09:27,280 --> 00:09:30,120
Now we can pass that list
to the diff method

121
00:09:30,120 --> 00:09:33,600
on the table of expected messages
passed in from the Gherkin

122
00:09:39,200 --> 00:09:42,560
Oops! It looks like we made a typo in our scenario

123
00:09:43,420 --> 00:09:47,480
We should have included exclamation marks
on the expected messages

124
00:09:48,140 --> 00:09:52,660
Well, at least this gives you a chance to see
the nice diff output from Cucumber

125
00:09:52,660 --> 00:09:54,080
when the tables are different

126
00:09:54,940 --> 00:09:58,760
We see the expected values
prefixed with a minus

127
00:09:58,760 --> 00:10:01,600
and the actual values
prefixed with a plus

128
00:10:03,400 --> 00:10:07,720
Let’s fix just one of these so you can see how
the diff output changes

129
00:10:09,700 --> 00:10:13,220
The matching bagels! line
no longer has a minus

130
00:10:13,220 --> 00:10:14,820
and for the mismatched row

131
00:10:14,820 --> 00:10:18,720
the actual value still has a minus
and the expected value has a plus

132
00:10:19,980 --> 00:10:23,140
Let’s fix that last typo
and we should be green again

133
00:10:26,080 --> 00:10:26,940
Great

134
00:10:28,440 --> 00:10:33,740
When writing scenarios, occasionally we want
to use a really long piece of data

135
00:10:34,580 --> 00:10:40,500
For example, let’s introduce a new rule
about the maximum length of a message

136
00:10:43,060 --> 00:10:45,940
...and add a scenario to illustrate it

137
00:10:45,940 --> 00:10:49,280
making the string just over
the boundary of the rule

138
00:10:55,200 --> 00:10:57,280
That’s pretty ugly isn’t it!

139
00:10:57,280 --> 00:11:02,020
Still, we’ll press on and get it to green
then we’ll show you how to clean it up

140
00:11:03,080 --> 00:11:08,800
Our existing step definition handles that
ugly step with the long message just fine

141
00:11:08,800 --> 00:11:12,480
but we need a new step definition
for this last outcome step

142
00:11:13,880 --> 00:11:19,280
We’ll iterate over all the people in the scenario
and check they haven’t heard this message

143
00:11:32,580 --> 00:11:35,780
OK, so we have a failing acceptance test

144
00:11:35,780 --> 00:11:38,660
Let’s dive down into our solution
and implement this new rule

145
00:11:40,860 --> 00:11:44,420
It seems like the Network should be
responsible for implementing this rule

146
00:11:44,420 --> 00:11:50,140
so let’s go to its unit tests and add a new
example to specify this extra responsibility

147
00:12:04,760 --> 00:12:08,760
We’ll create a 181-character message like this...

148
00:12:09,700 --> 00:12:14,960
place Lucy and Sean in their usual positions
subscribe Lucy on the network

149
00:12:14,960 --> 00:12:19,400
and then assert that Lucy should not hear
the message when it’s broadcast

150
00:12:22,060 --> 00:12:23,500
Let's run that test

151
00:12:24,660 --> 00:12:26,260
Good, it fails

152
00:12:27,060 --> 00:12:29,700
Lucy’s still getting the message at the moment

153
00:12:31,500 --> 00:12:33,740
Now how are we going to implement this?

154
00:12:34,800 --> 00:12:39,200
It looks like we’re already implementing the
proximity rule here in the broadcast method

155
00:12:39,800 --> 00:12:42,820
Let’s add another if statement here
about the message length

156
00:12:44,740 --> 00:12:46,160
Run the unit test again...

157
00:12:46,900 --> 00:12:49,460
and it’s passing. Great

158
00:12:50,520 --> 00:12:54,040
The code here has got
a little bit messy and hard to read

159
00:12:55,040 --> 00:12:58,320
One very basic move we could make to improve it

160
00:12:58,320 --> 00:13:01,520
would be to just extract
a couple of temporary variables

161
00:13:09,880 --> 00:13:11,040
That's better

162
00:13:11,560 --> 00:13:16,320
This code could be improved even further of course
but at least we haven’t made it any worse

163
00:13:17,280 --> 00:13:19,200
Let’s just run the tests to check

164
00:13:20,400 --> 00:13:22,560
Great - everything’s still green

165
00:13:24,040 --> 00:13:26,120
Now we have everything passing again

166
00:13:26,120 --> 00:13:29,080
we can tidy up the Gherkin to use
a new piece of syntax

167
00:13:29,080 --> 00:13:30,880
we’ve been wanting
to tell you about:

168
00:13:31,720 --> 00:13:32,960
a DocString

169
00:13:34,880 --> 00:13:40,480
DocStrings allow you to specify a text argument
for a step that spans over multiple lines

170
00:13:41,320 --> 00:13:43,800
We could change our step to look like this instead

171
00:13:47,320 --> 00:13:49,400
Now the scenario is much more readable

172
00:13:50,640 --> 00:13:53,200
We don’t use DocStrings very often -

173
00:13:53,200 --> 00:13:57,840
having such a lot of data in a test
can often make it quite brittle

174
00:13:57,840 --> 00:14:01,240
but when you do need it
it's useful to know about

175
00:14:11,720 --> 00:14:14,400
You might have noticed
that we’ve followed a pattern

176
00:14:14,420 --> 00:14:17,180
when we added behaviour to the system
during this episode

177
00:14:18,160 --> 00:14:22,980
First we expressed the behaviour
we wanted in a Gherkin scenario

178
00:14:22,980 --> 00:14:27,680
wired up the step definitions
then ran Cucumber to watch it fail

179
00:14:28,920 --> 00:14:34,460
Then, we found the first class in our
domain model that needed to change

180
00:14:34,460 --> 00:14:36,720
in order to support that new behaviour

181
00:14:37,860 --> 00:14:40,640
In this case, the Network class

182
00:14:41,720 --> 00:14:46,620
We used a unit test to describe how
we wanted instances of that class to behave

183
00:14:47,540 --> 00:14:50,560
Then we ran the unit test and watched it fail

184
00:14:52,340 --> 00:14:57,200
We focused in and made changes to the class
until its unit tests were passing

185
00:14:58,380 --> 00:15:00,520
When the unit tests were passing

186
00:15:00,520 --> 00:15:05,260
we then made some minor changes to
clean up the code and make it more readable

187
00:15:06,200 --> 00:15:10,420
This is the basic test-driven-development cycle:

188
00:15:10,420 --> 00:15:11,900
red

189
00:15:11,900 --> 00:15:13,200
green

190
00:15:13,200 --> 00:15:14,100
clean

191
00:15:15,140 --> 00:15:20,040
The technical name for this
last clean-up step is refactoring

192
00:15:20,840 --> 00:15:26,240
Refactoring is an ugly name for
an extremely valuable activity:

193
00:15:26,240 --> 00:15:31,680
improving the design of existing code
without changing its behaviour

194
00:15:32,580 --> 00:15:34,520
You can think about it like cleaning up

195
00:15:34,520 --> 00:15:37,200
and washing the dishes after
you’ve prepared a meal:

196
00:15:38,180 --> 00:15:39,860
basic housekeeping

197
00:15:40,760 --> 00:15:45,860
But imagine the state of your kitchen
if you never made time to do the dishes

198
00:15:47,540 --> 00:15:50,220
Go on, imagine it for a second

199
00:15:51,920 --> 00:15:53,640
Yuck!

200
00:15:54,560 --> 00:15:59,540
Well, that’s how many, many codebases end up

201
00:16:00,920 --> 00:16:03,120
The good thing about taking this course

202
00:16:03,120 --> 00:16:07,220
is that we’re teaching you how
to write solid automated tests

203
00:16:07,220 --> 00:16:10,120
and the good thing about having
solid automated tests

204
00:16:10,120 --> 00:16:12,740
is you can refactor with confidence

205
00:16:12,740 --> 00:16:16,400
knowing that if you accidentally change the system’s behaviour

206
00:16:16,400 --> 00:16:18,300
your tests will tell you

207
00:16:20,540 --> 00:16:23,620
Once we’re done refactoring
what do we do next?

208
00:16:24,500 --> 00:16:26,800
Run Cucumber, of course!

209
00:16:28,080 --> 00:16:33,500
In this case, our scenario was passing with
a single trip round the inner TDD loop

210
00:16:33,500 --> 00:16:37,340
but sometimes you can spend several hours
working through all the unit tests

211
00:16:37,340 --> 00:16:40,460
you need to get a single scenario to green

212
00:16:41,500 --> 00:16:44,300
Once the acceptance test is passing

213
00:16:44,300 --> 00:16:48,480
we figure out the next
most valuable scenario on our todo list

214
00:16:48,480 --> 00:16:51,280
and start the whole thing all over again!

215
00:16:53,320 --> 00:16:57,240
Together, these two loops make the BDD cycle

216
00:16:58,180 --> 00:17:01,880
The outer loop,
which starts with an acceptance test

217
00:17:01,880 --> 00:17:05,780
keeps us focused on what the business
needs us to do next

218
00:17:06,980 --> 00:17:10,360
The inner loop
where we continuously test

219
00:17:10,360 --> 00:17:14,640
implement, then refactor
small units of code

220
00:17:14,640 --> 00:17:18,840
is where decide how
we’ll implement that behaviour

221
00:17:20,660 --> 00:17:23,640
Both of these levels of feedback are important

222
00:17:24,940 --> 00:17:31,380
It’s sometimes said that your acceptance tests
ensure you’re building the right thing

223
00:17:31,380 --> 00:17:36,380
and your unit tests
ensure you’re building the thing right

224
00:17:39,400 --> 00:17:42,160
That’s all for this lesson of Cucumber School

225
00:17:42,160 --> 00:17:43,480
See you next time!

226
00:17:44,660 --> 00:17:46,660
Captions created by Jayson Smith for Cucumber Ltd.
